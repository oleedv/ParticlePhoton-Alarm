
d:/Skole/Embedded/Particle/Eksamenv14/target/2.0.0-rc.4/photon/Eksamenv14.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .module_info  00000018  080a0000  080a0000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .dynalib      00000004  080a0018  080a0018  00010018  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  2 .text         00003024  080a001c  080a001c  0001001c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .backup       00000004  40024000  080a3040  00014000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  4 .data         0000006c  20000000  080a3044  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .bss          00000534  2000006c  2000006c  0003006c  2**2
                  ALLOC
  6 .module_info_suffix 00000028  080a30b0  080a30b0  000230b0  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .module_info_crc 00000004  080a30d8  080a30d8  000230d8  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .debug_info   00161f08  00000000  00000000  000230dc  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_abbrev 000197b8  00000000  00000000  00184fe4  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00021e33  00000000  00000000  0019e79c  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_aranges 000027f0  00000000  00000000  001c05cf  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00006348  00000000  00000000  001c2dbf  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_macro  0002bf9f  00000000  00000000  001c9107  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_line   00039387  00000000  00000000  001f50a6  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_str    000b4d98  00000000  00000000  0022e42d  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_frame  0000673c  00000000  00000000  002e31c8  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080a001c <module_user_pre_init>:
/**
 * Initializes this user module. Returns the start of the heap.
 */
void* module_user_pre_init() {

    if ( (&link_global_data_start!=&link_global_data_initial_values) && (link_global_data_size != 0))
 80a001c:	4809      	ldr	r0, [pc, #36]	; (80a0044 <link_dynalib_end+0x28>)
 80a001e:	490a      	ldr	r1, [pc, #40]	; (80a0048 <link_dynalib_end+0x2c>)
void* module_user_pre_init() {
 80a0020:	b508      	push	{r3, lr}
    if ( (&link_global_data_start!=&link_global_data_initial_values) && (link_global_data_size != 0))
 80a0022:	4288      	cmp	r0, r1
 80a0024:	d005      	beq.n	80a0032 <module_user_pre_init+0x16>
 80a0026:	4a09      	ldr	r2, [pc, #36]	; (80a004c <link_dynalib_end+0x30>)
 80a0028:	4282      	cmp	r2, r0
 80a002a:	d002      	beq.n	80a0032 <module_user_pre_init+0x16>
    {
        memcpy(&link_global_data_start, &link_global_data_initial_values, link_global_data_size);
 80a002c:	1a12      	subs	r2, r2, r0
 80a002e:	f002 fe27 	bl	80a2c80 <memcpy>
    }

    memset(&link_bss_location, 0, link_bss_size );
 80a0032:	4807      	ldr	r0, [pc, #28]	; (80a0050 <link_dynalib_end+0x34>)
 80a0034:	4a07      	ldr	r2, [pc, #28]	; (80a0054 <link_dynalib_end+0x38>)
 80a0036:	2100      	movs	r1, #0
 80a0038:	1a12      	subs	r2, r2, r0
 80a003a:	f002 fe2f 	bl	80a2c9c <memset>
    return &link_heap_start;
}
 80a003e:	4806      	ldr	r0, [pc, #24]	; (80a0058 <link_dynalib_end+0x3c>)
 80a0040:	bd08      	pop	{r3, pc}
 80a0042:	bf00      	nop
 80a0044:	20000000 	.word	0x20000000
 80a0048:	080a3044 	.word	0x080a3044
 80a004c:	2000006c 	.word	0x2000006c
 80a0050:	2000006c 	.word	0x2000006c
 80a0054:	200005a0 	.word	0x200005a0
 80a0058:	200005a0 	.word	0x200005a0

080a005c <module_user_init>:
extern constructor_ptr_t link_constructors_location[];
extern constructor_ptr_t link_constructors_end;
#define link_constructors_size   ((unsigned long)&link_constructors_end  -  (unsigned long)&link_constructors_location )

void module_user_init()
{
 80a005c:	b570      	push	{r4, r5, r6, lr}
    module_user_init_hook();
 80a005e:	f001 fa81 	bl	80a1564 <module_user_init_hook>

    // invoke constructors
    int ctor_num;
    for (ctor_num=0; ctor_num < link_constructors_size/sizeof(constructor_ptr_t); ctor_num++ )
 80a0062:	2500      	movs	r5, #0
 80a0064:	4e05      	ldr	r6, [pc, #20]	; (80a007c <module_user_init+0x20>)
 80a0066:	4c06      	ldr	r4, [pc, #24]	; (80a0080 <module_user_init+0x24>)
 80a0068:	1ba4      	subs	r4, r4, r6
 80a006a:	08a4      	lsrs	r4, r4, #2
 80a006c:	42a5      	cmp	r5, r4
 80a006e:	d100      	bne.n	80a0072 <module_user_init+0x16>
    {
        link_constructors_location[ctor_num]();
    }
}
 80a0070:	bd70      	pop	{r4, r5, r6, pc}
        link_constructors_location[ctor_num]();
 80a0072:	f856 3b04 	ldr.w	r3, [r6], #4
 80a0076:	4798      	blx	r3
    for (ctor_num=0; ctor_num < link_constructors_size/sizeof(constructor_ptr_t); ctor_num++ )
 80a0078:	3501      	adds	r5, #1
 80a007a:	e7f7      	b.n	80a006c <module_user_init+0x10>
 80a007c:	080a3014 	.word	0x080a3014
 80a0080:	080a3038 	.word	0x080a3038

080a0084 <module_user_setup>:

/**
 * Export these functions with a fuller name so they don't clash with the setup/loop wrappers in the system module.
 */
void module_user_setup() {
    setup();
 80a0084:	f000 b938 	b.w	80a02f8 <setup>

080a0088 <module_user_loop>:
}

void module_user_loop() {
 80a0088:	b508      	push	{r3, lr}
    loop();
 80a008a:	f000 fa23 	bl	80a04d4 <loop>
    _post_loop();
}
 80a008e:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    _post_loop();
 80a0092:	f001 ba29 	b.w	80a14e8 <_post_loop>

080a0096 <_Znwj>:
 * Implement C++ new/delete operators using the heap
 */

void *operator new(size_t size)
{
	return malloc(size);
 80a0096:	f000 bf59 	b.w	80a0f4c <malloc>

080a009a <_Znaj>:
 80a009a:	f000 bf57 	b.w	80a0f4c <malloc>

080a009e <_ZdlPv>:
	return malloc(size);
}

void operator delete(void *p)
{
	free(p);
 80a009e:	f000 bf5d 	b.w	80a0f5c <free>

080a00a2 <__cxa_guard_acquire>:

/* Provide default implemenation for __cxa_guard_acquire() and
 * __cxa_guard_release(). Note: these must be revisited if a multitasking
 * OS is ported to this platform. */
__extension__ typedef int __guard __attribute__((mode (__DI__)));
int __cxa_guard_acquire(__guard *g) {return !*(char *)(g);};
 80a00a2:	7800      	ldrb	r0, [r0, #0]
 80a00a4:	fab0 f080 	clz	r0, r0
 80a00a8:	0940      	lsrs	r0, r0, #5
 80a00aa:	4770      	bx	lr

080a00ac <__cxa_guard_release>:
void __cxa_guard_release (__guard *g) {*(char *)g = 1;};
 80a00ac:	2301      	movs	r3, #1
 80a00ae:	7003      	strb	r3, [r0, #0]
 80a00b0:	4770      	bx	lr
	...

080a00b4 <NVIC_Init>:
 80a00b4:	78c3      	ldrb	r3, [r0, #3]
 80a00b6:	b31b      	cbz	r3, 80a0100 <NVIC_Init+0x4c>
 80a00b8:	4b17      	ldr	r3, [pc, #92]	; (80a0118 <NVIC_Init+0x64>)
 80a00ba:	68da      	ldr	r2, [r3, #12]
 80a00bc:	7843      	ldrb	r3, [r0, #1]
 80a00be:	43d2      	mvns	r2, r2
 80a00c0:	f3c2 2202 	ubfx	r2, r2, #8, #3
 80a00c4:	f1c2 0104 	rsb	r1, r2, #4
 80a00c8:	b2c9      	uxtb	r1, r1
 80a00ca:	408b      	lsls	r3, r1
 80a00cc:	b2d9      	uxtb	r1, r3
 80a00ce:	230f      	movs	r3, #15
 80a00d0:	4113      	asrs	r3, r2
 80a00d2:	7882      	ldrb	r2, [r0, #2]
 80a00d4:	4013      	ands	r3, r2
 80a00d6:	7802      	ldrb	r2, [r0, #0]
 80a00d8:	430b      	orrs	r3, r1
 80a00da:	011b      	lsls	r3, r3, #4
 80a00dc:	f102 4260 	add.w	r2, r2, #3758096384	; 0xe0000000
 80a00e0:	b2db      	uxtb	r3, r3
 80a00e2:	f502 4261 	add.w	r2, r2, #57600	; 0xe100
 80a00e6:	f882 3300 	strb.w	r3, [r2, #768]	; 0x300
 80a00ea:	7803      	ldrb	r3, [r0, #0]
 80a00ec:	2201      	movs	r2, #1
 80a00ee:	0959      	lsrs	r1, r3, #5
 80a00f0:	f003 031f 	and.w	r3, r3, #31
 80a00f4:	fa02 f303 	lsl.w	r3, r2, r3
 80a00f8:	4a08      	ldr	r2, [pc, #32]	; (80a011c <NVIC_Init+0x68>)
 80a00fa:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
 80a00fe:	4770      	bx	lr
 80a0100:	7803      	ldrb	r3, [r0, #0]
 80a0102:	2101      	movs	r1, #1
 80a0104:	095a      	lsrs	r2, r3, #5
 80a0106:	f003 031f 	and.w	r3, r3, #31
 80a010a:	4099      	lsls	r1, r3
 80a010c:	f102 0320 	add.w	r3, r2, #32
 80a0110:	4a02      	ldr	r2, [pc, #8]	; (80a011c <NVIC_Init+0x68>)
 80a0112:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
 80a0116:	4770      	bx	lr
 80a0118:	e000ed00 	.word	0xe000ed00
 80a011c:	e000e100 	.word	0xe000e100

080a0120 <RCC_APB1PeriphResetCmd>:
 80a0120:	4b04      	ldr	r3, [pc, #16]	; (80a0134 <RCC_APB1PeriphResetCmd+0x14>)
 80a0122:	6a1a      	ldr	r2, [r3, #32]
 80a0124:	b109      	cbz	r1, 80a012a <RCC_APB1PeriphResetCmd+0xa>
 80a0126:	4310      	orrs	r0, r2
 80a0128:	e001      	b.n	80a012e <RCC_APB1PeriphResetCmd+0xe>
 80a012a:	ea22 0000 	bic.w	r0, r2, r0
 80a012e:	6218      	str	r0, [r3, #32]
 80a0130:	4770      	bx	lr
 80a0132:	bf00      	nop
 80a0134:	40023800 	.word	0x40023800

080a0138 <RCC_APB2PeriphResetCmd>:
 80a0138:	4b04      	ldr	r3, [pc, #16]	; (80a014c <RCC_APB2PeriphResetCmd+0x14>)
 80a013a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80a013c:	b109      	cbz	r1, 80a0142 <RCC_APB2PeriphResetCmd+0xa>
 80a013e:	4310      	orrs	r0, r2
 80a0140:	e001      	b.n	80a0146 <RCC_APB2PeriphResetCmd+0xe>
 80a0142:	ea22 0000 	bic.w	r0, r2, r0
 80a0146:	6258      	str	r0, [r3, #36]	; 0x24
 80a0148:	4770      	bx	lr
 80a014a:	bf00      	nop
 80a014c:	40023800 	.word	0x40023800

080a0150 <TIM_DeInit>:
 80a0150:	b508      	push	{r3, lr}
 80a0152:	4b47      	ldr	r3, [pc, #284]	; (80a0270 <TIM_DeInit+0x120>)
 80a0154:	4298      	cmp	r0, r3
 80a0156:	d105      	bne.n	80a0164 <TIM_DeInit+0x14>
 80a0158:	2001      	movs	r0, #1
 80a015a:	4601      	mov	r1, r0
 80a015c:	f7ff ffec 	bl	80a0138 <RCC_APB2PeriphResetCmd>
 80a0160:	2001      	movs	r0, #1
 80a0162:	e03d      	b.n	80a01e0 <TIM_DeInit+0x90>
 80a0164:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
 80a0168:	d105      	bne.n	80a0176 <TIM_DeInit+0x26>
 80a016a:	2001      	movs	r0, #1
 80a016c:	4601      	mov	r1, r0
 80a016e:	f7ff ffd7 	bl	80a0120 <RCC_APB1PeriphResetCmd>
 80a0172:	2001      	movs	r0, #1
 80a0174:	e076      	b.n	80a0264 <TIM_DeInit+0x114>
 80a0176:	4b3f      	ldr	r3, [pc, #252]	; (80a0274 <TIM_DeInit+0x124>)
 80a0178:	4298      	cmp	r0, r3
 80a017a:	d105      	bne.n	80a0188 <TIM_DeInit+0x38>
 80a017c:	2002      	movs	r0, #2
 80a017e:	2101      	movs	r1, #1
 80a0180:	f7ff ffce 	bl	80a0120 <RCC_APB1PeriphResetCmd>
 80a0184:	2002      	movs	r0, #2
 80a0186:	e06d      	b.n	80a0264 <TIM_DeInit+0x114>
 80a0188:	4b3b      	ldr	r3, [pc, #236]	; (80a0278 <TIM_DeInit+0x128>)
 80a018a:	4298      	cmp	r0, r3
 80a018c:	d105      	bne.n	80a019a <TIM_DeInit+0x4a>
 80a018e:	2004      	movs	r0, #4
 80a0190:	2101      	movs	r1, #1
 80a0192:	f7ff ffc5 	bl	80a0120 <RCC_APB1PeriphResetCmd>
 80a0196:	2004      	movs	r0, #4
 80a0198:	e064      	b.n	80a0264 <TIM_DeInit+0x114>
 80a019a:	4b38      	ldr	r3, [pc, #224]	; (80a027c <TIM_DeInit+0x12c>)
 80a019c:	4298      	cmp	r0, r3
 80a019e:	d105      	bne.n	80a01ac <TIM_DeInit+0x5c>
 80a01a0:	2008      	movs	r0, #8
 80a01a2:	2101      	movs	r1, #1
 80a01a4:	f7ff ffbc 	bl	80a0120 <RCC_APB1PeriphResetCmd>
 80a01a8:	2008      	movs	r0, #8
 80a01aa:	e05b      	b.n	80a0264 <TIM_DeInit+0x114>
 80a01ac:	4b34      	ldr	r3, [pc, #208]	; (80a0280 <TIM_DeInit+0x130>)
 80a01ae:	4298      	cmp	r0, r3
 80a01b0:	d105      	bne.n	80a01be <TIM_DeInit+0x6e>
 80a01b2:	2010      	movs	r0, #16
 80a01b4:	2101      	movs	r1, #1
 80a01b6:	f7ff ffb3 	bl	80a0120 <RCC_APB1PeriphResetCmd>
 80a01ba:	2010      	movs	r0, #16
 80a01bc:	e052      	b.n	80a0264 <TIM_DeInit+0x114>
 80a01be:	4b31      	ldr	r3, [pc, #196]	; (80a0284 <TIM_DeInit+0x134>)
 80a01c0:	4298      	cmp	r0, r3
 80a01c2:	d105      	bne.n	80a01d0 <TIM_DeInit+0x80>
 80a01c4:	2020      	movs	r0, #32
 80a01c6:	2101      	movs	r1, #1
 80a01c8:	f7ff ffaa 	bl	80a0120 <RCC_APB1PeriphResetCmd>
 80a01cc:	2020      	movs	r0, #32
 80a01ce:	e049      	b.n	80a0264 <TIM_DeInit+0x114>
 80a01d0:	4b2d      	ldr	r3, [pc, #180]	; (80a0288 <TIM_DeInit+0x138>)
 80a01d2:	4298      	cmp	r0, r3
 80a01d4:	d109      	bne.n	80a01ea <TIM_DeInit+0x9a>
 80a01d6:	2002      	movs	r0, #2
 80a01d8:	2101      	movs	r1, #1
 80a01da:	f7ff ffad 	bl	80a0138 <RCC_APB2PeriphResetCmd>
 80a01de:	2002      	movs	r0, #2
 80a01e0:	2100      	movs	r1, #0
 80a01e2:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 80a01e6:	f7ff bfa7 	b.w	80a0138 <RCC_APB2PeriphResetCmd>
 80a01ea:	4b28      	ldr	r3, [pc, #160]	; (80a028c <TIM_DeInit+0x13c>)
 80a01ec:	4298      	cmp	r0, r3
 80a01ee:	d107      	bne.n	80a0200 <TIM_DeInit+0xb0>
 80a01f0:	f44f 3080 	mov.w	r0, #65536	; 0x10000
 80a01f4:	2101      	movs	r1, #1
 80a01f6:	f7ff ff9f 	bl	80a0138 <RCC_APB2PeriphResetCmd>
 80a01fa:	f44f 3080 	mov.w	r0, #65536	; 0x10000
 80a01fe:	e7ef      	b.n	80a01e0 <TIM_DeInit+0x90>
 80a0200:	4b23      	ldr	r3, [pc, #140]	; (80a0290 <TIM_DeInit+0x140>)
 80a0202:	4298      	cmp	r0, r3
 80a0204:	d107      	bne.n	80a0216 <TIM_DeInit+0xc6>
 80a0206:	f44f 3000 	mov.w	r0, #131072	; 0x20000
 80a020a:	2101      	movs	r1, #1
 80a020c:	f7ff ff94 	bl	80a0138 <RCC_APB2PeriphResetCmd>
 80a0210:	f44f 3000 	mov.w	r0, #131072	; 0x20000
 80a0214:	e7e4      	b.n	80a01e0 <TIM_DeInit+0x90>
 80a0216:	4b1f      	ldr	r3, [pc, #124]	; (80a0294 <TIM_DeInit+0x144>)
 80a0218:	4298      	cmp	r0, r3
 80a021a:	d107      	bne.n	80a022c <TIM_DeInit+0xdc>
 80a021c:	f44f 2080 	mov.w	r0, #262144	; 0x40000
 80a0220:	2101      	movs	r1, #1
 80a0222:	f7ff ff89 	bl	80a0138 <RCC_APB2PeriphResetCmd>
 80a0226:	f44f 2080 	mov.w	r0, #262144	; 0x40000
 80a022a:	e7d9      	b.n	80a01e0 <TIM_DeInit+0x90>
 80a022c:	4b1a      	ldr	r3, [pc, #104]	; (80a0298 <TIM_DeInit+0x148>)
 80a022e:	4298      	cmp	r0, r3
 80a0230:	d105      	bne.n	80a023e <TIM_DeInit+0xee>
 80a0232:	2040      	movs	r0, #64	; 0x40
 80a0234:	2101      	movs	r1, #1
 80a0236:	f7ff ff73 	bl	80a0120 <RCC_APB1PeriphResetCmd>
 80a023a:	2040      	movs	r0, #64	; 0x40
 80a023c:	e012      	b.n	80a0264 <TIM_DeInit+0x114>
 80a023e:	4b17      	ldr	r3, [pc, #92]	; (80a029c <TIM_DeInit+0x14c>)
 80a0240:	4298      	cmp	r0, r3
 80a0242:	d105      	bne.n	80a0250 <TIM_DeInit+0x100>
 80a0244:	2080      	movs	r0, #128	; 0x80
 80a0246:	2101      	movs	r1, #1
 80a0248:	f7ff ff6a 	bl	80a0120 <RCC_APB1PeriphResetCmd>
 80a024c:	2080      	movs	r0, #128	; 0x80
 80a024e:	e009      	b.n	80a0264 <TIM_DeInit+0x114>
 80a0250:	4b13      	ldr	r3, [pc, #76]	; (80a02a0 <TIM_DeInit+0x150>)
 80a0252:	4298      	cmp	r0, r3
 80a0254:	d10b      	bne.n	80a026e <TIM_DeInit+0x11e>
 80a0256:	f44f 7080 	mov.w	r0, #256	; 0x100
 80a025a:	2101      	movs	r1, #1
 80a025c:	f7ff ff60 	bl	80a0120 <RCC_APB1PeriphResetCmd>
 80a0260:	f44f 7080 	mov.w	r0, #256	; 0x100
 80a0264:	2100      	movs	r1, #0
 80a0266:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 80a026a:	f7ff bf59 	b.w	80a0120 <RCC_APB1PeriphResetCmd>
 80a026e:	bd08      	pop	{r3, pc}
 80a0270:	40010000 	.word	0x40010000
 80a0274:	40000400 	.word	0x40000400
 80a0278:	40000800 	.word	0x40000800
 80a027c:	40000c00 	.word	0x40000c00
 80a0280:	40001000 	.word	0x40001000
 80a0284:	40001400 	.word	0x40001400
 80a0288:	40010400 	.word	0x40010400
 80a028c:	40014000 	.word	0x40014000
 80a0290:	40014400 	.word	0x40014400
 80a0294:	40014800 	.word	0x40014800
 80a0298:	40001800 	.word	0x40001800
 80a029c:	40001c00 	.word	0x40001c00
 80a02a0:	40002000 	.word	0x40002000

080a02a4 <TIM_Cmd>:
 80a02a4:	8803      	ldrh	r3, [r0, #0]
 80a02a6:	b119      	cbz	r1, 80a02b0 <TIM_Cmd+0xc>
 80a02a8:	b29b      	uxth	r3, r3
 80a02aa:	f043 0301 	orr.w	r3, r3, #1
 80a02ae:	e003      	b.n	80a02b8 <TIM_Cmd+0x14>
 80a02b0:	f023 0301 	bic.w	r3, r3, #1
 80a02b4:	041b      	lsls	r3, r3, #16
 80a02b6:	0c1b      	lsrs	r3, r3, #16
 80a02b8:	8003      	strh	r3, [r0, #0]
 80a02ba:	4770      	bx	lr

080a02bc <TIM_GetITStatus>:
 80a02bc:	8a03      	ldrh	r3, [r0, #16]
 80a02be:	8982      	ldrh	r2, [r0, #12]
 80a02c0:	ea11 0003 	ands.w	r0, r1, r3
 80a02c4:	b292      	uxth	r2, r2
 80a02c6:	d003      	beq.n	80a02d0 <TIM_GetITStatus+0x14>
 80a02c8:	4211      	tst	r1, r2
 80a02ca:	bf14      	ite	ne
 80a02cc:	2001      	movne	r0, #1
 80a02ce:	2000      	moveq	r0, #0
 80a02d0:	4770      	bx	lr

080a02d2 <TIM_ClearITPendingBit>:
 80a02d2:	43c9      	mvns	r1, r1
 80a02d4:	b289      	uxth	r1, r1
 80a02d6:	8201      	strh	r1, [r0, #16]
 80a02d8:	4770      	bx	lr

080a02da <_ZN5Print6printfEPKcz>:
    size_t println(double, int = 2);
    size_t println(const Printable&);
    size_t println(void);
    size_t println(const __FlashStringHelper*);

    size_t printf(const char* format, ...) __attribute__ ((format(printf, 2, 3)))
 80a02da:	b40e      	push	{r1, r2, r3}
 80a02dc:	b503      	push	{r0, r1, lr}
 80a02de:	ab03      	add	r3, sp, #12
 80a02e0:	f853 2b04 	ldr.w	r2, [r3], #4
    {
        va_list args;
        va_start(args, format);
        auto r = this->vprintf(false, format, args);
 80a02e4:	2100      	movs	r1, #0
        va_start(args, format);
 80a02e6:	9301      	str	r3, [sp, #4]
        auto r = this->vprintf(false, format, args);
 80a02e8:	f001 f83a 	bl	80a1360 <_ZN5Print7vprintfEbPKcSt9__va_list>
        va_end(args);
        return r;
    }
 80a02ec:	b002      	add	sp, #8
 80a02ee:	f85d eb04 	ldr.w	lr, [sp], #4
 80a02f2:	b003      	add	sp, #12
 80a02f4:	4770      	bx	lr
	...

080a02f8 <setup>:

IRsend irsend;
HC_SR04 rangefinder = HC_SR04(triggerPinHC_SR04, echoPinHC_SR04);
// setup() runs once, when the device is first turned on.
void setup()
{
 80a02f8:	b510      	push	{r4, lr}
  Serial.begin(9600);
  rangefinder.init();
  alarmState = 0;
 80a02fa:	2400      	movs	r4, #0
  Serial.begin(9600);
 80a02fc:	f001 fcce 	bl	80a1c9c <_Z16_fetch_usbserialv>
 80a0300:	f44f 5116 	mov.w	r1, #9600	; 0x2580
 80a0304:	f001 fcb0 	bl	80a1c68 <_ZN9USBSerial5beginEl>
  rangefinder.init();
 80a0308:	480f      	ldr	r0, [pc, #60]	; (80a0348 <setup+0x50>)
 80a030a:	f000 fb03 	bl	80a0914 <_ZN7HC_SR044initEv>
  alarmState = 0;
 80a030e:	4b0f      	ldr	r3, [pc, #60]	; (80a034c <setup+0x54>)
  emailAlreadySent = 0;
  buttonState = 0;
  pinMode(redLedPin, OUTPUT);
 80a0310:	2101      	movs	r1, #1
  alarmState = 0;
 80a0312:	601c      	str	r4, [r3, #0]
  emailAlreadySent = 0;
 80a0314:	4b0e      	ldr	r3, [pc, #56]	; (80a0350 <setup+0x58>)
  pinMode(redLedPin, OUTPUT);
 80a0316:	2004      	movs	r0, #4
  emailAlreadySent = 0;
 80a0318:	601c      	str	r4, [r3, #0]
  buttonState = 0;
 80a031a:	4b0e      	ldr	r3, [pc, #56]	; (80a0354 <setup+0x5c>)
 80a031c:	601c      	str	r4, [r3, #0]
  pinMode(redLedPin, OUTPUT);
 80a031e:	f001 ff53 	bl	80a21c8 <pinMode>
  pinMode(greenLedPin, OUTPUT);
 80a0322:	2101      	movs	r1, #1
 80a0324:	2005      	movs	r0, #5
 80a0326:	f001 ff4f 	bl	80a21c8 <pinMode>
  pinMode(buzzerPin, OUTPUT);
 80a032a:	2101      	movs	r1, #1
 80a032c:	2003      	movs	r0, #3
 80a032e:	f001 ff4b 	bl	80a21c8 <pinMode>
  pinMode(buttonPin, INPUT);
 80a0332:	4621      	mov	r1, r4
 80a0334:	2002      	movs	r0, #2
 80a0336:	f001 ff47 	bl	80a21c8 <pinMode>
  digitalWrite(redLedPin, HIGH); //Set the red led to on by default to show that the alarm is off
  // RGB_color(1, 0, 0); // Sets LED to red, to show that the alarm is off
}
 80a033a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  digitalWrite(redLedPin, HIGH); //Set the red led to on by default to show that the alarm is off
 80a033e:	2101      	movs	r1, #1
 80a0340:	2004      	movs	r0, #4
 80a0342:	f001 bf52 	b.w	80a21ea <digitalWrite>
 80a0346:	bf00      	nop
 80a0348:	20000084 	.word	0x20000084
 80a034c:	20000074 	.word	0x20000074
 80a0350:	2000007c 	.word	0x2000007c
 80a0354:	20000078 	.word	0x20000078

080a0358 <_Z9sendEmail6StringS_S_>:
  }
  irsend.sendNEC(0xF740BF, 32); //Turn OFF the LED Strips
}

int sendEmail(String email, String subject, String body)
{
 80a0358:	b510      	push	{r4, lr}
  String publishData = String::format(
      "{ \"my_email\": \"%s\", \"subject\": \"%s\", \"body\": \"%s\" }", email.c_str(), subject.c_str(), body.c_str());
 80a035a:	6813      	ldr	r3, [r2, #0]
{
 80a035c:	b088      	sub	sp, #32
      "{ \"my_email\": \"%s\", \"subject\": \"%s\", \"body\": \"%s\" }", email.c_str(), subject.c_str(), body.c_str());
 80a035e:	9300      	str	r3, [sp, #0]
 80a0360:	680b      	ldr	r3, [r1, #0]
 80a0362:	6802      	ldr	r2, [r0, #0]
 80a0364:	4912      	ldr	r1, [pc, #72]	; (80a03b0 <_Z9sendEmail6StringS_S_+0x58>)
 80a0366:	a804      	add	r0, sp, #16
 80a0368:	f000 ff72 	bl	80a1250 <_ZN6String6formatEPKcz>
inline particle::Flags<TagT, ValueT>::Flags(Flag<TagT, ValueT> flag) :
        val_(flag.value()) {
}

template<typename TagT, typename ValueT>
inline particle::Flags<TagT, ValueT>::Flags(ValueT val) :
 80a036c:	4b11      	ldr	r3, [pc, #68]	; (80a03b4 <_Z9sendEmail6StringS_S_+0x5c>)
        return publish(eventName, eventData, DEFAULT_CLOUD_EVENT_TTL, flags1, flags2);
    }

    inline particle::Future<bool> publish(const char *eventName, const char *eventData, int ttl, PublishFlags flags1, PublishFlags flags2 = PublishFlags())
    {
        return publish_event(eventName, eventData, ttl, flags1 | flags2);
 80a036e:	9a04      	ldr	r2, [sp, #16]
 80a0370:	781b      	ldrb	r3, [r3, #0]
 80a0372:	4911      	ldr	r1, [pc, #68]	; (80a03b8 <_Z9sendEmail6StringS_S_+0x60>)
 80a0374:	f88d 3000 	strb.w	r3, [sp]
 80a0378:	a802      	add	r0, sp, #8
 80a037a:	233c      	movs	r3, #60	; 0x3c
 80a037c:	f001 fa4a 	bl	80a1814 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE>
      // Does not throw if __r._M_get_use_count() == 0, caller must check.
      explicit __shared_count(const __weak_count<_Lp>& __r, std::nothrow_t);

      ~__shared_count() noexcept
      {
	if (_M_pi != nullptr)
 80a0380:	9c03      	ldr	r4, [sp, #12]
 80a0382:	b17c      	cbz	r4, 80a03a4 <_Z9sendEmail6StringS_S_+0x4c>
      if (--_M_use_count == 0)
 80a0384:	6863      	ldr	r3, [r4, #4]
 80a0386:	3b01      	subs	r3, #1
 80a0388:	6063      	str	r3, [r4, #4]
 80a038a:	b95b      	cbnz	r3, 80a03a4 <_Z9sendEmail6StringS_S_+0x4c>
          _M_dispose();
 80a038c:	6823      	ldr	r3, [r4, #0]
 80a038e:	4620      	mov	r0, r4
 80a0390:	689b      	ldr	r3, [r3, #8]
 80a0392:	4798      	blx	r3
          if (--_M_weak_count == 0)
 80a0394:	68a3      	ldr	r3, [r4, #8]
 80a0396:	3b01      	subs	r3, #1
 80a0398:	60a3      	str	r3, [r4, #8]
 80a039a:	b91b      	cbnz	r3, 80a03a4 <_Z9sendEmail6StringS_S_+0x4c>
            _M_destroy();
 80a039c:	6823      	ldr	r3, [r4, #0]
 80a039e:	4620      	mov	r0, r4
 80a03a0:	68db      	ldr	r3, [r3, #12]
 80a03a2:	4798      	blx	r3
 80a03a4:	a804      	add	r0, sp, #16
 80a03a6:	f000 fe95 	bl	80a10d4 <_ZN6StringD1Ev>
  Particle.publish("mailgunEvent", publishData, PRIVATE);
  return 0;
}
 80a03aa:	2000      	movs	r0, #0
 80a03ac:	b008      	add	sp, #32
 80a03ae:	bd10      	pop	{r4, pc}
 80a03b0:	080a2d60 	.word	0x080a2d60
 80a03b4:	20000070 	.word	0x20000070
 80a03b8:	080a2d94 	.word	0x080a2d94

080a03bc <_Z11sensorInputv>:

float sensorInput()
{
  float cm = rangefinder.distCM();
 80a03bc:	4801      	ldr	r0, [pc, #4]	; (80a03c4 <_Z11sensorInputv+0x8>)
 80a03be:	f000 bb19 	b.w	80a09f4 <_ZN7HC_SR046distCMEv>
 80a03c2:	bf00      	nop
 80a03c4:	20000084 	.word	0x20000084

080a03c8 <_Z9flashLEDsv>:
  //delay(1000);
  return cm;
}

void flashLEDs()
{
 80a03c8:	b510      	push	{r4, lr}
 80a03ca:	2405      	movs	r4, #5
  for (int i = 0; i < 5; i++)
  {
    digitalWrite(redLedPin, HIGH);
 80a03cc:	2101      	movs	r1, #1
 80a03ce:	2004      	movs	r0, #4
 80a03d0:	f001 ff0b 	bl	80a21ea <digitalWrite>
    delay(10);
 80a03d4:	200a      	movs	r0, #10
 80a03d6:	f001 f829 	bl	80a142c <delay>
    digitalWrite(redLedPin, LOW);
 80a03da:	2100      	movs	r1, #0
 80a03dc:	2004      	movs	r0, #4
 80a03de:	f001 ff04 	bl	80a21ea <digitalWrite>
    delay(10);
 80a03e2:	200a      	movs	r0, #10
 80a03e4:	f001 f822 	bl	80a142c <delay>
    digitalWrite(greenLedPin, HIGH);
 80a03e8:	2101      	movs	r1, #1
 80a03ea:	2005      	movs	r0, #5
 80a03ec:	f001 fefd 	bl	80a21ea <digitalWrite>
    delay(10);
 80a03f0:	200a      	movs	r0, #10
 80a03f2:	f001 f81b 	bl	80a142c <delay>
    digitalWrite(greenLedPin, LOW);
 80a03f6:	2100      	movs	r1, #0
 80a03f8:	2005      	movs	r0, #5
 80a03fa:	f001 fef6 	bl	80a21ea <digitalWrite>
    delay(10);
 80a03fe:	200a      	movs	r0, #10
 80a0400:	f001 f814 	bl	80a142c <delay>
  for (int i = 0; i < 5; i++)
 80a0404:	3c01      	subs	r4, #1
 80a0406:	d1e1      	bne.n	80a03cc <_Z9flashLEDsv+0x4>
  }
}
 80a0408:	bd10      	pop	{r4, pc}
	...

080a040c <_Z6sendIRv>:
{
 80a040c:	b570      	push	{r4, r5, r6, lr}
  irsend.sendNEC(0xF7C03F, 32); //Turn ON the LED Strips
 80a040e:	2220      	movs	r2, #32
 80a0410:	4929      	ldr	r1, [pc, #164]	; (80a04b8 <_Z6sendIRv+0xac>)
 80a0412:	482a      	ldr	r0, [pc, #168]	; (80a04bc <_Z6sendIRv+0xb0>)
 80a0414:	f000 fa20 	bl	80a0858 <_ZN6IRsend7sendNECEmi>
  for (int i = 1; i < 11; i++)
 80a0418:	2401      	movs	r4, #1
    irsend.sendNEC(0xF720DF, 32); //Red
 80a041a:	4e29      	ldr	r6, [pc, #164]	; (80a04c0 <_Z6sendIRv+0xb4>)
    Serial.print("Flashing LED Strips: ");
 80a041c:	f001 fc3e 	bl	80a1c9c <_Z16_fetch_usbserialv>
 80a0420:	4928      	ldr	r1, [pc, #160]	; (80a04c4 <_Z6sendIRv+0xb8>)
 80a0422:	f000 ff63 	bl	80a12ec <_ZN5Print5printEPKc>
    Serial.println(i);
 80a0426:	f001 fc39 	bl	80a1c9c <_Z16_fetch_usbserialv>
 80a042a:	4605      	mov	r5, r0
            val = n;
        }
#if __GNUC__ >= 9
#pragma GCC diagnostic pop
#endif // __GNUC__ >= 9
        return printNumber(val, base) + t;
 80a042c:	4621      	mov	r1, r4
 80a042e:	220a      	movs	r2, #10
 80a0430:	f000 ff79 	bl	80a1326 <_ZN5Print11printNumberEmh>
        n += println();
 80a0434:	4628      	mov	r0, r5
 80a0436:	f000 ff60 	bl	80a12fa <_ZN5Print7printlnEv>
    flashLEDs();
 80a043a:	f7ff ffc5 	bl	80a03c8 <_Z9flashLEDsv>
    tone(buzzerPin, 5000, 3000);
 80a043e:	f640 32b8 	movw	r2, #3000	; 0xbb8
 80a0442:	f241 3188 	movw	r1, #5000	; 0x1388
 80a0446:	2003      	movs	r0, #3
 80a0448:	f001 fcce 	bl	80a1de8 <tone>
    irsend.sendNEC(0xF720DF, 32); //Red
 80a044c:	2220      	movs	r2, #32
 80a044e:	4631      	mov	r1, r6
 80a0450:	481a      	ldr	r0, [pc, #104]	; (80a04bc <_Z6sendIRv+0xb0>)
 80a0452:	f000 fa01 	bl	80a0858 <_ZN6IRsend7sendNECEmi>
    delay(300);
 80a0456:	f44f 7096 	mov.w	r0, #300	; 0x12c
 80a045a:	f000 ffe7 	bl	80a142c <delay>
    flashLEDs();
 80a045e:	f7ff ffb3 	bl	80a03c8 <_Z9flashLEDsv>
    tone(buzzerPin, 1000, 1000);
 80a0462:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80a0466:	2003      	movs	r0, #3
 80a0468:	4611      	mov	r1, r2
 80a046a:	f001 fcbd 	bl	80a1de8 <tone>
    irsend.sendNEC(0xF7E01F, 32); //White
 80a046e:	2220      	movs	r2, #32
 80a0470:	4915      	ldr	r1, [pc, #84]	; (80a04c8 <_Z6sendIRv+0xbc>)
 80a0472:	4812      	ldr	r0, [pc, #72]	; (80a04bc <_Z6sendIRv+0xb0>)
 80a0474:	f000 f9f0 	bl	80a0858 <_ZN6IRsend7sendNECEmi>
    delay(200);
 80a0478:	20c8      	movs	r0, #200	; 0xc8
 80a047a:	f000 ffd7 	bl	80a142c <delay>
    flashLEDs();
 80a047e:	f7ff ffa3 	bl	80a03c8 <_Z9flashLEDsv>
    tone(buzzerPin, 5000, 3000);
 80a0482:	f640 32b8 	movw	r2, #3000	; 0xbb8
 80a0486:	f241 3188 	movw	r1, #5000	; 0x1388
 80a048a:	2003      	movs	r0, #3
 80a048c:	f001 fcac 	bl	80a1de8 <tone>
    irsend.sendNEC(0xF7609F, 32); //Blue
 80a0490:	2220      	movs	r2, #32
 80a0492:	490e      	ldr	r1, [pc, #56]	; (80a04cc <_Z6sendIRv+0xc0>)
 80a0494:	4809      	ldr	r0, [pc, #36]	; (80a04bc <_Z6sendIRv+0xb0>)
 80a0496:	f000 f9df 	bl	80a0858 <_ZN6IRsend7sendNECEmi>
  for (int i = 1; i < 11; i++)
 80a049a:	3401      	adds	r4, #1
    delay(300);
 80a049c:	f44f 7096 	mov.w	r0, #300	; 0x12c
 80a04a0:	f000 ffc4 	bl	80a142c <delay>
  for (int i = 1; i < 11; i++)
 80a04a4:	2c0b      	cmp	r4, #11
 80a04a6:	d1b9      	bne.n	80a041c <_Z6sendIRv+0x10>
}
 80a04a8:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
  irsend.sendNEC(0xF740BF, 32); //Turn OFF the LED Strips
 80a04ac:	2220      	movs	r2, #32
 80a04ae:	4908      	ldr	r1, [pc, #32]	; (80a04d0 <_Z6sendIRv+0xc4>)
 80a04b0:	4802      	ldr	r0, [pc, #8]	; (80a04bc <_Z6sendIRv+0xb0>)
 80a04b2:	f000 b9d1 	b.w	80a0858 <_ZN6IRsend7sendNECEmi>
 80a04b6:	bf00      	nop
 80a04b8:	00f7c03f 	.word	0x00f7c03f
 80a04bc:	20000080 	.word	0x20000080
 80a04c0:	00f720df 	.word	0x00f720df
 80a04c4:	080a2da1 	.word	0x080a2da1
 80a04c8:	00f7e01f 	.word	0x00f7e01f
 80a04cc:	00f7609f 	.word	0x00f7609f
 80a04d0:	00f740bf 	.word	0x00f740bf

080a04d4 <loop>:
{
 80a04d4:	b570      	push	{r4, r5, r6, lr}
 80a04d6:	b090      	sub	sp, #64	; 0x40
  float senrorInputTo = sensorInput();
 80a04d8:	f7ff ff70 	bl	80a03bc <_Z11sensorInputv>
 80a04dc:	4606      	mov	r6, r0
  Serial.printf("Distance in centimeters: %.1f\n", senrorInputTo);
 80a04de:	f001 fbdd 	bl	80a1c9c <_Z16_fetch_usbserialv>
 80a04e2:	4604      	mov	r4, r0
 80a04e4:	4630      	mov	r0, r6
 80a04e6:	f002 f891 	bl	80a260c <__aeabi_f2d>
 80a04ea:	4602      	mov	r2, r0
 80a04ec:	460b      	mov	r3, r1
 80a04ee:	4620      	mov	r0, r4
 80a04f0:	4962      	ldr	r1, [pc, #392]	; (80a067c <loop+0x1a8>)
 80a04f2:	f7ff fef2 	bl	80a02da <_ZN5Print6printfEPKcz>
  if (senrorInputTo <= distanceToTrigger && senrorInputTo >= 0)
 80a04f6:	4630      	mov	r0, r6
 80a04f8:	4961      	ldr	r1, [pc, #388]	; (80a0680 <loop+0x1ac>)
 80a04fa:	f002 fb95 	bl	80a2c28 <__aeabi_fcmple>
 80a04fe:	4d61      	ldr	r5, [pc, #388]	; (80a0684 <loop+0x1b0>)
 80a0500:	4c61      	ldr	r4, [pc, #388]	; (80a0688 <loop+0x1b4>)
 80a0502:	b370      	cbz	r0, 80a0562 <loop+0x8e>
 80a0504:	2100      	movs	r1, #0
 80a0506:	4630      	mov	r0, r6
 80a0508:	f002 fb98 	bl	80a2c3c <__aeabi_fcmpge>
 80a050c:	b348      	cbz	r0, 80a0562 <loop+0x8e>
    if (alarmState == 1) //Check if the alarm is on
 80a050e:	682e      	ldr	r6, [r5, #0]
 80a0510:	2e01      	cmp	r6, #1
 80a0512:	f040 808e 	bne.w	80a0632 <loop+0x15e>
      sendIR();
 80a0516:	f7ff ff79 	bl	80a040c <_Z6sendIRv>
      if (emailAlreadySent == 0){
 80a051a:	6823      	ldr	r3, [r4, #0]
 80a051c:	bb0b      	cbnz	r3, 80a0562 <loop+0x8e>
      String emailMsg = String("Someone has opened your door! Alarm has been sounded.");
 80a051e:	495b      	ldr	r1, [pc, #364]	; (80a068c <loop+0x1b8>)
 80a0520:	4668      	mov	r0, sp
 80a0522:	f000 fe21 	bl	80a1168 <_ZN6StringC1EPKc>
      sendEmail("posium420@gmail.com", "Alarm has been triggered!", String(emailMsg)); //Please dont spam my email Mr.Sensor or Mrs. Sensor 
 80a0526:	495a      	ldr	r1, [pc, #360]	; (80a0690 <loop+0x1bc>)
 80a0528:	a808      	add	r0, sp, #32
 80a052a:	f000 fe1d 	bl	80a1168 <_ZN6StringC1EPKc>
 80a052e:	4959      	ldr	r1, [pc, #356]	; (80a0694 <loop+0x1c0>)
 80a0530:	a80c      	add	r0, sp, #48	; 0x30
 80a0532:	f000 fe19 	bl	80a1168 <_ZN6StringC1EPKc>
 80a0536:	4669      	mov	r1, sp
 80a0538:	a804      	add	r0, sp, #16
 80a053a:	f000 fe37 	bl	80a11ac <_ZN6StringC1ERKS_>
 80a053e:	aa04      	add	r2, sp, #16
 80a0540:	a90c      	add	r1, sp, #48	; 0x30
 80a0542:	a808      	add	r0, sp, #32
 80a0544:	f7ff ff08 	bl	80a0358 <_Z9sendEmail6StringS_S_>
 80a0548:	a804      	add	r0, sp, #16
 80a054a:	f000 fdc3 	bl	80a10d4 <_ZN6StringD1Ev>
 80a054e:	a80c      	add	r0, sp, #48	; 0x30
 80a0550:	f000 fdc0 	bl	80a10d4 <_ZN6StringD1Ev>
 80a0554:	a808      	add	r0, sp, #32
 80a0556:	f000 fdbd 	bl	80a10d4 <_ZN6StringD1Ev>
      String emailMsg = String("Someone has opened your door! Alarm has been sounded.");
 80a055a:	4668      	mov	r0, sp
      emailAlreadySent = 1;
 80a055c:	6026      	str	r6, [r4, #0]
      String emailMsg = String("Someone has opened your door! Alarm has been sounded.");
 80a055e:	f000 fdb9 	bl	80a10d4 <_ZN6StringD1Ev>
  buttonState = digitalRead(buttonPin);
 80a0562:	2002      	movs	r0, #2
 80a0564:	f001 fe5a 	bl	80a221c <digitalRead>
 80a0568:	4b4b      	ldr	r3, [pc, #300]	; (80a0698 <loop+0x1c4>)
  if (buttonState == 1) // && senrorInputToInt < 60
 80a056a:	2801      	cmp	r0, #1
  buttonState = digitalRead(buttonPin);
 80a056c:	4606      	mov	r6, r0
 80a056e:	6018      	str	r0, [r3, #0]
  if (buttonState == 1) // && senrorInputToInt < 60
 80a0570:	d17f      	bne.n	80a0672 <loop+0x19e>
    Serial.println("Button pressed");
 80a0572:	f001 fb93 	bl	80a1c9c <_Z16_fetch_usbserialv>
 80a0576:	4949      	ldr	r1, [pc, #292]	; (80a069c <loop+0x1c8>)
 80a0578:	f000 fecb 	bl	80a1312 <_ZN5Print7printlnEPKc>
    if (alarmState == 0)
 80a057c:	682b      	ldr	r3, [r5, #0]
 80a057e:	2b00      	cmp	r3, #0
 80a0580:	d168      	bne.n	80a0654 <loop+0x180>
      alarmState = 1; //alarm activated
 80a0582:	602e      	str	r6, [r5, #0]
      emailAlreadySent = 0;
 80a0584:	6023      	str	r3, [r4, #0]
    digitalWrite(redLedPin, LOW);
 80a0586:	2100      	movs	r1, #0
 80a0588:	2004      	movs	r0, #4
 80a058a:	f001 fe2e 	bl	80a21ea <digitalWrite>
    digitalWrite(greenLedPin, HIGH);
 80a058e:	2101      	movs	r1, #1
 80a0590:	2005      	movs	r0, #5
 80a0592:	f001 fe2a 	bl	80a21ea <digitalWrite>
    Serial.println("Alarm is on");
 80a0596:	f001 fb81 	bl	80a1c9c <_Z16_fetch_usbserialv>
 80a059a:	4941      	ldr	r1, [pc, #260]	; (80a06a0 <loop+0x1cc>)
    Serial.println("Alarm is off");
 80a059c:	f000 feb9 	bl	80a1312 <_ZN5Print7printlnEPKc>
 if (emailCounter){
 80a05a0:	4b40      	ldr	r3, [pc, #256]	; (80a06a4 <loop+0x1d0>)
 80a05a2:	681a      	ldr	r2, [r3, #0]
 80a05a4:	b13a      	cbz	r2, 80a05b6 <loop+0xe2>
   emailCounter ++;
 80a05a6:	3201      	adds	r2, #1
  if (emailCounter == 150){
 80a05a8:	2a96      	cmp	r2, #150	; 0x96
   emailCounter ++;
 80a05aa:	601a      	str	r2, [r3, #0]
    emailAlreadySent = 0;
 80a05ac:	bf01      	itttt	eq
 80a05ae:	2200      	moveq	r2, #0
 80a05b0:	6022      	streq	r2, [r4, #0]
    emailCounter = 1;
 80a05b2:	2201      	moveq	r2, #1
 80a05b4:	601a      	streq	r2, [r3, #0]
  String strEmailCounter = (String) emailCounter;
 80a05b6:	6819      	ldr	r1, [r3, #0]
 80a05b8:	220a      	movs	r2, #10
 80a05ba:	a804      	add	r0, sp, #16
 80a05bc:	f000 fe12 	bl	80a11e4 <_ZN6StringC1Eih>
  String strEmailAlreadySent = (String) emailAlreadySent;
 80a05c0:	220a      	movs	r2, #10
 80a05c2:	6821      	ldr	r1, [r4, #0]
 80a05c4:	a808      	add	r0, sp, #32
 80a05c6:	f000 fe0d 	bl	80a11e4 <_ZN6StringC1Eih>
  Serial.println("Email Counter: " + strEmailCounter);
 80a05ca:	f001 fb67 	bl	80a1c9c <_Z16_fetch_usbserialv>

class StringSumHelper : public String
{
public:
	StringSumHelper(const String &s) : String(s) {}
	StringSumHelper(const char *p) : String(p) {}
 80a05ce:	4936      	ldr	r1, [pc, #216]	; (80a06a8 <loop+0x1d4>)
 80a05d0:	4604      	mov	r4, r0
 80a05d2:	a80c      	add	r0, sp, #48	; 0x30
 80a05d4:	f000 fdc8 	bl	80a1168 <_ZN6StringC1EPKc>
 80a05d8:	a904      	add	r1, sp, #16
 80a05da:	a80c      	add	r0, sp, #48	; 0x30
 80a05dc:	f000 fe2c 	bl	80a1238 <_ZplRK15StringSumHelperRK6String>
 80a05e0:	6801      	ldr	r1, [r0, #0]
 80a05e2:	4620      	mov	r0, r4
 80a05e4:	f000 fe95 	bl	80a1312 <_ZN5Print7printlnEPKc>
class StringSumHelper : public String
 80a05e8:	a80c      	add	r0, sp, #48	; 0x30
 80a05ea:	f000 fd73 	bl	80a10d4 <_ZN6StringD1Ev>
  Serial.println("Email state: " + strEmailAlreadySent);
 80a05ee:	f001 fb55 	bl	80a1c9c <_Z16_fetch_usbserialv>
	StringSumHelper(const char *p) : String(p) {}
 80a05f2:	492e      	ldr	r1, [pc, #184]	; (80a06ac <loop+0x1d8>)
 80a05f4:	4604      	mov	r4, r0
 80a05f6:	a80c      	add	r0, sp, #48	; 0x30
 80a05f8:	f000 fdb6 	bl	80a1168 <_ZN6StringC1EPKc>
 80a05fc:	a908      	add	r1, sp, #32
 80a05fe:	a80c      	add	r0, sp, #48	; 0x30
 80a0600:	f000 fe1a 	bl	80a1238 <_ZplRK15StringSumHelperRK6String>
 80a0604:	6801      	ldr	r1, [r0, #0]
 80a0606:	4620      	mov	r0, r4
 80a0608:	f000 fe83 	bl	80a1312 <_ZN5Print7printlnEPKc>
class StringSumHelper : public String
 80a060c:	a80c      	add	r0, sp, #48	; 0x30
 80a060e:	f000 fd61 	bl	80a10d4 <_ZN6StringD1Ev>
    Serial.println("---------------------------------");
 80a0612:	f001 fb43 	bl	80a1c9c <_Z16_fetch_usbserialv>
 80a0616:	4926      	ldr	r1, [pc, #152]	; (80a06b0 <loop+0x1dc>)
 80a0618:	f000 fe7b 	bl	80a1312 <_ZN5Print7printlnEPKc>
  delay(loopDelay);
 80a061c:	20c8      	movs	r0, #200	; 0xc8
 80a061e:	f000 ff05 	bl	80a142c <delay>
  String strEmailAlreadySent = (String) emailAlreadySent;
 80a0622:	a808      	add	r0, sp, #32
 80a0624:	f000 fd56 	bl	80a10d4 <_ZN6StringD1Ev>
  String strEmailCounter = (String) emailCounter;
 80a0628:	a804      	add	r0, sp, #16
 80a062a:	f000 fd53 	bl	80a10d4 <_ZN6StringD1Ev>
}
 80a062e:	b010      	add	sp, #64	; 0x40
 80a0630:	bd70      	pop	{r4, r5, r6, pc}
      Serial.println("Somebody passed the door, but alarm is off");
 80a0632:	f001 fb33 	bl	80a1c9c <_Z16_fetch_usbserialv>
 80a0636:	491f      	ldr	r1, [pc, #124]	; (80a06b4 <loop+0x1e0>)
 80a0638:	f000 fe6b 	bl	80a1312 <_ZN5Print7printlnEPKc>
      digitalWrite(redLedPin, LOW);
 80a063c:	2100      	movs	r1, #0
 80a063e:	2004      	movs	r0, #4
 80a0640:	f001 fdd3 	bl	80a21ea <digitalWrite>
      delay(100);
 80a0644:	2064      	movs	r0, #100	; 0x64
 80a0646:	f000 fef1 	bl	80a142c <delay>
      digitalWrite(redLedPin, HIGH);
 80a064a:	2101      	movs	r1, #1
 80a064c:	2004      	movs	r0, #4
 80a064e:	f001 fdcc 	bl	80a21ea <digitalWrite>
 80a0652:	e786      	b.n	80a0562 <loop+0x8e>
      emailAlreadySent = 0;
 80a0654:	2300      	movs	r3, #0
 80a0656:	6023      	str	r3, [r4, #0]
      alarmState = 0;
 80a0658:	602b      	str	r3, [r5, #0]
    digitalWrite(greenLedPin, LOW);
 80a065a:	2100      	movs	r1, #0
 80a065c:	2005      	movs	r0, #5
 80a065e:	f001 fdc4 	bl	80a21ea <digitalWrite>
    digitalWrite(redLedPin, HIGH);
 80a0662:	2101      	movs	r1, #1
 80a0664:	2004      	movs	r0, #4
 80a0666:	f001 fdc0 	bl	80a21ea <digitalWrite>
    Serial.println("Alarm is off");
 80a066a:	f001 fb17 	bl	80a1c9c <_Z16_fetch_usbserialv>
 80a066e:	4912      	ldr	r1, [pc, #72]	; (80a06b8 <loop+0x1e4>)
 80a0670:	e794      	b.n	80a059c <loop+0xc8>
  if (alarmState == 1)
 80a0672:	682b      	ldr	r3, [r5, #0]
 80a0674:	2b01      	cmp	r3, #1
 80a0676:	d1f0      	bne.n	80a065a <loop+0x186>
 80a0678:	e785      	b.n	80a0586 <loop+0xb2>
 80a067a:	bf00      	nop
 80a067c:	080a2db7 	.word	0x080a2db7
 80a0680:	41a00000 	.word	0x41a00000
 80a0684:	20000074 	.word	0x20000074
 80a0688:	2000007c 	.word	0x2000007c
 80a068c:	080a2dd6 	.word	0x080a2dd6
 80a0690:	080a2e0c 	.word	0x080a2e0c
 80a0694:	080a2e20 	.word	0x080a2e20
 80a0698:	20000078 	.word	0x20000078
 80a069c:	080a2e65 	.word	0x080a2e65
 80a06a0:	080a2e74 	.word	0x080a2e74
 80a06a4:	20000000 	.word	0x20000000
 80a06a8:	080a2e8d 	.word	0x080a2e8d
 80a06ac:	080a2e9d 	.word	0x080a2e9d
 80a06b0:	080a2eab 	.word	0x080a2eab
 80a06b4:	080a2e3a 	.word	0x080a2e3a
 80a06b8:	080a2e80 	.word	0x080a2e80

080a06bc <_GLOBAL__sub_I_buttonState>:
        val_(val) {
 80a06bc:	2201      	movs	r2, #1
 80a06be:	4b03      	ldr	r3, [pc, #12]	; (80a06cc <_GLOBAL__sub_I_buttonState+0x10>)
HC_SR04 rangefinder = HC_SR04(triggerPinHC_SR04, echoPinHC_SR04);
 80a06c0:	210a      	movs	r1, #10
 80a06c2:	701a      	strb	r2, [r3, #0]
 80a06c4:	4802      	ldr	r0, [pc, #8]	; (80a06d0 <_GLOBAL__sub_I_buttonState+0x14>)
 80a06c6:	2200      	movs	r2, #0
 80a06c8:	f000 b91c 	b.w	80a0904 <_ZN7HC_SR04C1Eii>
 80a06cc:	20000070 	.word	0x20000070
 80a06d0:	20000084 	.word	0x20000084

080a06d4 <_ZNSt17_Function_handlerIFvvEPS0_E9_M_invokeERKSt9_Any_data>:

     public:
      static void
      _M_invoke(const _Any_data& __functor, _ArgTypes&&... __args)
      {
	(*_Base::_M_get_pointer(__functor))(
 80a06d4:	6803      	ldr	r3, [r0, #0]
 80a06d6:	4718      	bx	r3

080a06d8 <_ZNSt14_Function_base13_Base_managerIPFvvEE10_M_managerERSt9_Any_dataRKS4_St18_Manager_operation>:
	  switch (__op)
 80a06d8:	2a01      	cmp	r2, #1
 80a06da:	d003      	beq.n	80a06e4 <_ZNSt14_Function_base13_Base_managerIPFvvEE10_M_managerERSt9_Any_dataRKS4_St18_Manager_operation+0xc>
 80a06dc:	2a02      	cmp	r2, #2
 80a06de:	d003      	beq.n	80a06e8 <_ZNSt14_Function_base13_Base_managerIPFvvEE10_M_managerERSt9_Any_dataRKS4_St18_Manager_operation+0x10>
	}
 80a06e0:	2000      	movs	r0, #0
 80a06e2:	4770      	bx	lr
	      __dest._M_access<_Functor*>() = _M_get_pointer(__source);
 80a06e4:	6001      	str	r1, [r0, #0]
	      break;
 80a06e6:	e7fb      	b.n	80a06e0 <_ZNSt14_Function_base13_Base_managerIPFvvEE10_M_managerERSt9_Any_dataRKS4_St18_Manager_operation+0x8>
	  ::new (__dest._M_access()) _Functor(__source._M_access<_Functor>());
 80a06e8:	680b      	ldr	r3, [r1, #0]
 80a06ea:	6003      	str	r3, [r0, #0]
	}
 80a06ec:	e7f8      	b.n	80a06e0 <_ZNSt14_Function_base13_Base_managerIPFvvEE10_M_managerERSt9_Any_dataRKS4_St18_Manager_operation+0x8>

080a06ee <_ZN13IntervalTimerD1Ev>:
	}
#endif

    }

    ~IntervalTimer() { end(); }
 80a06ee:	b510      	push	{r4, lr}
 80a06f0:	4604      	mov	r4, r0
 80a06f2:	f000 fa33 	bl	80a0b5c <_ZN13IntervalTimer3endEv>
 80a06f6:	4620      	mov	r0, r4
 80a06f8:	bd10      	pop	{r4, pc}
	...

080a06fc <_ZN6IRsend4markEi.constprop.0>:
    space(0);
}
void IRsend::mark(int time) {
  // Sends an IR mark for the specified number of microseconds.
  // The mark output is modulated at the PWM frequency.
  TIMER_ENABLE_PWM; // Enable pin 3 PWM output
 80a06fc:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
void IRsend::mark(int time) {
 80a0700:	b510      	push	{r4, lr}
 80a0702:	4604      	mov	r4, r0
  TIMER_ENABLE_PWM; // Enable pin 3 PWM output
 80a0704:	4b07      	ldr	r3, [pc, #28]	; (80a0724 <_ZN6IRsend4markEi.constprop.0+0x28>)
 80a0706:	2180      	movs	r1, #128	; 0x80
 80a0708:	681b      	ldr	r3, [r3, #0]
 80a070a:	200f      	movs	r0, #15
 80a070c:	435a      	muls	r2, r3
 80a070e:	f001 fd98 	bl	80a2242 <_Z11analogWritetmm>
  if (time > 0) delayMicroseconds(time);
 80a0712:	2c00      	cmp	r4, #0
 80a0714:	dd04      	ble.n	80a0720 <_ZN6IRsend4markEi.constprop.0+0x24>
#endif

inline system_tick_t millis(void) { return HAL_Timer_Get_Milli_Seconds(); }
inline unsigned long micros(void) { return HAL_Timer_Get_Micro_Seconds(); }
void delay(unsigned long ms);
inline void delayMicroseconds(unsigned int us) { HAL_Delay_Microseconds(us); }
 80a0716:	4620      	mov	r0, r4
}
 80a0718:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80a071c:	f000 ba70 	b.w	80a0c00 <HAL_Delay_Microseconds>
 80a0720:	bd10      	pop	{r4, pc}
 80a0722:	bf00      	nop
 80a0724:	20000090 	.word	0x20000090

080a0728 <_ZN6IRsend5spaceEi.constprop.0>:

/* Leave pin off for time (given in microseconds) */
void IRsend::space(int time) {
  // Sends an IR space for the specified number of microseconds.
  // A space is no output, so the PWM output is disabled.
  TIMER_DISABLE_PWM; // Disable pin 3 PWM output
 80a0728:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
void IRsend::space(int time) {
 80a072c:	b510      	push	{r4, lr}
 80a072e:	4604      	mov	r4, r0
  TIMER_DISABLE_PWM; // Disable pin 3 PWM output
 80a0730:	4b07      	ldr	r3, [pc, #28]	; (80a0750 <_ZN6IRsend5spaceEi.constprop.0+0x28>)
 80a0732:	2100      	movs	r1, #0
 80a0734:	681b      	ldr	r3, [r3, #0]
 80a0736:	200f      	movs	r0, #15
 80a0738:	435a      	muls	r2, r3
 80a073a:	f001 fd82 	bl	80a2242 <_Z11analogWritetmm>
  if (time > 0) delayMicroseconds(time);
 80a073e:	2c00      	cmp	r4, #0
 80a0740:	dd04      	ble.n	80a074c <_ZN6IRsend5spaceEi.constprop.0+0x24>
 80a0742:	4620      	mov	r0, r4
}
 80a0744:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80a0748:	f000 ba5a 	b.w	80a0c00 <HAL_Delay_Microseconds>
 80a074c:	bd10      	pop	{r4, pc}
 80a074e:	bf00      	nop
 80a0750:	20000090 	.word	0x20000090

080a0754 <_ZNSt14_Function_baseD1Ev>:
    ~_Function_base()
 80a0754:	b510      	push	{r4, lr}
      if (_M_manager)
 80a0756:	6883      	ldr	r3, [r0, #8]
    ~_Function_base()
 80a0758:	4604      	mov	r4, r0
      if (_M_manager)
 80a075a:	b113      	cbz	r3, 80a0762 <_ZNSt14_Function_baseD1Ev+0xe>
	_M_manager(_M_functor, _M_functor, __destroy_functor);
 80a075c:	2203      	movs	r2, #3
 80a075e:	4601      	mov	r1, r0
 80a0760:	4798      	blx	r3
    }
 80a0762:	4620      	mov	r0, r4
 80a0764:	bd10      	pop	{r4, pc}
	...

080a0768 <_ZN13IntervalTimerC1Ev>:
    IntervalTimer() {
 80a0768:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
 80a076a:	233b      	movs	r3, #59	; 0x3b
 80a076c:	8043      	strh	r3, [r0, #2]
 80a076e:	4b24      	ldr	r3, [pc, #144]	; (80a0800 <_ZN13IntervalTimerC1Ev+0x98>)
		SIT_used[i] = false;
 80a0770:	4a24      	ldr	r2, [pc, #144]	; (80a0804 <_ZN13IntervalTimerC1Ev+0x9c>)
    IntervalTimer() {
 80a0772:	6043      	str	r3, [r0, #4]
	status = TIMER_OFF;
 80a0774:	2300      	movs	r3, #0
		SIT_used[i] = false;
 80a0776:	7013      	strb	r3, [r2, #0]
 80a0778:	7053      	strb	r3, [r2, #1]
 80a077a:	7093      	strb	r3, [r2, #2]
 80a077c:	70d3      	strb	r3, [r2, #3]
 80a077e:	7113      	strb	r3, [r2, #4]
	status = TIMER_OFF;
 80a0780:	7203      	strb	r3, [r0, #8]
		sysIntSetupDone = true;
 80a0782:	2301      	movs	r3, #1
    IntervalTimer() {
 80a0784:	4604      	mov	r4, r0
	typedef _Function_handler<_Res(_ArgTypes...), _Functor> _My_handler;

	if (_My_handler::_M_not_empty_function(__f))
	  {
	    _My_handler::_M_init_functor(_M_functor, std::move(__f));
	    _M_invoker = &_My_handler::_M_invoke;
 80a0786:	4e20      	ldr	r6, [pc, #128]	; (80a0808 <_ZN13IntervalTimerC1Ev+0xa0>)
	    _M_manager = &_My_handler::_M_manager;
 80a0788:	4d20      	ldr	r5, [pc, #128]	; (80a080c <_ZN13IntervalTimerC1Ev+0xa4>)
		sysIntSetupDone = true;
 80a078a:	7003      	strb	r3, [r0, #0]
	{ ::new (__functor._M_access()) _Functor(std::move(__f)); }
 80a078c:	4b20      	ldr	r3, [pc, #128]	; (80a0810 <_ZN13IntervalTimerC1Ev+0xa8>)
		if (!attachSystemInterrupt(SysInterrupt_TIM3_Update, Wiring_TIM3_Interrupt_Handler_override)) ;	//error
 80a078e:	4669      	mov	r1, sp
 80a0790:	2013      	movs	r0, #19
 80a0792:	9300      	str	r3, [sp, #0]
	    _M_invoker = &_My_handler::_M_invoke;
 80a0794:	9603      	str	r6, [sp, #12]
	    _M_manager = &_My_handler::_M_manager;
 80a0796:	9502      	str	r5, [sp, #8]
 80a0798:	f001 fafe 	bl	80a1d98 <_Z21attachSystemInterrupt9hal_irq_tSt8functionIFvvEE>
    class function<_Res(_ArgTypes...)>
 80a079c:	4668      	mov	r0, sp
 80a079e:	f7ff ffd9 	bl	80a0754 <_ZNSt14_Function_baseD1Ev>
	{ ::new (__functor._M_access()) _Functor(std::move(__f)); }
 80a07a2:	4b1c      	ldr	r3, [pc, #112]	; (80a0814 <_ZN13IntervalTimerC1Ev+0xac>)
		if (!attachSystemInterrupt(SysInterrupt_TIM4_Update, Wiring_TIM4_Interrupt_Handler_override)) ;	//error
 80a07a4:	4669      	mov	r1, sp
 80a07a6:	201a      	movs	r0, #26
 80a07a8:	9300      	str	r3, [sp, #0]
	    _M_manager = &_My_handler::_M_manager;
 80a07aa:	e9cd 5602 	strd	r5, r6, [sp, #8]
 80a07ae:	f001 faf3 	bl	80a1d98 <_Z21attachSystemInterrupt9hal_irq_tSt8functionIFvvEE>
    class function<_Res(_ArgTypes...)>
 80a07b2:	4668      	mov	r0, sp
 80a07b4:	f7ff ffce 	bl	80a0754 <_ZNSt14_Function_baseD1Ev>
	{ ::new (__functor._M_access()) _Functor(std::move(__f)); }
 80a07b8:	4b17      	ldr	r3, [pc, #92]	; (80a0818 <_ZN13IntervalTimerC1Ev+0xb0>)
		if (!attachSystemInterrupt(SysInterrupt_TIM5_Update, Wiring_TIM5_Interrupt_Handler_override)) ;	//error
 80a07ba:	4669      	mov	r1, sp
 80a07bc:	2021      	movs	r0, #33	; 0x21
 80a07be:	9300      	str	r3, [sp, #0]
	    _M_manager = &_My_handler::_M_manager;
 80a07c0:	e9cd 5602 	strd	r5, r6, [sp, #8]
 80a07c4:	f001 fae8 	bl	80a1d98 <_Z21attachSystemInterrupt9hal_irq_tSt8functionIFvvEE>
    class function<_Res(_ArgTypes...)>
 80a07c8:	4668      	mov	r0, sp
 80a07ca:	f7ff ffc3 	bl	80a0754 <_ZNSt14_Function_baseD1Ev>
	{ ::new (__functor._M_access()) _Functor(std::move(__f)); }
 80a07ce:	4b13      	ldr	r3, [pc, #76]	; (80a081c <_ZN13IntervalTimerC1Ev+0xb4>)
		if (!attachSystemInterrupt(SysInterrupt_TIM6_Update, Wiring_TIM6_Interrupt_Handler_override));	//error
 80a07d0:	4669      	mov	r1, sp
 80a07d2:	2024      	movs	r0, #36	; 0x24
 80a07d4:	9300      	str	r3, [sp, #0]
	    _M_manager = &_My_handler::_M_manager;
 80a07d6:	e9cd 5602 	strd	r5, r6, [sp, #8]
 80a07da:	f001 fadd 	bl	80a1d98 <_Z21attachSystemInterrupt9hal_irq_tSt8functionIFvvEE>
    class function<_Res(_ArgTypes...)>
 80a07de:	4668      	mov	r0, sp
 80a07e0:	f7ff ffb8 	bl	80a0754 <_ZNSt14_Function_baseD1Ev>
	{ ::new (__functor._M_access()) _Functor(std::move(__f)); }
 80a07e4:	4b0e      	ldr	r3, [pc, #56]	; (80a0820 <_ZN13IntervalTimerC1Ev+0xb8>)
		if (!attachSystemInterrupt(SysInterrupt_TIM7_Update, Wiring_TIM7_Interrupt_Handler_override));	//error
 80a07e6:	4669      	mov	r1, sp
 80a07e8:	2026      	movs	r0, #38	; 0x26
 80a07ea:	9300      	str	r3, [sp, #0]
	    _M_manager = &_My_handler::_M_manager;
 80a07ec:	e9cd 5602 	strd	r5, r6, [sp, #8]
 80a07f0:	f001 fad2 	bl	80a1d98 <_Z21attachSystemInterrupt9hal_irq_tSt8functionIFvvEE>
    class function<_Res(_ArgTypes...)>
 80a07f4:	4668      	mov	r0, sp
 80a07f6:	f7ff ffad 	bl	80a0754 <_ZNSt14_Function_baseD1Ev>
    }
 80a07fa:	4620      	mov	r0, r4
 80a07fc:	b004      	add	sp, #16
 80a07fe:	bd70      	pop	{r4, r5, r6, pc}
 80a0800:	ffff752f 	.word	0xffff752f
 80a0804:	200000c0 	.word	0x200000c0
 80a0808:	080a06d5 	.word	0x080a06d5
 80a080c:	080a06d9 	.word	0x080a06d9
 80a0810:	080a0a15 	.word	0x080a0a15
 80a0814:	080a0a3d 	.word	0x080a0a3d
 80a0818:	080a0a65 	.word	0x080a0a65
 80a081c:	080a0a8d 	.word	0x080a0a8d
 80a0820:	080a0ab5 	.word	0x080a0ab5

080a0824 <_ZN6IRsend11enableIROutEi>:

void IRsend::enableIROut(int khz) {
 80a0824:	b510      	push	{r4, lr}
 80a0826:	460c      	mov	r4, r1
  // See my Secrets of Arduino PWM at http://arcfn.com/2009/07/secrets-of-arduino-pwm.html for details.


  // Disable the Timer2 Interrupt (which is used for receiving IR)
  #if defined(PARTICLE)
    timer.end();
 80a0828:	4809      	ldr	r0, [pc, #36]	; (80a0850 <_ZN6IRsend11enableIROutEi+0x2c>)
 80a082a:	f000 f997 	bl	80a0b5c <_ZN13IntervalTimer3endEv>
    irout_khz = khz;
 80a082e:	4b09      	ldr	r3, [pc, #36]	; (80a0854 <_ZN6IRsend11enableIROutEi+0x30>)
  #else
    TIMER_DISABLE_INTR; //Timer2 Overflow Interrupt
  #endif


  pinMode(TIMER_PWM_PIN, OUTPUT);
 80a0830:	2101      	movs	r1, #1
 80a0832:	200f      	movs	r0, #15
    irout_khz = khz;
 80a0834:	601c      	str	r4, [r3, #0]
  pinMode(TIMER_PWM_PIN, OUTPUT);
 80a0836:	f001 fcc7 	bl	80a21c8 <pinMode>
  digitalWrite(TIMER_PWM_PIN, LOW); // When not sending PWM, we want it low
 80a083a:	2100      	movs	r1, #0
 80a083c:	200f      	movs	r0, #15
 80a083e:	f001 fcd4 	bl	80a21ea <digitalWrite>
  // COM2B = 00: disconnect OC2B; to send signal set to 10: OC2B non-inverted
  // WGM2 = 101: phase-correct PWM with OCRA as top
  // CS2 = 000: no prescaling
  // The top value for the timer.  The modulation frequency will be SYSCLOCK / 2 / OCR2A.
  TIMER_CONFIG_KHZ(khz);
}
 80a0842:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  TIMER_CONFIG_KHZ(khz);
 80a0846:	2101      	movs	r1, #1
 80a0848:	200f      	movs	r0, #15
 80a084a:	f001 bcbd 	b.w	80a21c8 <pinMode>
 80a084e:	bf00      	nop
 80a0850:	20000094 	.word	0x20000094
 80a0854:	20000090 	.word	0x20000090

080a0858 <_ZN6IRsend7sendNECEmi>:
{
 80a0858:	b570      	push	{r4, r5, r6, lr}
 80a085a:	460c      	mov	r4, r1
  enableIROut(38);
 80a085c:	2126      	movs	r1, #38	; 0x26
{
 80a085e:	4616      	mov	r6, r2
  enableIROut(38);
 80a0860:	f7ff ffe0 	bl	80a0824 <_ZN6IRsend11enableIROutEi>
  mark(NEC_HDR_MARK);
 80a0864:	f242 3028 	movw	r0, #9000	; 0x2328
 80a0868:	f7ff ff48 	bl	80a06fc <_ZN6IRsend4markEi.constprop.0>
  space(NEC_HDR_SPACE);
 80a086c:	f241 1094 	movw	r0, #4500	; 0x1194
 80a0870:	f7ff ff5a 	bl	80a0728 <_ZN6IRsend5spaceEi.constprop.0>
  for (int i = 0; i < nbits; i++) {
 80a0874:	2500      	movs	r5, #0
 80a0876:	42b5      	cmp	r5, r6
  mark(NEC_BIT_MARK);
 80a0878:	f44f 700c 	mov.w	r0, #560	; 0x230
  for (int i = 0; i < nbits; i++) {
 80a087c:	da0f      	bge.n	80a089e <_ZN6IRsend7sendNECEmi+0x46>
    if (data & TOPBIT) {
 80a087e:	2c00      	cmp	r4, #0
 80a0880:	da08      	bge.n	80a0894 <_ZN6IRsend7sendNECEmi+0x3c>
      mark(NEC_BIT_MARK);
 80a0882:	f7ff ff3b 	bl	80a06fc <_ZN6IRsend4markEi.constprop.0>
      space(NEC_ONE_SPACE);
 80a0886:	f44f 60c8 	mov.w	r0, #1600	; 0x640
      space(NEC_ZERO_SPACE);
 80a088a:	f7ff ff4d 	bl	80a0728 <_ZN6IRsend5spaceEi.constprop.0>
    data <<= 1;
 80a088e:	0064      	lsls	r4, r4, #1
  for (int i = 0; i < nbits; i++) {
 80a0890:	3501      	adds	r5, #1
 80a0892:	e7f0      	b.n	80a0876 <_ZN6IRsend7sendNECEmi+0x1e>
      mark(NEC_BIT_MARK);
 80a0894:	f7ff ff32 	bl	80a06fc <_ZN6IRsend4markEi.constprop.0>
      space(NEC_ZERO_SPACE);
 80a0898:	f44f 700c 	mov.w	r0, #560	; 0x230
 80a089c:	e7f5      	b.n	80a088a <_ZN6IRsend7sendNECEmi+0x32>
  mark(NEC_BIT_MARK);
 80a089e:	f7ff ff2d 	bl	80a06fc <_ZN6IRsend4markEi.constprop.0>
}
 80a08a2:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
  space(0);
 80a08a6:	2000      	movs	r0, #0
 80a08a8:	f7ff bf3e 	b.w	80a0728 <_ZN6IRsend5spaceEi.constprop.0>

080a08ac <_GLOBAL__sub_I_irout_khz>:
      mark(DISH_BIT_MARK);
      space(DISH_ZERO_SPACE);
    }
    data <<= 1;
  }
}
 80a08ac:	b510      	push	{r4, lr}
IntervalTimer timer;
 80a08ae:	4c05      	ldr	r4, [pc, #20]	; (80a08c4 <_GLOBAL__sub_I_irout_khz+0x18>)
 80a08b0:	4620      	mov	r0, r4
 80a08b2:	f7ff ff59 	bl	80a0768 <_ZN13IntervalTimerC1Ev>
 80a08b6:	4620      	mov	r0, r4
}
 80a08b8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
IntervalTimer timer;
 80a08bc:	4a02      	ldr	r2, [pc, #8]	; (80a08c8 <_GLOBAL__sub_I_irout_khz+0x1c>)
 80a08be:	4903      	ldr	r1, [pc, #12]	; (80a08cc <_GLOBAL__sub_I_irout_khz+0x20>)
 80a08c0:	f001 bd34 	b.w	80a232c <__aeabi_atexit>
 80a08c4:	20000094 	.word	0x20000094
 80a08c8:	2000006c 	.word	0x2000006c
 80a08cc:	080a06ef 	.word	0x080a06ef

080a08d0 <fastPinGetPinmap>:

/* Disabling USE_BIT_BAND since bitbanding is much slower! as per comment
 * by @pkourany on PR: https://github.com/spark/firmware/pull/556 */
#define USE_BIT_BAND 0

inline const Hal_Pin_Info* fastPinGetPinmap() {
 80a08d0:	b538      	push	{r3, r4, r5, lr}
    static Hal_Pin_Info* pinMap = HAL_Pin_Map();
 80a08d2:	4c0a      	ldr	r4, [pc, #40]	; (80a08fc <fastPinGetPinmap+0x2c>)
 80a08d4:	4d0a      	ldr	r5, [pc, #40]	; (80a0900 <fastPinGetPinmap+0x30>)
 80a08d6:	7823      	ldrb	r3, [r4, #0]
 80a08d8:	f3bf 8f5b 	dmb	ish
 80a08dc:	f013 0f01 	tst.w	r3, #1
 80a08e0:	d109      	bne.n	80a08f6 <fastPinGetPinmap+0x26>
 80a08e2:	4620      	mov	r0, r4
 80a08e4:	f7ff fbdd 	bl	80a00a2 <__cxa_guard_acquire>
 80a08e8:	b128      	cbz	r0, 80a08f6 <fastPinGetPinmap+0x26>
 80a08ea:	f000 f941 	bl	80a0b70 <HAL_Pin_Map>
 80a08ee:	6028      	str	r0, [r5, #0]
 80a08f0:	4620      	mov	r0, r4
 80a08f2:	f7ff fbdb 	bl	80a00ac <__cxa_guard_release>
    return pinMap;
}
 80a08f6:	6828      	ldr	r0, [r5, #0]
 80a08f8:	bd38      	pop	{r3, r4, r5, pc}
 80a08fa:	bf00      	nop
 80a08fc:	200000a4 	.word	0x200000a4
 80a0900:	200000a8 	.word	0x200000a8

080a0904 <_ZN7HC_SR04C1Eii>:
//    Version: 1.0.1

#include "HC-SR04.h"
#include "Particle.h"

HC_SR04::HC_SR04(int trigPin, int echoPin)
 80a0904:	b510      	push	{r4, lr}
 80a0906:	4c02      	ldr	r4, [pc, #8]	; (80a0910 <_ZN7HC_SR04C1Eii+0xc>)
{
    this->trigPin = trigPin;
    this->echoPin = echoPin;
 80a0908:	e9c0 1201 	strd	r1, r2, [r0, #4]
HC_SR04::HC_SR04(int trigPin, int echoPin)
 80a090c:	6004      	str	r4, [r0, #0]
}
 80a090e:	bd10      	pop	{r4, pc}
 80a0910:	bf800000 	.word	0xbf800000

080a0914 <_ZN7HC_SR044initEv>:

void HC_SR04::init()
{
 80a0914:	b510      	push	{r4, lr}
 80a0916:	4604      	mov	r4, r0
    pinMode(trigPin, OUTPUT);
 80a0918:	2101      	movs	r1, #1
 80a091a:	8880      	ldrh	r0, [r0, #4]
 80a091c:	f001 fc54 	bl	80a21c8 <pinMode>
    pinMode(echoPin, INPUT);
 80a0920:	8920      	ldrh	r0, [r4, #8]
 80a0922:	2100      	movs	r1, #0
}
 80a0924:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    pinMode(echoPin, INPUT);
 80a0928:	f001 bc4e 	b.w	80a21c8 <pinMode>

080a092c <_ZN7HC_SR0422triggerAndMeasurePulseEv>:
    if (timeUntilLow == 0) return NO_SIGNAL;
    return (float)timeUntilLow * uSecondsToInch;
}

unsigned long HC_SR04::triggerAndMeasurePulse()
{
 80a092c:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80a0930:	4605      	mov	r5, r0

class AtomicSection {
	int prev;
public:
	AtomicSection() {
		prev = HAL_disable_irq();
 80a0932:	f000 f97d 	bl	80a0c30 <HAL_disable_irq>
inline void pinResetFast(pin_t _pin) __attribute__((always_inline));
inline int32_t pinReadFast(pin_t _pin) __attribute__((always_inline));

inline void pinSetFast(pin_t _pin)
{
    fastPinGetPinmap()[_pin].gpio_peripheral->BSRRL = fastPinGetPinmap()[_pin].gpio_pin;
 80a0936:	f04f 081c 	mov.w	r8, #28
    // Timing is crucial here, so cannot allow other threads or interrupts
    // Maximum ammount of time in this block is limitted to 10 + 2,000 + 29,000 uS
    // Or 31 milliseconds
    ATOMIC_BLOCK() {
        // Send the 10 uSec pulse
        pinSetFast(trigPin);
 80a093a:	686c      	ldr	r4, [r5, #4]
 80a093c:	4607      	mov	r7, r0
 80a093e:	f7ff ffc7 	bl	80a08d0 <fastPinGetPinmap>
 80a0942:	b2a4      	uxth	r4, r4
 80a0944:	fb08 f404 	mul.w	r4, r8, r4
 80a0948:	1906      	adds	r6, r0, r4
 80a094a:	f7ff ffc1 	bl	80a08d0 <fastPinGetPinmap>
 80a094e:	88b2      	ldrh	r2, [r6, #4]
 80a0950:	5903      	ldr	r3, [r0, r4]
 80a0952:	200a      	movs	r0, #10
 80a0954:	831a      	strh	r2, [r3, #24]
 80a0956:	f000 f953 	bl	80a0c00 <HAL_Delay_Microseconds>
        delayMicroseconds(10);
        pinResetFast(trigPin);
 80a095a:	686c      	ldr	r4, [r5, #4]
}

inline void pinResetFast(pin_t _pin)
{
    fastPinGetPinmap()[_pin].gpio_peripheral->BSRRH = fastPinGetPinmap()[_pin].gpio_pin;
 80a095c:	f7ff ffb8 	bl	80a08d0 <fastPinGetPinmap>
 80a0960:	b2a4      	uxth	r4, r4
 80a0962:	fb08 f404 	mul.w	r4, r8, r4
 80a0966:	1906      	adds	r6, r0, r4
 80a0968:	f7ff ffb2 	bl	80a08d0 <fastPinGetPinmap>
 80a096c:	88b2      	ldrh	r2, [r6, #4]
 80a096e:	5903      	ldr	r3, [r0, r4]
inline unsigned long micros(void) { return HAL_Timer_Get_Micro_Seconds(); }
 80a0970:	2400      	movs	r4, #0
 80a0972:	835a      	strh	r2, [r3, #26]
 80a0974:	f000 f94c 	bl	80a0c10 <HAL_Timer_Get_Micro_Seconds>
 80a0978:	4681      	mov	r9, r0

        start = micros();
        while (pinReadFast(echoPin) != HIGH) {
 80a097a:	68ae      	ldr	r6, [r5, #8]
}

inline int32_t pinReadFast(pin_t _pin)
{
	return ((fastPinGetPinmap()[_pin].gpio_peripheral->IDR & fastPinGetPinmap()[_pin].gpio_pin) == 0 ? LOW : HIGH);
 80a097c:	f7ff ffa8 	bl	80a08d0 <fastPinGetPinmap>
 80a0980:	b2b6      	uxth	r6, r6
 80a0982:	fb08 f606 	mul.w	r6, r8, r6
 80a0986:	5983      	ldr	r3, [r0, r6]
 80a0988:	f8d3 a010 	ldr.w	sl, [r3, #16]
 80a098c:	f7ff ffa0 	bl	80a08d0 <fastPinGetPinmap>
 80a0990:	4406      	add	r6, r0
 80a0992:	88b3      	ldrh	r3, [r6, #4]
 80a0994:	ea13 0f0a 	tst.w	r3, sl
 80a0998:	d10d      	bne.n	80a09b6 <_ZN7HC_SR0422triggerAndMeasurePulseEv+0x8a>
 80a099a:	f000 f939 	bl	80a0c10 <HAL_Timer_Get_Micro_Seconds>
            duration = micros() - start;
 80a099e:	eba0 0409 	sub.w	r4, r0, r9
            if (duration >= timeoutHigh) {
 80a09a2:	f5b4 6ffa 	cmp.w	r4, #2000	; 0x7d0
 80a09a6:	d3e8      	bcc.n	80a097a <_ZN7HC_SR0422triggerAndMeasurePulseEv+0x4e>
                // Didn't recieve a pulse
                return 0;
 80a09a8:	2400      	movs	r4, #0
	}

	~AtomicSection() {
		HAL_enable_irq(prev);
 80a09aa:	4638      	mov	r0, r7
 80a09ac:	f000 f948 	bl	80a0c40 <HAL_enable_irq>
                return 0;
            }
        }
        return duration;
    }
}
 80a09b0:	4620      	mov	r0, r4
 80a09b2:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80a09b6:	f000 f92b 	bl	80a0c10 <HAL_Timer_Get_Micro_Seconds>
 80a09ba:	f04f 0a1c 	mov.w	sl, #28
 80a09be:	4680      	mov	r8, r0
            if (duration >= timeoutLow) {
 80a09c0:	f247 1947 	movw	r9, #28999	; 0x7147
        while (pinReadFast(echoPin) != LOW) {
 80a09c4:	68ae      	ldr	r6, [r5, #8]
 80a09c6:	f7ff ff83 	bl	80a08d0 <fastPinGetPinmap>
 80a09ca:	b2b6      	uxth	r6, r6
 80a09cc:	fb0a f606 	mul.w	r6, sl, r6
 80a09d0:	5983      	ldr	r3, [r0, r6]
 80a09d2:	f8d3 b010 	ldr.w	fp, [r3, #16]
 80a09d6:	f7ff ff7b 	bl	80a08d0 <fastPinGetPinmap>
 80a09da:	4406      	add	r6, r0
 80a09dc:	88b3      	ldrh	r3, [r6, #4]
 80a09de:	ea13 0f0b 	tst.w	r3, fp
 80a09e2:	d0e2      	beq.n	80a09aa <_ZN7HC_SR0422triggerAndMeasurePulseEv+0x7e>
 80a09e4:	f000 f914 	bl	80a0c10 <HAL_Timer_Get_Micro_Seconds>
            duration = micros() - start;
 80a09e8:	eba0 0408 	sub.w	r4, r0, r8
            if (duration >= timeoutLow) {
 80a09ec:	454c      	cmp	r4, r9
 80a09ee:	d9e9      	bls.n	80a09c4 <_ZN7HC_SR0422triggerAndMeasurePulseEv+0x98>
 80a09f0:	e7da      	b.n	80a09a8 <_ZN7HC_SR0422triggerAndMeasurePulseEv+0x7c>
	...

080a09f4 <_ZN7HC_SR046distCMEv>:
{
 80a09f4:	b510      	push	{r4, lr}
 80a09f6:	4604      	mov	r4, r0
    unsigned long timeUntilLow = triggerAndMeasurePulse();
 80a09f8:	f7ff ff98 	bl	80a092c <_ZN7HC_SR0422triggerAndMeasurePulseEv>
    if (timeUntilLow == 0) return NO_SIGNAL;
 80a09fc:	b908      	cbnz	r0, 80a0a02 <_ZN7HC_SR046distCMEv+0xe>
 80a09fe:	6820      	ldr	r0, [r4, #0]
}
 80a0a00:	bd10      	pop	{r4, pc}
    return (float)timeUntilLow * uSecondsToCM;
 80a0a02:	f001 ff11 	bl	80a2828 <__aeabi_ui2f>
 80a0a06:	4902      	ldr	r1, [pc, #8]	; (80a0a10 <_ZN7HC_SR046distCMEv+0x1c>)
 80a0a08:	f001 ff66 	bl	80a28d8 <__aeabi_fmul>
 80a0a0c:	e7f8      	b.n	80a0a00 <_ZN7HC_SR046distCMEv+0xc>
 80a0a0e:	bf00      	nop
 80a0a10:	3c8b4395 	.word	0x3c8b4395

080a0a14 <Wiring_TIM3_Interrupt_Handler_override>:
		IntervalTimer::SIT_CALLBACK[2]();
	}
}
#elif defined(STM32F2XX) && defined(PLATFORM_ID)	//Photon
void Wiring_TIM3_Interrupt_Handler_override()
{
 80a0a14:	b510      	push	{r4, lr}
	if (TIM_GetITStatus(TIM3, TIM_IT_Update) != RESET)
 80a0a16:	2101      	movs	r1, #1
 80a0a18:	4806      	ldr	r0, [pc, #24]	; (80a0a34 <Wiring_TIM3_Interrupt_Handler_override+0x20>)
 80a0a1a:	f7ff fc4f 	bl	80a02bc <TIM_GetITStatus>
 80a0a1e:	b140      	cbz	r0, 80a0a32 <Wiring_TIM3_Interrupt_Handler_override+0x1e>
	{
		TIM_ClearITPendingBit(TIM3, TIM_IT_Update);
 80a0a20:	2101      	movs	r1, #1
 80a0a22:	4804      	ldr	r0, [pc, #16]	; (80a0a34 <Wiring_TIM3_Interrupt_Handler_override+0x20>)
 80a0a24:	f7ff fc55 	bl	80a02d2 <TIM_ClearITPendingBit>
		IntervalTimer::SIT_CALLBACK[0]();
	}
}
 80a0a28:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		IntervalTimer::SIT_CALLBACK[0]();
 80a0a2c:	4b02      	ldr	r3, [pc, #8]	; (80a0a38 <Wiring_TIM3_Interrupt_Handler_override+0x24>)
 80a0a2e:	681b      	ldr	r3, [r3, #0]
 80a0a30:	4718      	bx	r3
}
 80a0a32:	bd10      	pop	{r4, pc}
 80a0a34:	40000400 	.word	0x40000400
 80a0a38:	200000ac 	.word	0x200000ac

080a0a3c <Wiring_TIM4_Interrupt_Handler_override>:

void Wiring_TIM4_Interrupt_Handler_override()
{
 80a0a3c:	b510      	push	{r4, lr}
	if (TIM_GetITStatus(TIM4, TIM_IT_Update) != RESET)
 80a0a3e:	2101      	movs	r1, #1
 80a0a40:	4806      	ldr	r0, [pc, #24]	; (80a0a5c <Wiring_TIM4_Interrupt_Handler_override+0x20>)
 80a0a42:	f7ff fc3b 	bl	80a02bc <TIM_GetITStatus>
 80a0a46:	b140      	cbz	r0, 80a0a5a <Wiring_TIM4_Interrupt_Handler_override+0x1e>
	{
		TIM_ClearITPendingBit(TIM4, TIM_IT_Update);
 80a0a48:	2101      	movs	r1, #1
 80a0a4a:	4804      	ldr	r0, [pc, #16]	; (80a0a5c <Wiring_TIM4_Interrupt_Handler_override+0x20>)
 80a0a4c:	f7ff fc41 	bl	80a02d2 <TIM_ClearITPendingBit>
		IntervalTimer::SIT_CALLBACK[1]();
	}
}
 80a0a50:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		IntervalTimer::SIT_CALLBACK[1]();
 80a0a54:	4b02      	ldr	r3, [pc, #8]	; (80a0a60 <Wiring_TIM4_Interrupt_Handler_override+0x24>)
 80a0a56:	685b      	ldr	r3, [r3, #4]
 80a0a58:	4718      	bx	r3
}
 80a0a5a:	bd10      	pop	{r4, pc}
 80a0a5c:	40000800 	.word	0x40000800
 80a0a60:	200000ac 	.word	0x200000ac

080a0a64 <Wiring_TIM5_Interrupt_Handler_override>:

void Wiring_TIM5_Interrupt_Handler_override()
{
 80a0a64:	b510      	push	{r4, lr}
	if (TIM_GetITStatus(TIM5, TIM_IT_Update) != RESET)
 80a0a66:	2101      	movs	r1, #1
 80a0a68:	4806      	ldr	r0, [pc, #24]	; (80a0a84 <Wiring_TIM5_Interrupt_Handler_override+0x20>)
 80a0a6a:	f7ff fc27 	bl	80a02bc <TIM_GetITStatus>
 80a0a6e:	b140      	cbz	r0, 80a0a82 <Wiring_TIM5_Interrupt_Handler_override+0x1e>
	{
		TIM_ClearITPendingBit(TIM5, TIM_IT_Update);
 80a0a70:	2101      	movs	r1, #1
 80a0a72:	4804      	ldr	r0, [pc, #16]	; (80a0a84 <Wiring_TIM5_Interrupt_Handler_override+0x20>)
 80a0a74:	f7ff fc2d 	bl	80a02d2 <TIM_ClearITPendingBit>
		IntervalTimer::SIT_CALLBACK[2]();
	}
}
 80a0a78:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		IntervalTimer::SIT_CALLBACK[2]();
 80a0a7c:	4b02      	ldr	r3, [pc, #8]	; (80a0a88 <Wiring_TIM5_Interrupt_Handler_override+0x24>)
 80a0a7e:	689b      	ldr	r3, [r3, #8]
 80a0a80:	4718      	bx	r3
}
 80a0a82:	bd10      	pop	{r4, pc}
 80a0a84:	40000c00 	.word	0x40000c00
 80a0a88:	200000ac 	.word	0x200000ac

080a0a8c <Wiring_TIM6_Interrupt_Handler_override>:

void Wiring_TIM6_Interrupt_Handler_override()
{
 80a0a8c:	b510      	push	{r4, lr}
	if (TIM_GetITStatus(TIM6, TIM_IT_Update) != RESET)
 80a0a8e:	2101      	movs	r1, #1
 80a0a90:	4806      	ldr	r0, [pc, #24]	; (80a0aac <Wiring_TIM6_Interrupt_Handler_override+0x20>)
 80a0a92:	f7ff fc13 	bl	80a02bc <TIM_GetITStatus>
 80a0a96:	b140      	cbz	r0, 80a0aaa <Wiring_TIM6_Interrupt_Handler_override+0x1e>
	{
		TIM_ClearITPendingBit(TIM6, TIM_IT_Update);
 80a0a98:	2101      	movs	r1, #1
 80a0a9a:	4804      	ldr	r0, [pc, #16]	; (80a0aac <Wiring_TIM6_Interrupt_Handler_override+0x20>)
 80a0a9c:	f7ff fc19 	bl	80a02d2 <TIM_ClearITPendingBit>
		IntervalTimer::SIT_CALLBACK[3]();
	}
}
 80a0aa0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		IntervalTimer::SIT_CALLBACK[3]();
 80a0aa4:	4b02      	ldr	r3, [pc, #8]	; (80a0ab0 <Wiring_TIM6_Interrupt_Handler_override+0x24>)
 80a0aa6:	68db      	ldr	r3, [r3, #12]
 80a0aa8:	4718      	bx	r3
}
 80a0aaa:	bd10      	pop	{r4, pc}
 80a0aac:	40001000 	.word	0x40001000
 80a0ab0:	200000ac 	.word	0x200000ac

080a0ab4 <Wiring_TIM7_Interrupt_Handler_override>:

void Wiring_TIM7_Interrupt_Handler_override()
{
 80a0ab4:	b510      	push	{r4, lr}
	if (TIM_GetITStatus(TIM7, TIM_IT_Update) != RESET)
 80a0ab6:	2101      	movs	r1, #1
 80a0ab8:	4806      	ldr	r0, [pc, #24]	; (80a0ad4 <Wiring_TIM7_Interrupt_Handler_override+0x20>)
 80a0aba:	f7ff fbff 	bl	80a02bc <TIM_GetITStatus>
 80a0abe:	b140      	cbz	r0, 80a0ad2 <Wiring_TIM7_Interrupt_Handler_override+0x1e>
	{
		TIM_ClearITPendingBit(TIM7, TIM_IT_Update);
 80a0ac0:	2101      	movs	r1, #1
 80a0ac2:	4804      	ldr	r0, [pc, #16]	; (80a0ad4 <Wiring_TIM7_Interrupt_Handler_override+0x20>)
 80a0ac4:	f7ff fc05 	bl	80a02d2 <TIM_ClearITPendingBit>
		IntervalTimer::SIT_CALLBACK[4]();
	}
}
 80a0ac8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		IntervalTimer::SIT_CALLBACK[4]();
 80a0acc:	4b02      	ldr	r3, [pc, #8]	; (80a0ad8 <Wiring_TIM7_Interrupt_Handler_override+0x24>)
 80a0ace:	691b      	ldr	r3, [r3, #16]
 80a0ad0:	4718      	bx	r3
}
 80a0ad2:	bd10      	pop	{r4, pc}
 80a0ad4:	40001400 	.word	0x40001400
 80a0ad8:	200000ac 	.word	0x200000ac

080a0adc <_ZN13IntervalTimer8stop_SITEv>:

// ------------------------------------------------------------
// stops an active SIT by disabling its interrupt and TIMER
// and freeing up its state for future use.
// ------------------------------------------------------------
void IntervalTimer::stop_SIT() {
 80a0adc:	b573      	push	{r0, r1, r4, r5, r6, lr}
 80a0ade:	7a43      	ldrb	r3, [r0, #9]
 80a0ae0:	4605      	mov	r5, r0
 80a0ae2:	2b04      	cmp	r3, #4
 80a0ae4:	d808      	bhi.n	80a0af8 <_ZN13IntervalTimer8stop_SITEv+0x1c>
 80a0ae6:	e8df f003 	tbb	[pc, r3]
 80a0aea:	1903      	.short	0x1903
 80a0aec:	231e      	.short	0x231e
 80a0aee:	28          	.byte	0x28
 80a0aef:	00          	.byte	0x00
		nvicStructure.NVIC_IRQChannel = TIM4_IRQn;
		TIMx = TIM4;
		break;
#elif defined(STM32F2XX) && defined(PLATFORM_ID)	//Photon
	case 0:		// TIM3
		nvicStructure.NVIC_IRQChannel = TIM3_IRQn;
 80a0af0:	231d      	movs	r3, #29
		TIMx = TIM3;
 80a0af2:	4c14      	ldr	r4, [pc, #80]	; (80a0b44 <_ZN13IntervalTimer8stop_SITEv+0x68>)
		nvicStructure.NVIC_IRQChannel = TIM3_IRQn;
 80a0af4:	f88d 3004 	strb.w	r3, [sp, #4]
		}
	// disable counter
	TIM_Cmd(TIMx, DISABLE);
	
	// disable interrupt
    nvicStructure.NVIC_IRQChannelCmd = DISABLE;
 80a0af8:	2600      	movs	r6, #0
	TIM_Cmd(TIMx, DISABLE);
 80a0afa:	2100      	movs	r1, #0
 80a0afc:	4620      	mov	r0, r4
 80a0afe:	f7ff fbd1 	bl	80a02a4 <TIM_Cmd>
    NVIC_Init(&nvicStructure);
 80a0b02:	a801      	add	r0, sp, #4
    nvicStructure.NVIC_IRQChannelCmd = DISABLE;
 80a0b04:	f88d 6007 	strb.w	r6, [sp, #7]
    NVIC_Init(&nvicStructure);
 80a0b08:	f7ff fad4 	bl	80a00b4 <NVIC_Init>
	
	// disable timer peripheral
	TIM_DeInit(TIMx);
 80a0b0c:	4620      	mov	r0, r4
 80a0b0e:	f7ff fb1f 	bl	80a0150 <TIM_DeInit>
	
	// free SIT for future use
	SIT_used[SIT_id] = false;
 80a0b12:	7a6b      	ldrb	r3, [r5, #9]
 80a0b14:	4a0c      	ldr	r2, [pc, #48]	; (80a0b48 <_ZN13IntervalTimer8stop_SITEv+0x6c>)
 80a0b16:	54d6      	strb	r6, [r2, r3]
}
 80a0b18:	b002      	add	sp, #8
 80a0b1a:	bd70      	pop	{r4, r5, r6, pc}
		nvicStructure.NVIC_IRQChannel = TIM4_IRQn;
 80a0b1c:	231e      	movs	r3, #30
		TIMx = TIM4;
 80a0b1e:	4c0b      	ldr	r4, [pc, #44]	; (80a0b4c <_ZN13IntervalTimer8stop_SITEv+0x70>)
		nvicStructure.NVIC_IRQChannel = TIM4_IRQn;
 80a0b20:	f88d 3004 	strb.w	r3, [sp, #4]
		break;
 80a0b24:	e7e8      	b.n	80a0af8 <_ZN13IntervalTimer8stop_SITEv+0x1c>
		nvicStructure.NVIC_IRQChannel = TIM5_IRQn;
 80a0b26:	2332      	movs	r3, #50	; 0x32
		TIMx = TIM5;
 80a0b28:	4c09      	ldr	r4, [pc, #36]	; (80a0b50 <_ZN13IntervalTimer8stop_SITEv+0x74>)
		nvicStructure.NVIC_IRQChannel = TIM5_IRQn;
 80a0b2a:	f88d 3004 	strb.w	r3, [sp, #4]
		break;
 80a0b2e:	e7e3      	b.n	80a0af8 <_ZN13IntervalTimer8stop_SITEv+0x1c>
		nvicStructure.NVIC_IRQChannel = TIM6_DAC_IRQn;
 80a0b30:	2336      	movs	r3, #54	; 0x36
		TIMx = TIM6;
 80a0b32:	4c08      	ldr	r4, [pc, #32]	; (80a0b54 <_ZN13IntervalTimer8stop_SITEv+0x78>)
		nvicStructure.NVIC_IRQChannel = TIM6_DAC_IRQn;
 80a0b34:	f88d 3004 	strb.w	r3, [sp, #4]
		break;
 80a0b38:	e7de      	b.n	80a0af8 <_ZN13IntervalTimer8stop_SITEv+0x1c>
		nvicStructure.NVIC_IRQChannel = TIM7_IRQn;
 80a0b3a:	2337      	movs	r3, #55	; 0x37
		TIMx = TIM7;
 80a0b3c:	4c06      	ldr	r4, [pc, #24]	; (80a0b58 <_ZN13IntervalTimer8stop_SITEv+0x7c>)
		nvicStructure.NVIC_IRQChannel = TIM7_IRQn;
 80a0b3e:	f88d 3004 	strb.w	r3, [sp, #4]
		break;
 80a0b42:	e7d9      	b.n	80a0af8 <_ZN13IntervalTimer8stop_SITEv+0x1c>
 80a0b44:	40000400 	.word	0x40000400
 80a0b48:	200000c0 	.word	0x200000c0
 80a0b4c:	40000800 	.word	0x40000800
 80a0b50:	40000c00 	.word	0x40000c00
 80a0b54:	40001000 	.word	0x40001000
 80a0b58:	40001400 	.word	0x40001400

080a0b5c <_ZN13IntervalTimer3endEv>:
	if (status == TIMER_SIT) stop_SIT();
 80a0b5c:	7a03      	ldrb	r3, [r0, #8]
void IntervalTimer::end() {
 80a0b5e:	b510      	push	{r4, lr}
 80a0b60:	4604      	mov	r4, r0
	if (status == TIMER_SIT) stop_SIT();
 80a0b62:	b10b      	cbz	r3, 80a0b68 <_ZN13IntervalTimer3endEv+0xc>
 80a0b64:	f7ff ffba 	bl	80a0adc <_ZN13IntervalTimer8stop_SITEv>
	status = TIMER_OFF;
 80a0b68:	2300      	movs	r3, #0
 80a0b6a:	7223      	strb	r3, [r4, #8]
}
 80a0b6c:	bd10      	pop	{r4, pc}
	...

080a0b70 <HAL_Pin_Map>:
// New HAL functions must be added to the end of this list.
// GNINRAW

DYNALIB_BEGIN(hal_gpio)

DYNALIB_FN(0, hal_gpio, HAL_Pin_Map, Hal_Pin_Info*(void))
 80a0b70:	b508      	push	{r3, lr}
 80a0b72:	4b02      	ldr	r3, [pc, #8]	; (80a0b7c <HAL_Pin_Map+0xc>)
 80a0b74:	681b      	ldr	r3, [r3, #0]
 80a0b76:	681b      	ldr	r3, [r3, #0]
 80a0b78:	9301      	str	r3, [sp, #4]
 80a0b7a:	bd08      	pop	{r3, pc}
 80a0b7c:	080601b0 	.word	0x080601b0

080a0b80 <HAL_Validate_Pin_Function>:
DYNALIB_FN(1, hal_gpio, HAL_Validate_Pin_Function, PinFunction(pin_t, PinFunction))
 80a0b80:	b508      	push	{r3, lr}
 80a0b82:	4b02      	ldr	r3, [pc, #8]	; (80a0b8c <HAL_Validate_Pin_Function+0xc>)
 80a0b84:	681b      	ldr	r3, [r3, #0]
 80a0b86:	685b      	ldr	r3, [r3, #4]
 80a0b88:	9301      	str	r3, [sp, #4]
 80a0b8a:	bd08      	pop	{r3, pc}
 80a0b8c:	080601b0 	.word	0x080601b0

080a0b90 <HAL_Pin_Mode>:
DYNALIB_FN(2, hal_gpio, HAL_Pin_Mode, void(pin_t, PinMode))
 80a0b90:	b508      	push	{r3, lr}
 80a0b92:	4b02      	ldr	r3, [pc, #8]	; (80a0b9c <HAL_Pin_Mode+0xc>)
 80a0b94:	681b      	ldr	r3, [r3, #0]
 80a0b96:	689b      	ldr	r3, [r3, #8]
 80a0b98:	9301      	str	r3, [sp, #4]
 80a0b9a:	bd08      	pop	{r3, pc}
 80a0b9c:	080601b0 	.word	0x080601b0

080a0ba0 <HAL_Get_Pin_Mode>:
DYNALIB_FN(3, hal_gpio, HAL_Get_Pin_Mode, PinMode(pin_t))
 80a0ba0:	b508      	push	{r3, lr}
 80a0ba2:	4b02      	ldr	r3, [pc, #8]	; (80a0bac <HAL_Get_Pin_Mode+0xc>)
 80a0ba4:	681b      	ldr	r3, [r3, #0]
 80a0ba6:	68db      	ldr	r3, [r3, #12]
 80a0ba8:	9301      	str	r3, [sp, #4]
 80a0baa:	bd08      	pop	{r3, pc}
 80a0bac:	080601b0 	.word	0x080601b0

080a0bb0 <HAL_GPIO_Write>:
DYNALIB_FN(4, hal_gpio, HAL_GPIO_Write, void(pin_t, uint8_t))
 80a0bb0:	b508      	push	{r3, lr}
 80a0bb2:	4b02      	ldr	r3, [pc, #8]	; (80a0bbc <HAL_GPIO_Write+0xc>)
 80a0bb4:	681b      	ldr	r3, [r3, #0]
 80a0bb6:	691b      	ldr	r3, [r3, #16]
 80a0bb8:	9301      	str	r3, [sp, #4]
 80a0bba:	bd08      	pop	{r3, pc}
 80a0bbc:	080601b0 	.word	0x080601b0

080a0bc0 <HAL_GPIO_Read>:
DYNALIB_FN(5, hal_gpio, HAL_GPIO_Read, int32_t(pin_t))
 80a0bc0:	b508      	push	{r3, lr}
 80a0bc2:	4b02      	ldr	r3, [pc, #8]	; (80a0bcc <HAL_GPIO_Read+0xc>)
 80a0bc4:	681b      	ldr	r3, [r3, #0]
 80a0bc6:	695b      	ldr	r3, [r3, #20]
 80a0bc8:	9301      	str	r3, [sp, #4]
 80a0bca:	bd08      	pop	{r3, pc}
 80a0bcc:	080601b0 	.word	0x080601b0

080a0bd0 <HAL_Set_System_Interrupt_Handler>:

DYNALIB_FN(13, hal_gpio, hal_pwm_write, void(uint16_t, uint8_t))
DYNALIB_FN(14, hal_gpio, hal_pwm_get_frequency, uint16_t(uint16_t))
DYNALIB_FN(15, hal_gpio, hal_pwm_get_analog_value, uint16_t(uint16_t))

DYNALIB_FN(16, hal_gpio, HAL_Set_System_Interrupt_Handler, uint8_t(hal_irq_t, const HAL_InterruptCallback*, HAL_InterruptCallback*, void*))
 80a0bd0:	b508      	push	{r3, lr}
 80a0bd2:	4b02      	ldr	r3, [pc, #8]	; (80a0bdc <HAL_Set_System_Interrupt_Handler+0xc>)
 80a0bd4:	681b      	ldr	r3, [r3, #0]
 80a0bd6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80a0bd8:	9301      	str	r3, [sp, #4]
 80a0bda:	bd08      	pop	{r3, pc}
 80a0bdc:	080601b0 	.word	0x080601b0

080a0be0 <hal_pwm_write_with_frequency_ext>:
DYNALIB_FN(26, hal_gpio, HAL_DAC_Set_Resolution, void(pin_t, uint8_t))
DYNALIB_FN(27, hal_gpio, HAL_DAC_Enable_Buffer, void(pin_t pin, uint8_t state))
DYNALIB_FN(28, hal_gpio, hal_pwm_get_resolution, uint8_t(uint16_t))
DYNALIB_FN(29, hal_gpio, hal_pwm_set_resolution, void(uint16_t, uint8_t))
DYNALIB_FN(30, hal_gpio, hal_pwm_write_ext, void(uint16_t, uint32_t))
DYNALIB_FN(31, hal_gpio, hal_pwm_write_with_frequency_ext, void(uint16_t, uint32_t, uint32_t))
 80a0be0:	b508      	push	{r3, lr}
 80a0be2:	4b02      	ldr	r3, [pc, #8]	; (80a0bec <hal_pwm_write_with_frequency_ext+0xc>)
 80a0be4:	681b      	ldr	r3, [r3, #0]
 80a0be6:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80a0be8:	9301      	str	r3, [sp, #4]
 80a0bea:	bd08      	pop	{r3, pc}
 80a0bec:	080601b0 	.word	0x080601b0

080a0bf0 <HAL_RNG_GetRandomNumber>:

DYNALIB_BEGIN(hal)

#if PLATFORM_ID > 3
DYNALIB_FN(0, hal, HAL_RNG_Configuration, void(void))
DYNALIB_FN(1, hal, HAL_RNG_GetRandomNumber, uint32_t(void))
 80a0bf0:	b508      	push	{r3, lr}
 80a0bf2:	4b02      	ldr	r3, [pc, #8]	; (80a0bfc <HAL_RNG_GetRandomNumber+0xc>)
 80a0bf4:	681b      	ldr	r3, [r3, #0]
 80a0bf6:	685b      	ldr	r3, [r3, #4]
 80a0bf8:	9301      	str	r3, [sp, #4]
 80a0bfa:	bd08      	pop	{r3, pc}
 80a0bfc:	0806019c 	.word	0x0806019c

080a0c00 <HAL_Delay_Microseconds>:
#else
#define BASE_IDX 0
#endif

DYNALIB_FN(BASE_IDX + 0, hal, HAL_Delay_Milliseconds, void(uint32_t))
DYNALIB_FN(BASE_IDX + 1, hal, HAL_Delay_Microseconds, void(uint32_t))
 80a0c00:	b508      	push	{r3, lr}
 80a0c02:	4b02      	ldr	r3, [pc, #8]	; (80a0c0c <HAL_Delay_Microseconds+0xc>)
 80a0c04:	681b      	ldr	r3, [r3, #0]
 80a0c06:	68db      	ldr	r3, [r3, #12]
 80a0c08:	9301      	str	r3, [sp, #4]
 80a0c0a:	bd08      	pop	{r3, pc}
 80a0c0c:	0806019c 	.word	0x0806019c

080a0c10 <HAL_Timer_Get_Micro_Seconds>:
DYNALIB_FN(BASE_IDX + 2, hal, HAL_Timer_Get_Micro_Seconds, system_tick_t(void))
 80a0c10:	b508      	push	{r3, lr}
 80a0c12:	4b02      	ldr	r3, [pc, #8]	; (80a0c1c <HAL_Timer_Get_Micro_Seconds+0xc>)
 80a0c14:	681b      	ldr	r3, [r3, #0]
 80a0c16:	691b      	ldr	r3, [r3, #16]
 80a0c18:	9301      	str	r3, [sp, #4]
 80a0c1a:	bd08      	pop	{r3, pc}
 80a0c1c:	0806019c 	.word	0x0806019c

080a0c20 <HAL_Timer_Get_Milli_Seconds>:
DYNALIB_FN(BASE_IDX + 3, hal, HAL_Timer_Get_Milli_Seconds, system_tick_t(void))
 80a0c20:	b508      	push	{r3, lr}
 80a0c22:	4b02      	ldr	r3, [pc, #8]	; (80a0c2c <HAL_Timer_Get_Milli_Seconds+0xc>)
 80a0c24:	681b      	ldr	r3, [r3, #0]
 80a0c26:	695b      	ldr	r3, [r3, #20]
 80a0c28:	9301      	str	r3, [sp, #4]
 80a0c2a:	bd08      	pop	{r3, pc}
 80a0c2c:	0806019c 	.word	0x0806019c

080a0c30 <HAL_disable_irq>:
DYNALIB_FN(BASE_IDX + 8, hal, HAL_EEPROM_Init, void(void))
DYNALIB_FN(BASE_IDX + 9, hal, HAL_EEPROM_Read, uint8_t(uint32_t))
DYNALIB_FN(BASE_IDX + 10, hal, HAL_EEPROM_Write, void(uint32_t, uint8_t))
DYNALIB_FN(BASE_IDX + 11, hal, HAL_EEPROM_Length, size_t(void))

DYNALIB_FN(BASE_IDX + 12, hal, HAL_disable_irq, int(void))
 80a0c30:	b508      	push	{r3, lr}
 80a0c32:	4b02      	ldr	r3, [pc, #8]	; (80a0c3c <HAL_disable_irq+0xc>)
 80a0c34:	681b      	ldr	r3, [r3, #0]
 80a0c36:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80a0c38:	9301      	str	r3, [sp, #4]
 80a0c3a:	bd08      	pop	{r3, pc}
 80a0c3c:	0806019c 	.word	0x0806019c

080a0c40 <HAL_enable_irq>:
DYNALIB_FN(BASE_IDX + 13, hal, HAL_enable_irq, void(int))
 80a0c40:	b508      	push	{r3, lr}
 80a0c42:	4b02      	ldr	r3, [pc, #8]	; (80a0c4c <HAL_enable_irq+0xc>)
 80a0c44:	681b      	ldr	r3, [r3, #0]
 80a0c46:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80a0c48:	9301      	str	r3, [sp, #4]
 80a0c4a:	bd08      	pop	{r3, pc}
 80a0c4c:	0806019c 	.word	0x0806019c

080a0c50 <os_mutex_recursive_create>:
DYNALIB_FN(13, hal_concurrent, os_mutex_destroy, int(os_mutex_t))
DYNALIB_FN(14, hal_concurrent, os_mutex_lock, int(os_mutex_t))
DYNALIB_FN(15, hal_concurrent, os_mutex_trylock, int(os_mutex_t))
DYNALIB_FN(16, hal_concurrent, os_mutex_unlock, int(os_mutex_t))

DYNALIB_FN(17, hal_concurrent, os_mutex_recursive_create, int(os_mutex_recursive_t*))
 80a0c50:	b508      	push	{r3, lr}
 80a0c52:	4b02      	ldr	r3, [pc, #8]	; (80a0c5c <os_mutex_recursive_create+0xc>)
 80a0c54:	681b      	ldr	r3, [r3, #0]
 80a0c56:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80a0c58:	9301      	str	r3, [sp, #4]
 80a0c5a:	bd08      	pop	{r3, pc}
 80a0c5c:	080601d0 	.word	0x080601d0

080a0c60 <os_mutex_recursive_destroy>:
DYNALIB_FN(18, hal_concurrent, os_mutex_recursive_destroy, int(os_mutex_recursive_t))
 80a0c60:	b508      	push	{r3, lr}
 80a0c62:	4b02      	ldr	r3, [pc, #8]	; (80a0c6c <os_mutex_recursive_destroy+0xc>)
 80a0c64:	681b      	ldr	r3, [r3, #0]
 80a0c66:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80a0c68:	9301      	str	r3, [sp, #4]
 80a0c6a:	bd08      	pop	{r3, pc}
 80a0c6c:	080601d0 	.word	0x080601d0

080a0c70 <hal_usart_init>:
#define BASE_IDX 6 // Base index for all subsequent functions
#else
#define BASE_IDX 0
#endif

DYNALIB_FN(BASE_IDX + 0, hal_usart, hal_usart_init, void(hal_usart_interface_t, hal_usart_ring_buffer_t*, hal_usart_ring_buffer_t*))
 80a0c70:	b508      	push	{r3, lr}
 80a0c72:	4b02      	ldr	r3, [pc, #8]	; (80a0c7c <hal_usart_init+0xc>)
 80a0c74:	681b      	ldr	r3, [r3, #0]
 80a0c76:	699b      	ldr	r3, [r3, #24]
 80a0c78:	9301      	str	r3, [sp, #4]
 80a0c7a:	bd08      	pop	{r3, pc}
 80a0c7c:	080601c4 	.word	0x080601c4

080a0c80 <hal_usart_write>:
DYNALIB_FN(BASE_IDX + 1, hal_usart, hal_usart_begin, void(hal_usart_interface_t, uint32_t))
DYNALIB_FN(BASE_IDX + 2, hal_usart, hal_usart_end, void(hal_usart_interface_t))
DYNALIB_FN(BASE_IDX + 3, hal_usart, hal_usart_write, uint32_t(hal_usart_interface_t, uint8_t))
 80a0c80:	b508      	push	{r3, lr}
 80a0c82:	4b02      	ldr	r3, [pc, #8]	; (80a0c8c <hal_usart_write+0xc>)
 80a0c84:	681b      	ldr	r3, [r3, #0]
 80a0c86:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80a0c88:	9301      	str	r3, [sp, #4]
 80a0c8a:	bd08      	pop	{r3, pc}
 80a0c8c:	080601c4 	.word	0x080601c4

080a0c90 <hal_usart_available>:
DYNALIB_FN(BASE_IDX + 4, hal_usart, hal_usart_available, int32_t(hal_usart_interface_t))
 80a0c90:	b508      	push	{r3, lr}
 80a0c92:	4b02      	ldr	r3, [pc, #8]	; (80a0c9c <hal_usart_available+0xc>)
 80a0c94:	681b      	ldr	r3, [r3, #0]
 80a0c96:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80a0c98:	9301      	str	r3, [sp, #4]
 80a0c9a:	bd08      	pop	{r3, pc}
 80a0c9c:	080601c4 	.word	0x080601c4

080a0ca0 <hal_usart_read>:
DYNALIB_FN(BASE_IDX + 5, hal_usart, hal_usart_read, int32_t(hal_usart_interface_t))
 80a0ca0:	b508      	push	{r3, lr}
 80a0ca2:	4b02      	ldr	r3, [pc, #8]	; (80a0cac <hal_usart_read+0xc>)
 80a0ca4:	681b      	ldr	r3, [r3, #0]
 80a0ca6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80a0ca8:	9301      	str	r3, [sp, #4]
 80a0caa:	bd08      	pop	{r3, pc}
 80a0cac:	080601c4 	.word	0x080601c4

080a0cb0 <hal_usart_peek>:
DYNALIB_FN(BASE_IDX + 6, hal_usart, hal_usart_peek, int32_t(hal_usart_interface_t))
 80a0cb0:	b508      	push	{r3, lr}
 80a0cb2:	4b02      	ldr	r3, [pc, #8]	; (80a0cbc <hal_usart_peek+0xc>)
 80a0cb4:	681b      	ldr	r3, [r3, #0]
 80a0cb6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80a0cb8:	9301      	str	r3, [sp, #4]
 80a0cba:	bd08      	pop	{r3, pc}
 80a0cbc:	080601c4 	.word	0x080601c4

080a0cc0 <hal_usart_flush>:
DYNALIB_FN(BASE_IDX + 7, hal_usart, hal_usart_flush, void(hal_usart_interface_t))
 80a0cc0:	b508      	push	{r3, lr}
 80a0cc2:	4b02      	ldr	r3, [pc, #8]	; (80a0ccc <hal_usart_flush+0xc>)
 80a0cc4:	681b      	ldr	r3, [r3, #0]
 80a0cc6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80a0cc8:	9301      	str	r3, [sp, #4]
 80a0cca:	bd08      	pop	{r3, pc}
 80a0ccc:	080601c4 	.word	0x080601c4

080a0cd0 <hal_usart_is_enabled>:
DYNALIB_FN(BASE_IDX + 8, hal_usart, hal_usart_is_enabled, bool(hal_usart_interface_t))
 80a0cd0:	b508      	push	{r3, lr}
 80a0cd2:	4b02      	ldr	r3, [pc, #8]	; (80a0cdc <hal_usart_is_enabled+0xc>)
 80a0cd4:	681b      	ldr	r3, [r3, #0]
 80a0cd6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80a0cd8:	9301      	str	r3, [sp, #4]
 80a0cda:	bd08      	pop	{r3, pc}
 80a0cdc:	080601c4 	.word	0x080601c4

080a0ce0 <hal_usart_available_data_for_write>:
DYNALIB_FN(BASE_IDX + 9, hal_usart, hal_usart_half_duplex, void(hal_usart_interface_t, bool))
DYNALIB_FN(BASE_IDX + 10, hal_usart, hal_usart_available_data_for_write, int32_t(hal_usart_interface_t))
 80a0ce0:	b508      	push	{r3, lr}
 80a0ce2:	4b02      	ldr	r3, [pc, #8]	; (80a0cec <hal_usart_available_data_for_write+0xc>)
 80a0ce4:	681b      	ldr	r3, [r3, #0]
 80a0ce6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80a0ce8:	9301      	str	r3, [sp, #4]
 80a0cea:	bd08      	pop	{r3, pc}
 80a0cec:	080601c4 	.word	0x080601c4

080a0cf0 <hal_i2c_write>:
DYNALIB_FN(BASE_IDX + 3, hal_i2c, hal_i2c_begin, void(hal_i2c_interface_t, hal_i2c_mode_t, uint8_t, void*))
DYNALIB_FN(BASE_IDX + 4, hal_i2c, hal_i2c_end, void(hal_i2c_interface_t, void*))
DYNALIB_FN(BASE_IDX + 5, hal_i2c, hal_i2c_request, uint32_t(hal_i2c_interface_t, uint8_t, uint8_t, uint8_t, void*))
DYNALIB_FN(BASE_IDX + 6, hal_i2c, hal_i2c_begin_transmission, void(hal_i2c_interface_t, uint8_t, const hal_i2c_transmission_config_t*))
DYNALIB_FN(BASE_IDX + 7, hal_i2c, hal_i2c_end_transmission, uint8_t(hal_i2c_interface_t, uint8_t, void*))
DYNALIB_FN(BASE_IDX + 8, hal_i2c, hal_i2c_write, uint32_t(hal_i2c_interface_t, uint8_t, void*))
 80a0cf0:	b508      	push	{r3, lr}
 80a0cf2:	4b02      	ldr	r3, [pc, #8]	; (80a0cfc <hal_i2c_write+0xc>)
 80a0cf4:	681b      	ldr	r3, [r3, #0]
 80a0cf6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80a0cf8:	9301      	str	r3, [sp, #4]
 80a0cfa:	bd08      	pop	{r3, pc}
 80a0cfc:	080601ac 	.word	0x080601ac

080a0d00 <hal_i2c_available>:
DYNALIB_FN(BASE_IDX + 9, hal_i2c, hal_i2c_available, int32_t(hal_i2c_interface_t, void*))
 80a0d00:	b508      	push	{r3, lr}
 80a0d02:	4b02      	ldr	r3, [pc, #8]	; (80a0d0c <hal_i2c_available+0xc>)
 80a0d04:	681b      	ldr	r3, [r3, #0]
 80a0d06:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80a0d08:	9301      	str	r3, [sp, #4]
 80a0d0a:	bd08      	pop	{r3, pc}
 80a0d0c:	080601ac 	.word	0x080601ac

080a0d10 <hal_i2c_read>:
DYNALIB_FN(BASE_IDX + 10, hal_i2c, hal_i2c_read, int32_t(hal_i2c_interface_t, void*))
 80a0d10:	b508      	push	{r3, lr}
 80a0d12:	4b02      	ldr	r3, [pc, #8]	; (80a0d1c <hal_i2c_read+0xc>)
 80a0d14:	681b      	ldr	r3, [r3, #0]
 80a0d16:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80a0d18:	9301      	str	r3, [sp, #4]
 80a0d1a:	bd08      	pop	{r3, pc}
 80a0d1c:	080601ac 	.word	0x080601ac

080a0d20 <hal_i2c_peek>:
DYNALIB_FN(BASE_IDX + 11, hal_i2c, hal_i2c_peek, int32_t(hal_i2c_interface_t, void*))
 80a0d20:	b508      	push	{r3, lr}
 80a0d22:	4b02      	ldr	r3, [pc, #8]	; (80a0d2c <hal_i2c_peek+0xc>)
 80a0d24:	681b      	ldr	r3, [r3, #0]
 80a0d26:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80a0d28:	9301      	str	r3, [sp, #4]
 80a0d2a:	bd08      	pop	{r3, pc}
 80a0d2c:	080601ac 	.word	0x080601ac

080a0d30 <hal_i2c_flush>:
DYNALIB_FN(BASE_IDX + 12, hal_i2c, hal_i2c_flush, void(hal_i2c_interface_t, void*))
 80a0d30:	b508      	push	{r3, lr}
 80a0d32:	4b02      	ldr	r3, [pc, #8]	; (80a0d3c <hal_i2c_flush+0xc>)
 80a0d34:	681b      	ldr	r3, [r3, #0]
 80a0d36:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80a0d38:	9301      	str	r3, [sp, #4]
 80a0d3a:	bd08      	pop	{r3, pc}
 80a0d3c:	080601ac 	.word	0x080601ac

080a0d40 <hal_i2c_is_enabled>:
DYNALIB_FN(BASE_IDX + 13, hal_i2c, hal_i2c_is_enabled, bool(hal_i2c_interface_t, void*))
 80a0d40:	b508      	push	{r3, lr}
 80a0d42:	4b02      	ldr	r3, [pc, #8]	; (80a0d4c <hal_i2c_is_enabled+0xc>)
 80a0d44:	681b      	ldr	r3, [r3, #0]
 80a0d46:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80a0d48:	9301      	str	r3, [sp, #4]
 80a0d4a:	bd08      	pop	{r3, pc}
 80a0d4c:	080601ac 	.word	0x080601ac

080a0d50 <hal_i2c_init>:
DYNALIB_FN(BASE_IDX + 14, hal_i2c, hal_i2c_set_callback_on_received, void(hal_i2c_interface_t, void(*)(int), void*))
DYNALIB_FN(BASE_IDX + 15, hal_i2c, hal_i2c_set_callback_on_requested, void(hal_i2c_interface_t, void(*)(void), void*))
DYNALIB_FN(BASE_IDX + 16, hal_i2c, hal_i2c_init, int(hal_i2c_interface_t, const hal_i2c_config_t*))
 80a0d50:	b508      	push	{r3, lr}
 80a0d52:	4b03      	ldr	r3, [pc, #12]	; (80a0d60 <hal_i2c_init+0x10>)
 80a0d54:	681b      	ldr	r3, [r3, #0]
 80a0d56:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80a0d5a:	9301      	str	r3, [sp, #4]
 80a0d5c:	bd08      	pop	{r3, pc}
 80a0d5e:	0000      	.short	0x0000
 80a0d60:	080601ac 	.word	0x080601ac

080a0d64 <hal_spi_init>:
DYNALIB_FN(2, hal_spi, hal_spi_set_bit_order, void(hal_spi_interface_t, uint8_t))
DYNALIB_FN(3, hal_spi, hal_spi_set_data_mode, void(hal_spi_interface_t, uint8_t))
DYNALIB_FN(4, hal_spi, hal_spi_set_clock_divider, void(hal_spi_interface_t, uint8_t))
DYNALIB_FN(5, hal_spi, hal_spi_transfer, uint16_t(hal_spi_interface_t, uint16_t))
DYNALIB_FN(6, hal_spi, hal_spi_is_enabled_deprecated, bool(void))
DYNALIB_FN(7, hal_spi, hal_spi_init, void(hal_spi_interface_t))
 80a0d64:	b508      	push	{r3, lr}
 80a0d66:	4b02      	ldr	r3, [pc, #8]	; (80a0d70 <hal_spi_init+0xc>)
 80a0d68:	681b      	ldr	r3, [r3, #0]
 80a0d6a:	69db      	ldr	r3, [r3, #28]
 80a0d6c:	9301      	str	r3, [sp, #4]
 80a0d6e:	bd08      	pop	{r3, pc}
 80a0d70:	080601b4 	.word	0x080601b4

080a0d74 <hal_spi_is_enabled>:
DYNALIB_FN(8, hal_spi, hal_spi_is_enabled, bool(hal_spi_interface_t))
 80a0d74:	b508      	push	{r3, lr}
 80a0d76:	4b02      	ldr	r3, [pc, #8]	; (80a0d80 <hal_spi_is_enabled+0xc>)
 80a0d78:	681b      	ldr	r3, [r3, #0]
 80a0d7a:	6a1b      	ldr	r3, [r3, #32]
 80a0d7c:	9301      	str	r3, [sp, #4]
 80a0d7e:	bd08      	pop	{r3, pc}
 80a0d80:	080601b4 	.word	0x080601b4

080a0d84 <HAL_Tone_Start>:
// New HAL functions must be added to the end of this list.
// GNINRAW

DYNALIB_BEGIN(hal_peripherals)

DYNALIB_FN(0, hal_peripherals, HAL_Tone_Start, void(uint8_t, uint32_t, uint32_t))
 80a0d84:	b508      	push	{r3, lr}
 80a0d86:	4b02      	ldr	r3, [pc, #8]	; (80a0d90 <HAL_Tone_Start+0xc>)
 80a0d88:	681b      	ldr	r3, [r3, #0]
 80a0d8a:	681b      	ldr	r3, [r3, #0]
 80a0d8c:	9301      	str	r3, [sp, #4]
 80a0d8e:	bd08      	pop	{r3, pc}
 80a0d90:	080601a8 	.word	0x080601a8

080a0d94 <HAL_USB_USART_Init>:
#endif

DYNALIB_BEGIN(hal_usb)

#ifdef USB_CDC_ENABLE
DYNALIB_FN(0, hal_usb, HAL_USB_USART_Init, void(HAL_USB_USART_Serial, const HAL_USB_USART_Config*))
 80a0d94:	b508      	push	{r3, lr}
 80a0d96:	4b02      	ldr	r3, [pc, #8]	; (80a0da0 <HAL_USB_USART_Init+0xc>)
 80a0d98:	681b      	ldr	r3, [r3, #0]
 80a0d9a:	681b      	ldr	r3, [r3, #0]
 80a0d9c:	9301      	str	r3, [sp, #4]
 80a0d9e:	bd08      	pop	{r3, pc}
 80a0da0:	080601d8 	.word	0x080601d8

080a0da4 <HAL_USB_USART_Begin>:
DYNALIB_FN(1, hal_usb, HAL_USB_USART_Begin, void(HAL_USB_USART_Serial, uint32_t, void *))
 80a0da4:	b508      	push	{r3, lr}
 80a0da6:	4b02      	ldr	r3, [pc, #8]	; (80a0db0 <HAL_USB_USART_Begin+0xc>)
 80a0da8:	681b      	ldr	r3, [r3, #0]
 80a0daa:	685b      	ldr	r3, [r3, #4]
 80a0dac:	9301      	str	r3, [sp, #4]
 80a0dae:	bd08      	pop	{r3, pc}
 80a0db0:	080601d8 	.word	0x080601d8

080a0db4 <HAL_USB_USART_Available_Data>:
DYNALIB_FN(2, hal_usb, HAL_USB_USART_End, void(HAL_USB_USART_Serial))
DYNALIB_FN(3, hal_usb, HAL_USB_USART_Baud_Rate, unsigned int(HAL_USB_USART_Serial))
DYNALIB_FN(4, hal_usb, HAL_USB_USART_Available_Data, int32_t(HAL_USB_USART_Serial))
 80a0db4:	b508      	push	{r3, lr}
 80a0db6:	4b02      	ldr	r3, [pc, #8]	; (80a0dc0 <HAL_USB_USART_Available_Data+0xc>)
 80a0db8:	681b      	ldr	r3, [r3, #0]
 80a0dba:	691b      	ldr	r3, [r3, #16]
 80a0dbc:	9301      	str	r3, [sp, #4]
 80a0dbe:	bd08      	pop	{r3, pc}
 80a0dc0:	080601d8 	.word	0x080601d8

080a0dc4 <HAL_USB_USART_Available_Data_For_Write>:
DYNALIB_FN(5, hal_usb, HAL_USB_USART_Available_Data_For_Write, int32_t(HAL_USB_USART_Serial))
 80a0dc4:	b508      	push	{r3, lr}
 80a0dc6:	4b02      	ldr	r3, [pc, #8]	; (80a0dd0 <HAL_USB_USART_Available_Data_For_Write+0xc>)
 80a0dc8:	681b      	ldr	r3, [r3, #0]
 80a0dca:	695b      	ldr	r3, [r3, #20]
 80a0dcc:	9301      	str	r3, [sp, #4]
 80a0dce:	bd08      	pop	{r3, pc}
 80a0dd0:	080601d8 	.word	0x080601d8

080a0dd4 <HAL_USB_USART_Receive_Data>:
DYNALIB_FN(6, hal_usb, HAL_USB_USART_Receive_Data, int32_t(HAL_USB_USART_Serial, uint8_t))
 80a0dd4:	b508      	push	{r3, lr}
 80a0dd6:	4b02      	ldr	r3, [pc, #8]	; (80a0de0 <HAL_USB_USART_Receive_Data+0xc>)
 80a0dd8:	681b      	ldr	r3, [r3, #0]
 80a0dda:	699b      	ldr	r3, [r3, #24]
 80a0ddc:	9301      	str	r3, [sp, #4]
 80a0dde:	bd08      	pop	{r3, pc}
 80a0de0:	080601d8 	.word	0x080601d8

080a0de4 <HAL_USB_USART_Send_Data>:
DYNALIB_FN(7, hal_usb, HAL_USB_USART_Send_Data, int32_t(HAL_USB_USART_Serial, uint8_t))
 80a0de4:	b508      	push	{r3, lr}
 80a0de6:	4b02      	ldr	r3, [pc, #8]	; (80a0df0 <HAL_USB_USART_Send_Data+0xc>)
 80a0de8:	681b      	ldr	r3, [r3, #0]
 80a0dea:	69db      	ldr	r3, [r3, #28]
 80a0dec:	9301      	str	r3, [sp, #4]
 80a0dee:	bd08      	pop	{r3, pc}
 80a0df0:	080601d8 	.word	0x080601d8

080a0df4 <HAL_USB_USART_Flush_Data>:
DYNALIB_FN(8, hal_usb, HAL_USB_USART_Flush_Data, void(HAL_USB_USART_Serial))
 80a0df4:	b508      	push	{r3, lr}
 80a0df6:	4b02      	ldr	r3, [pc, #8]	; (80a0e00 <HAL_USB_USART_Flush_Data+0xc>)
 80a0df8:	681b      	ldr	r3, [r3, #0]
 80a0dfa:	6a1b      	ldr	r3, [r3, #32]
 80a0dfc:	9301      	str	r3, [sp, #4]
 80a0dfe:	bd08      	pop	{r3, pc}
 80a0e00:	080601d8 	.word	0x080601d8

080a0e04 <inet_gethostbyname>:
DYNALIB_FN(14, hal_wlan, wlan_set_error_count, void(uint32_t))
DYNALIB_FN(15, hal_wlan, wlan_fetch_ipconfig, int(WLanConfig*))
DYNALIB_FN(16, hal_wlan, wlan_setup, void(void))

DYNALIB_FN(17, hal_wlan, HAL_NET_SetNetWatchDog, uint32_t(uint32_t))
DYNALIB_FN(18, hal_wlan, inet_gethostbyname, int(const char*, uint16_t, HAL_IPAddress*, network_interface_t, void*))
 80a0e04:	b508      	push	{r3, lr}
 80a0e06:	4b02      	ldr	r3, [pc, #8]	; (80a0e10 <inet_gethostbyname+0xc>)
 80a0e08:	681b      	ldr	r3, [r3, #0]
 80a0e0a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80a0e0c:	9301      	str	r3, [sp, #4]
 80a0e0e:	bd08      	pop	{r3, pc}
 80a0e10:	080601c0 	.word	0x080601c0

080a0e14 <set_system_mode>:
#endif

DYNALIB_BEGIN(system)

DYNALIB_FN(0, system, system_mode, System_Mode_TypeDef(void))
DYNALIB_FN(1, system, set_system_mode, void(System_Mode_TypeDef))
 80a0e14:	b508      	push	{r3, lr}
 80a0e16:	4b02      	ldr	r3, [pc, #8]	; (80a0e20 <set_system_mode+0xc>)
 80a0e18:	681b      	ldr	r3, [r3, #0]
 80a0e1a:	685b      	ldr	r3, [r3, #4]
 80a0e1c:	9301      	str	r3, [sp, #4]
 80a0e1e:	bd08      	pop	{r3, pc}
 80a0e20:	080601a4 	.word	0x080601a4

080a0e24 <system_delay_ms>:

DYNALIB_FN(2, system, set_ymodem_serial_flash_update_handler, void(ymodem_serial_flash_update_handler))
DYNALIB_FN(3, system, system_firmwareUpdate, bool(Stream*, void*))
DYNALIB_FN(4, system, system_fileTransfer, bool(system_file_transfer_t*, void*))

DYNALIB_FN(5, system, system_delay_ms, void(unsigned long, bool))
 80a0e24:	b508      	push	{r3, lr}
 80a0e26:	4b02      	ldr	r3, [pc, #8]	; (80a0e30 <system_delay_ms+0xc>)
 80a0e28:	681b      	ldr	r3, [r3, #0]
 80a0e2a:	695b      	ldr	r3, [r3, #20]
 80a0e2c:	9301      	str	r3, [sp, #4]
 80a0e2e:	bd08      	pop	{r3, pc}
 80a0e30:	080601a4 	.word	0x080601a4

080a0e34 <application_thread_current>:
DYNALIB_FN(15, system, system_get_flag, int(system_flag_t, uint8_t*, void*))
DYNALIB_FN(16, system, Spark_Prepare_For_Firmware_Update, int(FileTransfer::Descriptor&, uint32_t, void*))
DYNALIB_FN(17, system, Spark_Save_Firmware_Chunk, int(FileTransfer::Descriptor&, const uint8_t*, void*))
DYNALIB_FN(18, system, Spark_Finish_Firmware_Update, int(FileTransfer::Descriptor&, uint32_t, void*))

DYNALIB_FN(19, system, application_thread_current, uint8_t(void*))
 80a0e34:	b508      	push	{r3, lr}
 80a0e36:	4b02      	ldr	r3, [pc, #8]	; (80a0e40 <application_thread_current+0xc>)
 80a0e38:	681b      	ldr	r3, [r3, #0]
 80a0e3a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80a0e3c:	9301      	str	r3, [sp, #4]
 80a0e3e:	bd08      	pop	{r3, pc}
 80a0e40:	080601a4 	.word	0x080601a4

080a0e44 <application_thread_invoke>:
DYNALIB_FN(20, system, system_thread_current, uint8_t(void*))
DYNALIB_FN(21, system, application_thread_invoke, uint8_t(void(*)(void*), void*, void*))
 80a0e44:	b508      	push	{r3, lr}
 80a0e46:	4b02      	ldr	r3, [pc, #8]	; (80a0e50 <application_thread_invoke+0xc>)
 80a0e48:	681b      	ldr	r3, [r3, #0]
 80a0e4a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80a0e4c:	9301      	str	r3, [sp, #4]
 80a0e4e:	bd08      	pop	{r3, pc}
 80a0e50:	080601a4 	.word	0x080601a4

080a0e54 <system_ctrl_set_app_request_handler>:
DYNALIB_FN(BASE_IDX + 6, system, led_pattern_period, uint16_t(int, int, void*))
DYNALIB_FN(BASE_IDX + 7, system, system_set_tester_handlers, int(system_tester_handlers_t*, void*))
DYNALIB_FN(BASE_IDX + 8, system, system_format_diag_data, int(const uint16_t*, size_t, unsigned, appender_fn, void*, void*))

// Control requests
DYNALIB_FN(BASE_IDX + 9, system, system_ctrl_set_app_request_handler, int(ctrl_request_handler_fn, void*))
 80a0e54:	b508      	push	{r3, lr}
 80a0e56:	4b03      	ldr	r3, [pc, #12]	; (80a0e64 <system_ctrl_set_app_request_handler+0x10>)
 80a0e58:	681b      	ldr	r3, [r3, #0]
 80a0e5a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80a0e5e:	9301      	str	r3, [sp, #4]
 80a0e60:	bd08      	pop	{r3, pc}
 80a0e62:	0000      	.short	0x0000
 80a0e64:	080601a4 	.word	0x080601a4

080a0e68 <system_ctrl_set_result>:
DYNALIB_FN(BASE_IDX + 10, system, system_ctrl_alloc_reply_data, int(ctrl_request*, size_t, void*))
DYNALIB_FN(BASE_IDX + 11, system, system_ctrl_free_request_data, void(ctrl_request*, void*))
DYNALIB_FN(BASE_IDX + 12, system, system_ctrl_set_result, void(ctrl_request*, int, ctrl_completion_handler_fn, void*, void*))
 80a0e68:	b508      	push	{r3, lr}
 80a0e6a:	4b03      	ldr	r3, [pc, #12]	; (80a0e78 <system_ctrl_set_result+0x10>)
 80a0e6c:	681b      	ldr	r3, [r3, #0]
 80a0e6e:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80a0e72:	9301      	str	r3, [sp, #4]
 80a0e74:	bd08      	pop	{r3, pc}
 80a0e76:	0000      	.short	0x0000
 80a0e78:	080601a4 	.word	0x080601a4

080a0e7c <network_connect>:
#endif

DYNALIB_BEGIN(system_net)

DYNALIB_FN(0, system_net, network_config, const void*(network_handle_t, uint32_t, void*))
DYNALIB_FN(1, system_net, network_connect, void(network_handle_t, uint32_t, uint32_t, void*))
 80a0e7c:	b508      	push	{r3, lr}
 80a0e7e:	4b02      	ldr	r3, [pc, #8]	; (80a0e88 <network_connect+0xc>)
 80a0e80:	681b      	ldr	r3, [r3, #0]
 80a0e82:	685b      	ldr	r3, [r3, #4]
 80a0e84:	9301      	str	r3, [sp, #4]
 80a0e86:	bd08      	pop	{r3, pc}
 80a0e88:	080601c8 	.word	0x080601c8

080a0e8c <network_connecting>:
DYNALIB_FN(2, system_net, network_connecting, bool(network_handle_t, uint32_t, void*))
 80a0e8c:	b508      	push	{r3, lr}
 80a0e8e:	4b02      	ldr	r3, [pc, #8]	; (80a0e98 <network_connecting+0xc>)
 80a0e90:	681b      	ldr	r3, [r3, #0]
 80a0e92:	689b      	ldr	r3, [r3, #8]
 80a0e94:	9301      	str	r3, [sp, #4]
 80a0e96:	bd08      	pop	{r3, pc}
 80a0e98:	080601c8 	.word	0x080601c8

080a0e9c <network_disconnect>:
DYNALIB_FN(3, system_net, network_disconnect, void(network_handle_t, uint32_t, void*))
 80a0e9c:	b508      	push	{r3, lr}
 80a0e9e:	4b02      	ldr	r3, [pc, #8]	; (80a0ea8 <network_disconnect+0xc>)
 80a0ea0:	681b      	ldr	r3, [r3, #0]
 80a0ea2:	68db      	ldr	r3, [r3, #12]
 80a0ea4:	9301      	str	r3, [sp, #4]
 80a0ea6:	bd08      	pop	{r3, pc}
 80a0ea8:	080601c8 	.word	0x080601c8

080a0eac <network_ready>:
DYNALIB_FN(4, system_net, network_ready, bool(network_handle_t, uint32_t, void*))
 80a0eac:	b508      	push	{r3, lr}
 80a0eae:	4b02      	ldr	r3, [pc, #8]	; (80a0eb8 <network_ready+0xc>)
 80a0eb0:	681b      	ldr	r3, [r3, #0]
 80a0eb2:	691b      	ldr	r3, [r3, #16]
 80a0eb4:	9301      	str	r3, [sp, #4]
 80a0eb6:	bd08      	pop	{r3, pc}
 80a0eb8:	080601c8 	.word	0x080601c8

080a0ebc <network_on>:
DYNALIB_FN(5, system_net, network_on, void(network_handle_t, uint32_t, uint32_t, void*))
 80a0ebc:	b508      	push	{r3, lr}
 80a0ebe:	4b02      	ldr	r3, [pc, #8]	; (80a0ec8 <network_on+0xc>)
 80a0ec0:	681b      	ldr	r3, [r3, #0]
 80a0ec2:	695b      	ldr	r3, [r3, #20]
 80a0ec4:	9301      	str	r3, [sp, #4]
 80a0ec6:	bd08      	pop	{r3, pc}
 80a0ec8:	080601c8 	.word	0x080601c8

080a0ecc <network_off>:
DYNALIB_FN(6, system_net, network_off, void(network_handle_t, uint32_t, uint32_t, void*))
 80a0ecc:	b508      	push	{r3, lr}
 80a0ece:	4b02      	ldr	r3, [pc, #8]	; (80a0ed8 <network_off+0xc>)
 80a0ed0:	681b      	ldr	r3, [r3, #0]
 80a0ed2:	699b      	ldr	r3, [r3, #24]
 80a0ed4:	9301      	str	r3, [sp, #4]
 80a0ed6:	bd08      	pop	{r3, pc}
 80a0ed8:	080601c8 	.word	0x080601c8

080a0edc <network_listen>:
DYNALIB_FN(7, system_net, network_listen, void(network_handle_t, uint32_t, void*))
 80a0edc:	b508      	push	{r3, lr}
 80a0ede:	4b02      	ldr	r3, [pc, #8]	; (80a0ee8 <network_listen+0xc>)
 80a0ee0:	681b      	ldr	r3, [r3, #0]
 80a0ee2:	69db      	ldr	r3, [r3, #28]
 80a0ee4:	9301      	str	r3, [sp, #4]
 80a0ee6:	bd08      	pop	{r3, pc}
 80a0ee8:	080601c8 	.word	0x080601c8

080a0eec <network_listening>:
DYNALIB_FN(8, system_net, network_listening, bool(network_handle_t, uint32_t, void*))
 80a0eec:	b508      	push	{r3, lr}
 80a0eee:	4b02      	ldr	r3, [pc, #8]	; (80a0ef8 <network_listening+0xc>)
 80a0ef0:	681b      	ldr	r3, [r3, #0]
 80a0ef2:	6a1b      	ldr	r3, [r3, #32]
 80a0ef4:	9301      	str	r3, [sp, #4]
 80a0ef6:	bd08      	pop	{r3, pc}
 80a0ef8:	080601c8 	.word	0x080601c8

080a0efc <network_set_listen_timeout>:
DYNALIB_FN(9, system_net, network_has_credentials, bool(network_handle_t, uint32_t, void*))
DYNALIB_FN(10, system_net, network_set_credentials, int(network_handle_t, uint32_t, NetworkCredentials*, void*))
DYNALIB_FN(11, system_net, network_clear_credentials, bool(network_handle_t, uint32_t, NetworkCredentials*, void*))
DYNALIB_FN(12, system_net, network_set_listen_timeout, void(network_handle_t, uint16_t, void*))
 80a0efc:	b508      	push	{r3, lr}
 80a0efe:	4b02      	ldr	r3, [pc, #8]	; (80a0f08 <network_set_listen_timeout+0xc>)
 80a0f00:	681b      	ldr	r3, [r3, #0]
 80a0f02:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80a0f04:	9301      	str	r3, [sp, #4]
 80a0f06:	bd08      	pop	{r3, pc}
 80a0f08:	080601c8 	.word	0x080601c8

080a0f0c <network_get_listen_timeout>:
DYNALIB_FN(13, system_net, network_get_listen_timeout, uint16_t(network_handle_t, uint32_t, void*))
 80a0f0c:	b508      	push	{r3, lr}
 80a0f0e:	4b02      	ldr	r3, [pc, #8]	; (80a0f18 <network_get_listen_timeout+0xc>)
 80a0f10:	681b      	ldr	r3, [r3, #0]
 80a0f12:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80a0f14:	9301      	str	r3, [sp, #4]
 80a0f16:	bd08      	pop	{r3, pc}
 80a0f18:	080601c8 	.word	0x080601c8

080a0f1c <spark_cloud_flag_connected>:
DYNALIB_FN(0, system_cloud, spark_variable, bool(const char*, const void*, Spark_Data_TypeDef, spark_variable_t*))
DYNALIB_FN(1, system_cloud, spark_function, bool(const char*, p_user_function_int_str_t, void*))
DYNALIB_FN(2, system_cloud, spark_process, void(void))
DYNALIB_FN(3, system_cloud, spark_cloud_flag_connect, void(void))
DYNALIB_FN(4, system_cloud, spark_cloud_flag_disconnect, void(void))
DYNALIB_FN(5, system_cloud, spark_cloud_flag_connected, bool(void))
 80a0f1c:	b508      	push	{r3, lr}
 80a0f1e:	4b02      	ldr	r3, [pc, #8]	; (80a0f28 <spark_cloud_flag_connected+0xc>)
 80a0f20:	681b      	ldr	r3, [r3, #0]
 80a0f22:	695b      	ldr	r3, [r3, #20]
 80a0f24:	9301      	str	r3, [sp, #4]
 80a0f26:	bd08      	pop	{r3, pc}
 80a0f28:	080601cc 	.word	0x080601cc

080a0f2c <spark_send_event>:
DYNALIB_FN(6, system_cloud, system_cloud_protocol_instance, ProtocolFacade*(void))
DYNALIB_FN(7, system_cloud, spark_deviceID, String(void))
DYNALIB_FN(8, system_cloud, spark_send_event, bool(const char*, const char*, int, uint32_t, void*))
 80a0f2c:	b508      	push	{r3, lr}
 80a0f2e:	4b02      	ldr	r3, [pc, #8]	; (80a0f38 <spark_send_event+0xc>)
 80a0f30:	681b      	ldr	r3, [r3, #0]
 80a0f32:	6a1b      	ldr	r3, [r3, #32]
 80a0f34:	9301      	str	r3, [sp, #4]
 80a0f36:	bd08      	pop	{r3, pc}
 80a0f38:	080601cc 	.word	0x080601cc

080a0f3c <spark_set_random_seed_from_cloud_handler>:
DYNALIB_FN(10, system_cloud, spark_unsubscribe, void(void*))
DYNALIB_FN(11, system_cloud, spark_sync_time, bool(void*))
DYNALIB_FN(12, system_cloud, spark_sync_time_pending, bool(void*))
DYNALIB_FN(13, system_cloud, spark_sync_time_last, system_tick_t(time32_t*, time_t*))
DYNALIB_FN(14, system_cloud, spark_set_connection_property, int(unsigned, unsigned, const void*, void*))
DYNALIB_FN(15, system_cloud, spark_set_random_seed_from_cloud_handler, int(void (*handler)(unsigned int), void*))
 80a0f3c:	b508      	push	{r3, lr}
 80a0f3e:	4b02      	ldr	r3, [pc, #8]	; (80a0f48 <spark_set_random_seed_from_cloud_handler+0xc>)
 80a0f40:	681b      	ldr	r3, [r3, #0]
 80a0f42:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80a0f44:	9301      	str	r3, [sp, #4]
 80a0f46:	bd08      	pop	{r3, pc}
 80a0f48:	080601cc 	.word	0x080601cc

080a0f4c <malloc>:
#include "hal_platform.h"
#endif // defined(DYNALIB_EXPORT) || (defined(DYNALIB_IMPORT) && !defined(RT_DYNALIB_NO_DEPENDENCY_BREAKING_IMPORTS))

DYNALIB_BEGIN(rt)

DYNALIB_FN(0, rt, malloc, void*(size_t))
 80a0f4c:	b508      	push	{r3, lr}
 80a0f4e:	4b02      	ldr	r3, [pc, #8]	; (80a0f58 <malloc+0xc>)
 80a0f50:	681b      	ldr	r3, [r3, #0]
 80a0f52:	681b      	ldr	r3, [r3, #0]
 80a0f54:	9301      	str	r3, [sp, #4]
 80a0f56:	bd08      	pop	{r3, pc}
 80a0f58:	080601a0 	.word	0x080601a0

080a0f5c <free>:
DYNALIB_FN(1, rt, free, void(void*))
 80a0f5c:	b508      	push	{r3, lr}
 80a0f5e:	4b02      	ldr	r3, [pc, #8]	; (80a0f68 <free+0xc>)
 80a0f60:	681b      	ldr	r3, [r3, #0]
 80a0f62:	685b      	ldr	r3, [r3, #4]
 80a0f64:	9301      	str	r3, [sp, #4]
 80a0f66:	bd08      	pop	{r3, pc}
 80a0f68:	080601a0 	.word	0x080601a0

080a0f6c <realloc>:
DYNALIB_FN(2, rt, realloc, void*(void*, size_t))
 80a0f6c:	b508      	push	{r3, lr}
 80a0f6e:	4b02      	ldr	r3, [pc, #8]	; (80a0f78 <realloc+0xc>)
 80a0f70:	681b      	ldr	r3, [r3, #0]
 80a0f72:	689b      	ldr	r3, [r3, #8]
 80a0f74:	9301      	str	r3, [sp, #4]
 80a0f76:	bd08      	pop	{r3, pc}
 80a0f78:	080601a0 	.word	0x080601a0

080a0f7c <vsnprintf>:
DYNALIB_FN(4, rt, siprintf, int(char*, const char*, ...))
DYNALIB_FN(5, rt, sscanf, int(const char*, const char*, ...))
DYNALIB_FN(6, rt, siscanf, int(const char*, const char*, ...))
DYNALIB_FN(7, rt, snprintf, int(char*, size_t, const char*, ...))
DYNALIB_FN(8, rt, sniprintf, int(char*, size_t, const char*, ...))
DYNALIB_FN(9, rt, vsnprintf, int(char*, size_t, const char*, va_list))
 80a0f7c:	b508      	push	{r3, lr}
 80a0f7e:	4b02      	ldr	r3, [pc, #8]	; (80a0f88 <vsnprintf+0xc>)
 80a0f80:	681b      	ldr	r3, [r3, #0]
 80a0f82:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80a0f84:	9301      	str	r3, [sp, #4]
 80a0f86:	bd08      	pop	{r3, pc}
 80a0f88:	080601a0 	.word	0x080601a0

080a0f8c <abort>:
DYNALIB_FN(10, rt, vsniprintf, int(char*, size_t, const char*, va_list))
DYNALIB_FN(11, rt, abort, void(void))
 80a0f8c:	b508      	push	{r3, lr}
 80a0f8e:	4b02      	ldr	r3, [pc, #8]	; (80a0f98 <abort+0xc>)
 80a0f90:	681b      	ldr	r3, [r3, #0]
 80a0f92:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80a0f94:	9301      	str	r3, [sp, #4]
 80a0f96:	bd08      	pop	{r3, pc}
 80a0f98:	080601a0 	.word	0x080601a0

080a0f9c <_malloc_r>:
DYNALIB_FN(12, rt, _malloc_r, void*(struct _reent*, size_t))
 80a0f9c:	b508      	push	{r3, lr}
 80a0f9e:	4b02      	ldr	r3, [pc, #8]	; (80a0fa8 <_malloc_r+0xc>)
 80a0fa0:	681b      	ldr	r3, [r3, #0]
 80a0fa2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80a0fa4:	9301      	str	r3, [sp, #4]
 80a0fa6:	bd08      	pop	{r3, pc}
 80a0fa8:	080601a0 	.word	0x080601a0

080a0fac <newlib_impure_ptr_callback>:
// RT is currently being imported into system-part1 from system-part2,
// which is the reverse direction.

#if defined(DYNALIB_EXPORT) || (defined(DYNALIB_IMPORT) && !defined(RT_DYNALIB_NO_DEPENDENCY_BREAKING_IMPORTS))
DYNALIB_FN(16, rt, __assert_func, void(const char*, int, const char*, const char*))
DYNALIB_FN(17, rt, newlib_impure_ptr_callback, void(void (*)(struct _reent*, size_t, uint32_t, void*), void*))
 80a0fac:	b508      	push	{r3, lr}
 80a0fae:	4b02      	ldr	r3, [pc, #8]	; (80a0fb8 <newlib_impure_ptr_callback+0xc>)
 80a0fb0:	681b      	ldr	r3, [r3, #0]
 80a0fb2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80a0fb4:	9301      	str	r3, [sp, #4]
 80a0fb6:	bd08      	pop	{r3, pc}
 80a0fb8:	080601a0 	.word	0x080601a0

080a0fbc <_ZN8SPIClassC1E19hal_spi_interface_t>:
    }
    return particle::SPISettings(info->clock, info->bit_order, info->data_mode);
}
} // namespace

SPIClass::SPIClass(hal_spi_interface_t spi)
 80a0fbc:	b570      	push	{r4, r5, r6, lr}
    /**
     * Creates a shared mutex.
     */
    RecursiveMutex(os_mutex_recursive_t handle) : handle_(handle) {}

    RecursiveMutex() : handle_(nullptr)
 80a0fbe:	2600      	movs	r6, #0
 80a0fc0:	4604      	mov	r4, r0
 80a0fc2:	460d      	mov	r5, r1
 80a0fc4:	f840 6f08 	str.w	r6, [r0, #8]!
    {
        os_mutex_recursive_create(&handle_);
 80a0fc8:	f7ff fe42 	bl	80a0c50 <os_mutex_recursive_create>
{
    _spi = spi;
    hal_spi_init(_spi);
 80a0fcc:	4628      	mov	r0, r5
    _spi = spi;
 80a0fce:	7025      	strb	r5, [r4, #0]
    hal_spi_init(_spi);
 80a0fd0:	f7ff fec8 	bl	80a0d64 <hal_spi_init>
    _dividerReference = SPI_CLK_SYSTEM; // 0 indicates the system clock
}
 80a0fd4:	4620      	mov	r0, r4
    _dividerReference = SPI_CLK_SYSTEM; // 0 indicates the system clock
 80a0fd6:	6066      	str	r6, [r4, #4]
}
 80a0fd8:	bd70      	pop	{r4, r5, r6, pc}

080a0fda <_ZN17SystemSleepResult22freeWakeupSourceMemoryEv.isra.0>:
    operator SleepResult() {
        return toSleepResult();
    }

private:
    void freeWakeupSourceMemory() {
 80a0fda:	b510      	push	{r4, lr}
 80a0fdc:	4604      	mov	r4, r0
        if (wakeupSource_) {
 80a0fde:	6800      	ldr	r0, [r0, #0]
 80a0fe0:	b118      	cbz	r0, 80a0fea <_ZN17SystemSleepResult22freeWakeupSourceMemoryEv.isra.0+0x10>
            free(wakeupSource_);
 80a0fe2:	f7ff ffbb 	bl	80a0f5c <free>
            wakeupSource_ = nullptr;
 80a0fe6:	2300      	movs	r3, #0
 80a0fe8:	6023      	str	r3, [r4, #0]
        }
    }
 80a0fea:	bd10      	pop	{r4, pc}

080a0fec <_ZN11SystemClassD1Ev>:
    system_error_t error_;
    SleepResult compatResult_;
};


class SystemClass {
 80a0fec:	b510      	push	{r4, lr}
 80a0fee:	4604      	mov	r4, r0
        freeWakeupSourceMemory();
 80a0ff0:	f7ff fff3 	bl	80a0fda <_ZN17SystemSleepResult22freeWakeupSourceMemoryEv.isra.0>
class SystemClass {
 80a0ff4:	4620      	mov	r0, r4
 80a0ff6:	bd10      	pop	{r4, pc}

080a0ff8 <_GLOBAL__sub_I_System>:
} // namespace particle

// particle::Flag<TagT, ValueT>
template<typename TagT, typename ValueT>
inline particle::Flag<TagT, ValueT>::Flag(ValueT val) :
        val_(val) {
 80a0ff8:	2202      	movs	r2, #2
              error_(SYSTEM_ERROR_NONE) {
 80a0ffa:	2000      	movs	r0, #0
    return wokenUpByRtc();
}

system_error_t SleepResult::error() const {
    return err_;
 80a0ffc:	b510      	push	{r4, lr}
 80a0ffe:	4b08      	ldr	r3, [pc, #32]	; (80a1020 <_GLOBAL__sub_I_System+0x28>)
 80a1000:	4c08      	ldr	r4, [pc, #32]	; (80a1024 <_GLOBAL__sub_I_System+0x2c>)
 80a1002:	601a      	str	r2, [r3, #0]
    SleepResult() {}
 80a1004:	4b08      	ldr	r3, [pc, #32]	; (80a1028 <_GLOBAL__sub_I_System+0x30>)
              error_(SYSTEM_ERROR_NONE) {
 80a1006:	6020      	str	r0, [r4, #0]
 80a1008:	80a0      	strh	r0, [r4, #4]
    SleepResult() {}
 80a100a:	71a0      	strb	r0, [r4, #6]
 80a100c:	60a3      	str	r3, [r4, #8]
public:

    SystemClass(System_Mode_TypeDef mode = DEFAULT) {
        set_system_mode(mode);
 80a100e:	f7ff ff01 	bl	80a0e14 <set_system_mode>
SystemClass System;
 80a1012:	4620      	mov	r0, r4
 80a1014:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
SystemClass System;
 80a1018:	4a04      	ldr	r2, [pc, #16]	; (80a102c <_GLOBAL__sub_I_System+0x34>)
 80a101a:	4905      	ldr	r1, [pc, #20]	; (80a1030 <_GLOBAL__sub_I_System+0x38>)
 80a101c:	f001 b986 	b.w	80a232c <__aeabi_atexit>
 80a1020:	200000d4 	.word	0x200000d4
 80a1024:	200000c8 	.word	0x200000c8
 80a1028:	ffff0000 	.word	0xffff0000
 80a102c:	2000006c 	.word	0x2000006c
 80a1030:	080a0fed 	.word	0x080a0fed

080a1034 <_Z11str_reversePc>:

//------------------------------------------------------------------------------------------
#define BUFSIZE (sizeof(long) * 8 + 1)

//utility function used by ultoa()
__attribute__((weak)) void str_reverse(char* buffer){
 80a1034:	b510      	push	{r4, lr}
 80a1036:	4604      	mov	r4, r0
	char *i, *j;
	char c;
	i=buffer;
	j=buffer + strlen(buffer)-1;
 80a1038:	f001 fe7f 	bl	80a2d3a <strlen>
 80a103c:	1e43      	subs	r3, r0, #1
 80a103e:	4620      	mov	r0, r4
 80a1040:	4423      	add	r3, r4
	while(i<j){
 80a1042:	4283      	cmp	r3, r0
 80a1044:	d906      	bls.n	80a1054 <_Z11str_reversePc+0x20>
		c = *i;
 80a1046:	7802      	ldrb	r2, [r0, #0]
		*i = *j;
 80a1048:	7819      	ldrb	r1, [r3, #0]
 80a104a:	f800 1b01 	strb.w	r1, [r0], #1
		*j = c;
 80a104e:	f803 2901 	strb.w	r2, [r3], #-1
	while(i<j){
 80a1052:	e7f6      	b.n	80a1042 <_Z11str_reversePc+0xe>
		++i;
		--j;
	}
}
 80a1054:	bd10      	pop	{r4, pc}

080a1056 <ultoa>:
      memcpy(head, ++tail, i);
      return str;
}

//convert unsigned long to string
__attribute__((weak)) char* ultoa(unsigned long a, char* buffer, int radix, char pad){
 80a1056:	b570      	push	{r4, r5, r6, lr}
 80a1058:	460c      	mov	r4, r1
	if(radix<2 || radix>36){
 80a105a:	1e91      	subs	r1, r2, #2
 80a105c:	2922      	cmp	r1, #34	; 0x22
 80a105e:	d822      	bhi.n	80a10a6 <ultoa+0x50>
		return NULL;
	}
	char* ptr=buffer;
 80a1060:	4625      	mov	r5, r4

	div_t result;
	while(a){
 80a1062:	b168      	cbz	r0, 80a1080 <ultoa+0x2a>
            /* toolchain bug??
            result = div(a, radix);
            */
            result.quot = a/radix;
 80a1064:	fbb0 f6f2 	udiv	r6, r0, r2
            result.rem = a%radix;
 80a1068:	fb02 0016 	mls	r0, r2, r6, r0
            *ptr = result.rem;
 80a106c:	b2c1      	uxtb	r1, r0
            if(result.rem<10){
 80a106e:	2809      	cmp	r0, #9
                *ptr += '0';
 80a1070:	bf94      	ite	ls
 80a1072:	3130      	addls	r1, #48	; 0x30
            }else{
                *ptr += 'a'-10;
 80a1074:	3157      	addhi	r1, #87	; 0x57
 80a1076:	b2c9      	uxtb	r1, r1
            }
            ++ptr;
            a = result.quot;
 80a1078:	4630      	mov	r0, r6
 80a107a:	f805 1b01 	strb.w	r1, [r5], #1
	while(a){
 80a107e:	e7f0      	b.n	80a1062 <ultoa+0xc>
 80a1080:	462a      	mov	r2, r5
	}
        while (ptr < buffer+pad)
            *ptr++ = '0';
 80a1082:	2130      	movs	r1, #48	; 0x30
        while (ptr < buffer+pad)
 80a1084:	4423      	add	r3, r4
 80a1086:	4293      	cmp	r3, r2
 80a1088:	d902      	bls.n	80a1090 <ultoa+0x3a>
            *ptr++ = '0';
 80a108a:	f802 1b01 	strb.w	r1, [r2], #1
        while (ptr < buffer+pad)
 80a108e:	e7fa      	b.n	80a1086 <ultoa+0x30>
 80a1090:	1b5a      	subs	r2, r3, r5
 80a1092:	42ab      	cmp	r3, r5
 80a1094:	bf38      	it	cc
 80a1096:	2200      	movcc	r2, #0

	*ptr = '\0';
 80a1098:	2300      	movs	r3, #0
	str_reverse(buffer);
 80a109a:	4620      	mov	r0, r4
	*ptr = '\0';
 80a109c:	54ab      	strb	r3, [r5, r2]
	str_reverse(buffer);
 80a109e:	f7ff ffc9 	bl	80a1034 <_Z11str_reversePc>
	return buffer;
 80a10a2:	4620      	mov	r0, r4
}
 80a10a4:	bd70      	pop	{r4, r5, r6, pc}
		return NULL;
 80a10a6:	2000      	movs	r0, #0
 80a10a8:	e7fc      	b.n	80a10a4 <ultoa+0x4e>

080a10aa <itoa>:

__attribute__((weak)) char* itoa(int a, char* buffer, int radix){
 80a10aa:	b538      	push	{r3, r4, r5, lr}
	if(a<0){
 80a10ac:	1e03      	subs	r3, r0, #0
__attribute__((weak)) char* itoa(int a, char* buffer, int radix){
 80a10ae:	460c      	mov	r4, r1
 80a10b0:	4615      	mov	r5, r2
	if(a<0){
 80a10b2:	da0d      	bge.n	80a10d0 <itoa+0x26>
		*buffer = '-';
 80a10b4:	222d      	movs	r2, #45	; 0x2d
		unsigned v = a==INT_MIN ? ((unsigned)INT_MAX+1) : -a;
 80a10b6:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80a10ba:	bf0c      	ite	eq
 80a10bc:	4618      	moveq	r0, r3
 80a10be:	4258      	negne	r0, r3
		ultoa((unsigned)v, buffer + 1, radix);
 80a10c0:	2301      	movs	r3, #1
		*buffer = '-';
 80a10c2:	700a      	strb	r2, [r1, #0]
		ultoa((unsigned)v, buffer + 1, radix);
 80a10c4:	462a      	mov	r2, r5
 80a10c6:	4419      	add	r1, r3
	}else{
		ultoa(a, buffer, radix);
 80a10c8:	f7ff ffc5 	bl	80a1056 <ultoa>
	}
	return buffer;
}
 80a10cc:	4620      	mov	r0, r4
 80a10ce:	bd38      	pop	{r3, r4, r5, pc}
		ultoa(a, buffer, radix);
 80a10d0:	2301      	movs	r3, #1
 80a10d2:	e7f9      	b.n	80a10c8 <itoa+0x1e>

080a10d4 <_ZN6StringD1Ev>:
	init();
	char buf[33];
	dtoa(value, decimalPlaces, buf);
        *this = buf;
}
String::~String()
 80a10d4:	b510      	push	{r4, lr}
 80a10d6:	4604      	mov	r4, r0
{
	free(buffer);
 80a10d8:	6800      	ldr	r0, [r0, #0]
 80a10da:	f7ff ff3f 	bl	80a0f5c <free>
}
 80a10de:	4620      	mov	r0, r4
 80a10e0:	bd10      	pop	{r4, pc}

080a10e2 <_ZN6String10invalidateEv>:
	len = 0;
	flags = 0;
}

void String::invalidate(void)
{
 80a10e2:	b510      	push	{r4, lr}
 80a10e4:	4604      	mov	r4, r0
	if (buffer) free(buffer);
 80a10e6:	6800      	ldr	r0, [r0, #0]
 80a10e8:	b108      	cbz	r0, 80a10ee <_ZN6String10invalidateEv+0xc>
 80a10ea:	f7ff ff37 	bl	80a0f5c <free>
	buffer = NULL;
 80a10ee:	2300      	movs	r3, #0
	capacity = len = 0;
 80a10f0:	e9c4 3301 	strd	r3, r3, [r4, #4]
	buffer = NULL;
 80a10f4:	6023      	str	r3, [r4, #0]
}
 80a10f6:	bd10      	pop	{r4, pc}

080a10f8 <_ZN6String12changeBufferEj>:
	}
	return 0;
}

unsigned char String::changeBuffer(unsigned int maxStrLen)
{
 80a10f8:	b538      	push	{r3, r4, r5, lr}
 80a10fa:	4604      	mov	r4, r0
 80a10fc:	460d      	mov	r5, r1
	char *newbuffer = (char *)realloc(buffer, maxStrLen + 1);
 80a10fe:	6800      	ldr	r0, [r0, #0]
 80a1100:	3101      	adds	r1, #1
 80a1102:	f7ff ff33 	bl	80a0f6c <realloc>
	if (newbuffer) {
 80a1106:	b110      	cbz	r0, 80a110e <_ZN6String12changeBufferEj+0x16>
		buffer = newbuffer;
		capacity = maxStrLen;
 80a1108:	e9c4 0500 	strd	r0, r5, [r4]
		return 1;
 80a110c:	2001      	movs	r0, #1
	}
	return 0;
}
 80a110e:	bd38      	pop	{r3, r4, r5, pc}

080a1110 <_ZN6String7reserveEj>:
{
 80a1110:	b510      	push	{r4, lr}
	if (buffer && capacity >= size) return 1;
 80a1112:	6803      	ldr	r3, [r0, #0]
{
 80a1114:	4604      	mov	r4, r0
	if (buffer && capacity >= size) return 1;
 80a1116:	b123      	cbz	r3, 80a1122 <_ZN6String7reserveEj+0x12>
 80a1118:	6843      	ldr	r3, [r0, #4]
 80a111a:	428b      	cmp	r3, r1
 80a111c:	d301      	bcc.n	80a1122 <_ZN6String7reserveEj+0x12>
 80a111e:	2001      	movs	r0, #1
}
 80a1120:	bd10      	pop	{r4, pc}
	if (changeBuffer(size)) {
 80a1122:	4620      	mov	r0, r4
 80a1124:	f7ff ffe8 	bl	80a10f8 <_ZN6String12changeBufferEj>
 80a1128:	2800      	cmp	r0, #0
 80a112a:	d0f9      	beq.n	80a1120 <_ZN6String7reserveEj+0x10>
		if (len == 0) buffer[0] = 0;
 80a112c:	68a3      	ldr	r3, [r4, #8]
 80a112e:	2b00      	cmp	r3, #0
 80a1130:	d1f5      	bne.n	80a111e <_ZN6String7reserveEj+0xe>
 80a1132:	6822      	ldr	r2, [r4, #0]
 80a1134:	7013      	strb	r3, [r2, #0]
 80a1136:	e7f2      	b.n	80a111e <_ZN6String7reserveEj+0xe>

080a1138 <_ZN6String4copyEPKcj>:
/*********************************************/
/*  Copy and Move                            */
/*********************************************/

String & String::copy(const char *cstr, unsigned int length)
{
 80a1138:	b570      	push	{r4, r5, r6, lr}
 80a113a:	460e      	mov	r6, r1
	if (!reserve(length)) {
 80a113c:	4611      	mov	r1, r2
{
 80a113e:	4604      	mov	r4, r0
 80a1140:	4615      	mov	r5, r2
	if (!reserve(length)) {
 80a1142:	f7ff ffe5 	bl	80a1110 <_ZN6String7reserveEj>
 80a1146:	b920      	cbnz	r0, 80a1152 <_ZN6String4copyEPKcj+0x1a>
		invalidate();
 80a1148:	4620      	mov	r0, r4
 80a114a:	f7ff ffca 	bl	80a10e2 <_ZN6String10invalidateEv>
	}
	len = length;
	memcpy(buffer, cstr, length);
	buffer[len] = 0;
	return *this;
}
 80a114e:	4620      	mov	r0, r4
 80a1150:	bd70      	pop	{r4, r5, r6, pc}
	memcpy(buffer, cstr, length);
 80a1152:	462a      	mov	r2, r5
 80a1154:	4631      	mov	r1, r6
 80a1156:	6820      	ldr	r0, [r4, #0]
	len = length;
 80a1158:	60a5      	str	r5, [r4, #8]
	memcpy(buffer, cstr, length);
 80a115a:	f001 fd91 	bl	80a2c80 <memcpy>
	buffer[len] = 0;
 80a115e:	2100      	movs	r1, #0
 80a1160:	6822      	ldr	r2, [r4, #0]
 80a1162:	68a3      	ldr	r3, [r4, #8]
 80a1164:	54d1      	strb	r1, [r2, r3]
	return *this;
 80a1166:	e7f2      	b.n	80a114e <_ZN6String4copyEPKcj+0x16>

080a1168 <_ZN6StringC1EPKc>:
String::String(const char *cstr)
 80a1168:	b538      	push	{r3, r4, r5, lr}
	buffer = NULL;
 80a116a:	2300      	movs	r3, #0
String::String(const char *cstr)
 80a116c:	4604      	mov	r4, r0
	if (cstr) copy(cstr, strlen(cstr));
 80a116e:	460d      	mov	r5, r1
	capacity = 0;
 80a1170:	e9c0 3300 	strd	r3, r3, [r0]
	len = 0;
 80a1174:	6083      	str	r3, [r0, #8]
	flags = 0;
 80a1176:	7303      	strb	r3, [r0, #12]
	if (cstr) copy(cstr, strlen(cstr));
 80a1178:	b139      	cbz	r1, 80a118a <_ZN6StringC1EPKc+0x22>
 80a117a:	4608      	mov	r0, r1
 80a117c:	f001 fddd 	bl	80a2d3a <strlen>
 80a1180:	4629      	mov	r1, r5
 80a1182:	4602      	mov	r2, r0
 80a1184:	4620      	mov	r0, r4
 80a1186:	f7ff ffd7 	bl	80a1138 <_ZN6String4copyEPKcj>
}
 80a118a:	4620      	mov	r0, r4
 80a118c:	bd38      	pop	{r3, r4, r5, pc}

080a118e <_ZN6StringaSERKS_>:
}
#endif

String & String::operator = (const String &rhs)
{
	if (this == &rhs) return *this;
 80a118e:	4288      	cmp	r0, r1
{
 80a1190:	b510      	push	{r4, lr}
 80a1192:	460b      	mov	r3, r1
 80a1194:	4604      	mov	r4, r0
	if (this == &rhs) return *this;
 80a1196:	d004      	beq.n	80a11a2 <_ZN6StringaSERKS_+0x14>

	if (rhs.buffer) copy(rhs.buffer, rhs.len);
 80a1198:	6809      	ldr	r1, [r1, #0]
 80a119a:	b121      	cbz	r1, 80a11a6 <_ZN6StringaSERKS_+0x18>
 80a119c:	689a      	ldr	r2, [r3, #8]
 80a119e:	f7ff ffcb 	bl	80a1138 <_ZN6String4copyEPKcj>
	else invalidate();

	return *this;
}
 80a11a2:	4620      	mov	r0, r4
 80a11a4:	bd10      	pop	{r4, pc}
	else invalidate();
 80a11a6:	f7ff ff9c 	bl	80a10e2 <_ZN6String10invalidateEv>
 80a11aa:	e7fa      	b.n	80a11a2 <_ZN6StringaSERKS_+0x14>

080a11ac <_ZN6StringC1ERKS_>:
	buffer = NULL;
 80a11ac:	2300      	movs	r3, #0
String::String(const String &value)
 80a11ae:	b510      	push	{r4, lr}
 80a11b0:	4604      	mov	r4, r0
	capacity = 0;
 80a11b2:	e9c0 3300 	strd	r3, r3, [r0]
	len = 0;
 80a11b6:	6083      	str	r3, [r0, #8]
	flags = 0;
 80a11b8:	7303      	strb	r3, [r0, #12]
	*this = value;
 80a11ba:	f7ff ffe8 	bl	80a118e <_ZN6StringaSERKS_>
}
 80a11be:	4620      	mov	r0, r4
 80a11c0:	bd10      	pop	{r4, pc}

080a11c2 <_ZN6StringaSEPKc>:
	return *this;
}
#endif

String & String::operator = (const char *cstr)
{
 80a11c2:	b538      	push	{r3, r4, r5, lr}
 80a11c4:	4605      	mov	r5, r0
	if (cstr) copy(cstr, strlen(cstr));
 80a11c6:	460c      	mov	r4, r1
 80a11c8:	b149      	cbz	r1, 80a11de <_ZN6StringaSEPKc+0x1c>
 80a11ca:	4608      	mov	r0, r1
 80a11cc:	f001 fdb5 	bl	80a2d3a <strlen>
 80a11d0:	4621      	mov	r1, r4
 80a11d2:	4602      	mov	r2, r0
 80a11d4:	4628      	mov	r0, r5
 80a11d6:	f7ff ffaf 	bl	80a1138 <_ZN6String4copyEPKcj>
	else invalidate();

	return *this;
}
 80a11da:	4628      	mov	r0, r5
 80a11dc:	bd38      	pop	{r3, r4, r5, pc}
	else invalidate();
 80a11de:	f7ff ff80 	bl	80a10e2 <_ZN6String10invalidateEv>
 80a11e2:	e7fa      	b.n	80a11da <_ZN6StringaSEPKc+0x18>

080a11e4 <_ZN6StringC1Eih>:
String::String(int value, unsigned char base)
 80a11e4:	b510      	push	{r4, lr}
	buffer = NULL;
 80a11e6:	2300      	movs	r3, #0
String::String(int value, unsigned char base)
 80a11e8:	4604      	mov	r4, r0
 80a11ea:	b08a      	sub	sp, #40	; 0x28
	capacity = 0;
 80a11ec:	e9c4 3300 	strd	r3, r3, [r4]
	len = 0;
 80a11f0:	60a3      	str	r3, [r4, #8]
	flags = 0;
 80a11f2:	7323      	strb	r3, [r4, #12]
String::String(int value, unsigned char base)
 80a11f4:	4608      	mov	r0, r1
	itoa(value, buf, base);
 80a11f6:	a901      	add	r1, sp, #4
 80a11f8:	f7ff ff57 	bl	80a10aa <itoa>
	*this = buf;
 80a11fc:	4620      	mov	r0, r4
 80a11fe:	a901      	add	r1, sp, #4
 80a1200:	f7ff ffdf 	bl	80a11c2 <_ZN6StringaSEPKc>
}
 80a1204:	4620      	mov	r0, r4
 80a1206:	b00a      	add	sp, #40	; 0x28
 80a1208:	bd10      	pop	{r4, pc}

080a120a <_ZN6String6concatEPKcj>:
{
	return concat(s.buffer, s.len);
}

unsigned char String::concat(const char *cstr, unsigned int length)
{
 80a120a:	b570      	push	{r4, r5, r6, lr}
 80a120c:	4605      	mov	r5, r0
	unsigned int newlen = len + length;
	if (!cstr) return 0;
 80a120e:	460e      	mov	r6, r1
 80a1210:	b909      	cbnz	r1, 80a1216 <_ZN6String6concatEPKcj+0xc>
 80a1212:	2000      	movs	r0, #0
	if (length == 0) return 1;
	if (!reserve(newlen)) return 0;
	strcpy(buffer + len, cstr);
	len = newlen;
	return 1;
}
 80a1214:	bd70      	pop	{r4, r5, r6, pc}
	if (length == 0) return 1;
 80a1216:	b16a      	cbz	r2, 80a1234 <_ZN6String6concatEPKcj+0x2a>
	unsigned int newlen = len + length;
 80a1218:	6884      	ldr	r4, [r0, #8]
 80a121a:	4414      	add	r4, r2
	if (!reserve(newlen)) return 0;
 80a121c:	4621      	mov	r1, r4
 80a121e:	f7ff ff77 	bl	80a1110 <_ZN6String7reserveEj>
 80a1222:	2800      	cmp	r0, #0
 80a1224:	d0f5      	beq.n	80a1212 <_ZN6String6concatEPKcj+0x8>
	strcpy(buffer + len, cstr);
 80a1226:	6828      	ldr	r0, [r5, #0]
 80a1228:	68ab      	ldr	r3, [r5, #8]
 80a122a:	4631      	mov	r1, r6
 80a122c:	4418      	add	r0, r3
 80a122e:	f001 fd61 	bl	80a2cf4 <strcpy>
	len = newlen;
 80a1232:	60ac      	str	r4, [r5, #8]
	if (length == 0) return 1;
 80a1234:	2001      	movs	r0, #1
 80a1236:	e7ed      	b.n	80a1214 <_ZN6String6concatEPKcj+0xa>

080a1238 <_ZplRK15StringSumHelperRK6String>:
/*********************************************/
/*  Concatenate                              */
/*********************************************/

StringSumHelper & operator + (const StringSumHelper &lhs, const String &rhs)
{
 80a1238:	b510      	push	{r4, lr}
	StringSumHelper &a = const_cast<StringSumHelper&>(lhs);
	if (!a.concat(rhs.buffer, rhs.len)) a.invalidate();
 80a123a:	688a      	ldr	r2, [r1, #8]
 80a123c:	6809      	ldr	r1, [r1, #0]
{
 80a123e:	4604      	mov	r4, r0
	if (!a.concat(rhs.buffer, rhs.len)) a.invalidate();
 80a1240:	f7ff ffe3 	bl	80a120a <_ZN6String6concatEPKcj>
 80a1244:	b910      	cbnz	r0, 80a124c <_ZplRK15StringSumHelperRK6String+0x14>
 80a1246:	4620      	mov	r0, r4
 80a1248:	f7ff ff4b 	bl	80a10e2 <_ZN6String10invalidateEv>
	return a;
}
 80a124c:	4620      	mov	r0, r4
 80a124e:	bd10      	pop	{r4, pc}

080a1250 <_ZN6String6formatEPKcz>:
    StringPrintableHelper help(*this);
    printable.printTo(help);
}

String String::format(const char* fmt, ...)
{
 80a1250:	b40e      	push	{r1, r2, r3}
 80a1252:	b5ff      	push	{r0, r1, r2, r3, r4, r5, r6, r7, lr}
 80a1254:	ad09      	add	r5, sp, #36	; 0x24
 80a1256:	f855 7b04 	ldr.w	r7, [r5], #4
 80a125a:	4604      	mov	r4, r0
    va_list marker;
    va_start(marker, fmt);
    const int bufsize = 5;
    char test[bufsize];
    size_t n = vsnprintf(test, bufsize, fmt, marker);
 80a125c:	462b      	mov	r3, r5
 80a125e:	463a      	mov	r2, r7
 80a1260:	2105      	movs	r1, #5
 80a1262:	a802      	add	r0, sp, #8
    va_start(marker, fmt);
 80a1264:	9501      	str	r5, [sp, #4]
    size_t n = vsnprintf(test, bufsize, fmt, marker);
 80a1266:	f7ff fe89 	bl	80a0f7c <vsnprintf>
 80a126a:	4606      	mov	r6, r0
    va_end(marker);

    String result;
 80a126c:	490b      	ldr	r1, [pc, #44]	; (80a129c <_ZN6String6formatEPKcz+0x4c>)
 80a126e:	4620      	mov	r0, r4
 80a1270:	f7ff ff7a 	bl	80a1168 <_ZN6StringC1EPKc>
    result.reserve(n);  // internally adds +1 for null terminator
 80a1274:	4631      	mov	r1, r6
 80a1276:	4620      	mov	r0, r4
 80a1278:	f7ff ff4a 	bl	80a1110 <_ZN6String7reserveEj>
    if (result.buffer) {
 80a127c:	6820      	ldr	r0, [r4, #0]
 80a127e:	b130      	cbz	r0, 80a128e <_ZN6String6formatEPKcz+0x3e>
        va_start(marker, fmt);
        n = vsnprintf(result.buffer, n+1, fmt, marker);
 80a1280:	462b      	mov	r3, r5
 80a1282:	463a      	mov	r2, r7
 80a1284:	1c71      	adds	r1, r6, #1
        va_start(marker, fmt);
 80a1286:	9501      	str	r5, [sp, #4]
        n = vsnprintf(result.buffer, n+1, fmt, marker);
 80a1288:	f7ff fe78 	bl	80a0f7c <vsnprintf>
        va_end(marker);
        result.len = n;
 80a128c:	60a0      	str	r0, [r4, #8]
    }
    return result;
}
 80a128e:	4620      	mov	r0, r4
 80a1290:	b004      	add	sp, #16
 80a1292:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 80a1296:	b003      	add	sp, #12
 80a1298:	4770      	bx	lr
 80a129a:	bf00      	nop
 80a129c:	080a2dd5 	.word	0x080a2dd5

080a12a0 <_ZN5Print5writeEPKhj>:

// Public Methods //////////////////////////////////////////////////////////////

/* default implementation: may be overridden */
size_t Print::write(const uint8_t *buffer, size_t size)
{
 80a12a0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80a12a2:	4606      	mov	r6, r0
 80a12a4:	460d      	mov	r5, r1
  size_t n = 0;
 80a12a6:	2400      	movs	r4, #0
 80a12a8:	188f      	adds	r7, r1, r2
  while (size--) {
 80a12aa:	42bd      	cmp	r5, r7
 80a12ac:	d00c      	beq.n	80a12c8 <_ZN5Print5writeEPKhj+0x28>
     int chunk = write(*buffer++);
 80a12ae:	6833      	ldr	r3, [r6, #0]
 80a12b0:	4630      	mov	r0, r6
 80a12b2:	689b      	ldr	r3, [r3, #8]
 80a12b4:	f815 1b01 	ldrb.w	r1, [r5], #1
 80a12b8:	4798      	blx	r3
     if (chunk>=0)
 80a12ba:	1e03      	subs	r3, r0, #0
 80a12bc:	db01      	blt.n	80a12c2 <_ZN5Print5writeEPKhj+0x22>
         n += chunk;
 80a12be:	441c      	add	r4, r3
  while (size--) {
 80a12c0:	e7f3      	b.n	80a12aa <_ZN5Print5writeEPKhj+0xa>
     int chunk = write(*buffer++);
 80a12c2:	2c00      	cmp	r4, #0
 80a12c4:	bf08      	it	eq
 80a12c6:	461c      	moveq	r4, r3
             n = chunk;
         break;
     }
  }
  return n;
}
 80a12c8:	4620      	mov	r0, r4
 80a12ca:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

080a12cc <_ZN5Print5writeEPKc>:

    int getWriteError() { return write_error; }
    void clearWriteError() { setWriteError(0); }

    virtual size_t write(uint8_t) = 0;
    size_t write(const char *str) {
 80a12cc:	b570      	push	{r4, r5, r6, lr}
 80a12ce:	4605      	mov	r5, r0
      if (str == NULL) return 0;
 80a12d0:	460c      	mov	r4, r1
      return write((const uint8_t *)str, strlen(str));
    }
 80a12d2:	4608      	mov	r0, r1
      if (str == NULL) return 0;
 80a12d4:	b149      	cbz	r1, 80a12ea <_ZN5Print5writeEPKc+0x1e>
      return write((const uint8_t *)str, strlen(str));
 80a12d6:	f001 fd30 	bl	80a2d3a <strlen>
 80a12da:	682b      	ldr	r3, [r5, #0]
 80a12dc:	4602      	mov	r2, r0
 80a12de:	4621      	mov	r1, r4
 80a12e0:	4628      	mov	r0, r5
    }
 80a12e2:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
      return write((const uint8_t *)str, strlen(str));
 80a12e6:	68db      	ldr	r3, [r3, #12]
 80a12e8:	4718      	bx	r3
    }
 80a12ea:	bd70      	pop	{r4, r5, r6, pc}

080a12ec <_ZN5Print5printEPKc>:

size_t Print::print(const char str[])
{
 80a12ec:	b508      	push	{r3, lr}
  return write(str);
 80a12ee:	f7ff ffed 	bl	80a12cc <_ZN5Print5writeEPKc>
}
 80a12f2:	bd08      	pop	{r3, pc}

080a12f4 <_ZN5Print5printEc>:

size_t Print::print(char c)
{
  return write(c);
 80a12f4:	6803      	ldr	r3, [r0, #0]
 80a12f6:	689b      	ldr	r3, [r3, #8]
 80a12f8:	4718      	bx	r3

080a12fa <_ZN5Print7printlnEv>:
{
  return print(reinterpret_cast<const char*>(str));
}

size_t Print::println(void)
{
 80a12fa:	b538      	push	{r3, r4, r5, lr}
  size_t n = print('\r');
 80a12fc:	210d      	movs	r1, #13
{
 80a12fe:	4605      	mov	r5, r0
  size_t n = print('\r');
 80a1300:	f7ff fff8 	bl	80a12f4 <_ZN5Print5printEc>
  n += print('\n');
 80a1304:	210a      	movs	r1, #10
  size_t n = print('\r');
 80a1306:	4604      	mov	r4, r0
  n += print('\n');
 80a1308:	4628      	mov	r0, r5
 80a130a:	f7ff fff3 	bl	80a12f4 <_ZN5Print5printEc>
  return n;
}
 80a130e:	4420      	add	r0, r4
 80a1310:	bd38      	pop	{r3, r4, r5, pc}

080a1312 <_ZN5Print7printlnEPKc>:

size_t Print::println(const char c[])
{
 80a1312:	b538      	push	{r3, r4, r5, lr}
 80a1314:	4605      	mov	r5, r0
  return write(str);
 80a1316:	f7ff ffd9 	bl	80a12cc <_ZN5Print5writeEPKc>
 80a131a:	4604      	mov	r4, r0
  size_t n = print(c);
  n += println();
 80a131c:	4628      	mov	r0, r5
 80a131e:	f7ff ffec 	bl	80a12fa <_ZN5Print7printlnEv>
  return n;
}
 80a1322:	4420      	add	r0, r4
 80a1324:	bd38      	pop	{r3, r4, r5, pc}

080a1326 <_ZN5Print11printNumberEmh>:

size_t Print::printNumber(unsigned long n, uint8_t base) {
  char buf[8 * sizeof(n) + 1]; // Assumes 8-bit chars plus zero byte.
  char *str = &buf[sizeof(buf) - 1];

  *str = '\0';
 80a1326:	2300      	movs	r3, #0

  // prevent crash if called with base == 1
  if (base < 2) base = 10;
 80a1328:	2a01      	cmp	r2, #1
 80a132a:	bf98      	it	ls
 80a132c:	220a      	movls	r2, #10
size_t Print::printNumber(unsigned long n, uint8_t base) {
 80a132e:	b530      	push	{r4, r5, lr}
 80a1330:	b08b      	sub	sp, #44	; 0x2c
 80a1332:	460c      	mov	r4, r1
  *str = '\0';
 80a1334:	f88d 3024 	strb.w	r3, [sp, #36]	; 0x24
  if (base < 2) base = 10;
 80a1338:	a909      	add	r1, sp, #36	; 0x24

  do {
   decltype(n) m = n;
   n /= base;
 80a133a:	4625      	mov	r5, r4
 80a133c:	fbb4 f4f2 	udiv	r4, r4, r2
   char c = m - base * n;
 80a1340:	fb04 5312 	mls	r3, r4, r2, r5
 80a1344:	b2db      	uxtb	r3, r3
   *--str = c < 10 ? c + '0' : c + 'A' - 10;
 80a1346:	2b09      	cmp	r3, #9
 80a1348:	bf94      	ite	ls
 80a134a:	3330      	addls	r3, #48	; 0x30
 80a134c:	3337      	addhi	r3, #55	; 0x37
 80a134e:	b2db      	uxtb	r3, r3
  } while(n);
 80a1350:	42aa      	cmp	r2, r5
   *--str = c < 10 ? c + '0' : c + 'A' - 10;
 80a1352:	f801 3d01 	strb.w	r3, [r1, #-1]!
  } while(n);
 80a1356:	d9f0      	bls.n	80a133a <_ZN5Print11printNumberEmh+0x14>

  return write(str);
 80a1358:	f7ff ffb8 	bl	80a12cc <_ZN5Print5writeEPKc>
}
 80a135c:	b00b      	add	sp, #44	; 0x2c
 80a135e:	bd30      	pop	{r4, r5, pc}

080a1360 <_ZN5Print7vprintfEbPKcSt9__va_list>:

  return n;
}

size_t Print::vprintf(bool newline, const char* format, va_list args)
{
 80a1360:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80a1364:	b086      	sub	sp, #24
 80a1366:	af00      	add	r7, sp, #0
 80a1368:	4605      	mov	r5, r0
 80a136a:	460e      	mov	r6, r1
    const int bufsize = 20;
    char test[bufsize];
    va_list args2;
    va_copy(args2, args);
    size_t n = vsnprintf(test, bufsize, format, args);
 80a136c:	1d38      	adds	r0, r7, #4
 80a136e:	2114      	movs	r1, #20
{
 80a1370:	4614      	mov	r4, r2
    va_copy(args2, args);
 80a1372:	603b      	str	r3, [r7, #0]
    size_t n = vsnprintf(test, bufsize, format, args);
 80a1374:	f7ff fe02 	bl	80a0f7c <vsnprintf>

    if (n<bufsize)
 80a1378:	2813      	cmp	r0, #19
 80a137a:	d80e      	bhi.n	80a139a <_ZN5Print7vprintfEbPKcSt9__va_list+0x3a>
  return write(str);
 80a137c:	4628      	mov	r0, r5
 80a137e:	1d39      	adds	r1, r7, #4
 80a1380:	f7ff ffa4 	bl	80a12cc <_ZN5Print5writeEPKc>
 80a1384:	4604      	mov	r4, r0
    {
        char bigger[n+1];
        n = vsnprintf(bigger, n+1, format, args2);
        n = print(bigger);
    }
    if (newline)
 80a1386:	b11e      	cbz	r6, 80a1390 <_ZN5Print7vprintfEbPKcSt9__va_list+0x30>
        n += println();
 80a1388:	4628      	mov	r0, r5
 80a138a:	f7ff ffb6 	bl	80a12fa <_ZN5Print7printlnEv>
 80a138e:	4404      	add	r4, r0

    va_end(args2);
    return n;
}
 80a1390:	4620      	mov	r0, r4
 80a1392:	3718      	adds	r7, #24
 80a1394:	46bd      	mov	sp, r7
 80a1396:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        char bigger[n+1];
 80a139a:	f100 0308 	add.w	r3, r0, #8
 80a139e:	f023 0307 	bic.w	r3, r3, #7
        n = print(bigger);
 80a13a2:	46e8      	mov	r8, sp
        char bigger[n+1];
 80a13a4:	ebad 0d03 	sub.w	sp, sp, r3
        n = vsnprintf(bigger, n+1, format, args2);
 80a13a8:	4622      	mov	r2, r4
 80a13aa:	1c41      	adds	r1, r0, #1
 80a13ac:	683b      	ldr	r3, [r7, #0]
 80a13ae:	4668      	mov	r0, sp
 80a13b0:	f7ff fde4 	bl	80a0f7c <vsnprintf>
  return write(str);
 80a13b4:	4669      	mov	r1, sp
 80a13b6:	4628      	mov	r0, r5
 80a13b8:	f7ff ff88 	bl	80a12cc <_ZN5Print5writeEPKc>
 80a13bc:	4604      	mov	r4, r0
 80a13be:	46c5      	mov	sp, r8
 80a13c0:	e7e1      	b.n	80a1386 <_ZN5Print7vprintfEbPKcSt9__va_list+0x26>

080a13c2 <_ZN5spark9WiFiClass2onEv>:
    bool ready(void) {
        return network_ready(*this, 0, NULL);
    }

    void on(void) {
        network_on(*this, 0, 0, NULL);
 80a13c2:	2300      	movs	r3, #0
 80a13c4:	6840      	ldr	r0, [r0, #4]
 80a13c6:	461a      	mov	r2, r3
 80a13c8:	4619      	mov	r1, r3
 80a13ca:	f7ff bd77 	b.w	80a0ebc <network_on>

080a13ce <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>:
      ~__shared_count() noexcept
 80a13ce:	b538      	push	{r3, r4, r5, lr}
	if (_M_pi != nullptr)
 80a13d0:	6804      	ldr	r4, [r0, #0]
      ~__shared_count() noexcept
 80a13d2:	4605      	mov	r5, r0
	if (_M_pi != nullptr)
 80a13d4:	b17c      	cbz	r4, 80a13f6 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev+0x28>
      if (--_M_use_count == 0)
 80a13d6:	6863      	ldr	r3, [r4, #4]
 80a13d8:	3b01      	subs	r3, #1
 80a13da:	6063      	str	r3, [r4, #4]
 80a13dc:	b95b      	cbnz	r3, 80a13f6 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev+0x28>
          _M_dispose();
 80a13de:	6823      	ldr	r3, [r4, #0]
 80a13e0:	4620      	mov	r0, r4
 80a13e2:	689b      	ldr	r3, [r3, #8]
 80a13e4:	4798      	blx	r3
          if (--_M_weak_count == 0)
 80a13e6:	68a3      	ldr	r3, [r4, #8]
 80a13e8:	3b01      	subs	r3, #1
 80a13ea:	60a3      	str	r3, [r4, #8]
 80a13ec:	b91b      	cbnz	r3, 80a13f6 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev+0x28>
            _M_destroy();
 80a13ee:	6823      	ldr	r3, [r4, #0]
 80a13f0:	4620      	mov	r0, r4
 80a13f2:	68db      	ldr	r3, [r3, #12]
 80a13f4:	4798      	blx	r3
	  _M_pi->_M_release();
      }
 80a13f6:	4628      	mov	r0, r5
 80a13f8:	bd38      	pop	{r3, r4, r5, pc}

080a13fa <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_>:

      __shared_count(const __shared_count& __r) noexcept
      : _M_pi(__r._M_pi)
 80a13fa:	680b      	ldr	r3, [r1, #0]
 80a13fc:	6003      	str	r3, [r0, #0]
      {
	if (_M_pi != 0)
 80a13fe:	b113      	cbz	r3, 80a1406 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_+0xc>
    { ++_M_use_count; }
 80a1400:	685a      	ldr	r2, [r3, #4]
 80a1402:	3201      	adds	r2, #1
 80a1404:	605a      	str	r2, [r3, #4]
	  _M_pi->_M_add_ref_copy();
      }
 80a1406:	4770      	bx	lr

080a1408 <_GLOBAL__sub_I__ZN5spark3LogE>:
    // This handler doesn't support direct logging
}

// spark::Logger
inline spark::Logger::Logger(const char *name) :
        name_(name) {
 80a1408:	4b01      	ldr	r3, [pc, #4]	; (80a1410 <_GLOBAL__sub_I__ZN5spark3LogE+0x8>)
 80a140a:	4a02      	ldr	r2, [pc, #8]	; (80a1414 <_GLOBAL__sub_I__ZN5spark3LogE+0xc>)
 80a140c:	601a      	str	r2, [r3, #0]
#if Wiring_LogConfig

// spark::
void spark::logProcessControlRequest(ctrl_request* req) {
    JSONRequestHandler::process(req);
}
 80a140e:	4770      	bx	lr
 80a1410:	200000d8 	.word	0x200000d8
 80a1414:	080a2ecd 	.word	0x080a2ecd

080a1418 <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT>:
            calendar_time_cache = Convert_UnixTime_To_CalendarTime(unix_time);
            unix_time_cache = unix_time;
    }
}

const char* TimeClass::format_spec = TIME_FORMAT_DEFAULT;
 80a1418:	4b02      	ldr	r3, [pc, #8]	; (80a1424 <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT+0xc>)
 80a141a:	681a      	ldr	r2, [r3, #0]
 80a141c:	4b02      	ldr	r3, [pc, #8]	; (80a1428 <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT+0x10>)
 80a141e:	601a      	str	r2, [r3, #0]
{
  return isValid();
}


TimeClass Time;
 80a1420:	4770      	bx	lr
 80a1422:	bf00      	nop
 80a1424:	20000004 	.word	0x20000004
 80a1428:	200000dc 	.word	0x200000dc

080a142c <delay>:
    return (value - fromStart) * (toEnd - toStart) / (fromEnd - fromStart) + toStart;
}

void delay(unsigned long ms)
{
    system_delay_ms(ms, false);
 80a142c:	2100      	movs	r1, #0
 80a142e:	f7ff bcf9 	b.w	80a0e24 <system_delay_ms>

080a1432 <_ZN8RGBClassD1Ev>:
#include "rgbled.h"

typedef void (raw_rgb_change_handler_t)(uint8_t, uint8_t, uint8_t);
typedef std::function<raw_rgb_change_handler_t> wiring_rgb_change_handler_t;

class RGBClass {
 80a1432:	b510      	push	{r4, lr}
 80a1434:	4604      	mov	r4, r0
 80a1436:	f7ff f98d 	bl	80a0754 <_ZNSt14_Function_baseD1Ev>
 80a143a:	4620      	mov	r0, r4
 80a143c:	bd10      	pop	{r4, pc}

080a143e <_ZSt4swapISt9_Any_dataENSt9enable_ifIXsrSt6__and_IJSt6__not_ISt15__is_tuple_likeIT_EESt21is_move_constructibleIS5_ESt18is_move_assignableIS5_EEE5valueEvE4typeERS5_SF_>:
    inline
#if __cplusplus >= 201103L
    typename enable_if<__and_<__not_<__is_tuple_like<_Tp>>,
			      is_move_constructible<_Tp>,
			      is_move_assignable<_Tp>>::value>::type
    swap(_Tp& __a, _Tp& __b)
 80a143e:	b513      	push	{r0, r1, r4, lr}
#endif
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
 80a1440:	466c      	mov	r4, sp
    swap(_Tp& __a, _Tp& __b)
 80a1442:	460b      	mov	r3, r1
 80a1444:	4602      	mov	r2, r0
      _Tp __tmp = _GLIBCXX_MOVE(__a);
 80a1446:	c803      	ldmia	r0, {r0, r1}
 80a1448:	e884 0003 	stmia.w	r4, {r0, r1}
      __a = _GLIBCXX_MOVE(__b);
 80a144c:	e893 0003 	ldmia.w	r3, {r0, r1}
 80a1450:	e882 0003 	stmia.w	r2, {r0, r1}
      __b = _GLIBCXX_MOVE(__tmp);
 80a1454:	e894 0003 	ldmia.w	r4, {r0, r1}
 80a1458:	e883 0003 	stmia.w	r3, {r0, r1}
    }
 80a145c:	b002      	add	sp, #8
 80a145e:	bd10      	pop	{r4, pc}

080a1460 <_GLOBAL__sub_I_RGB>:
    _Function_base() : _M_manager(nullptr) { }
 80a1460:	2300      	movs	r3, #0
 80a1462:	4803      	ldr	r0, [pc, #12]	; (80a1470 <_GLOBAL__sub_I_RGB+0x10>)
#include "spark_wiring_rgb.h"
#include "spark_wiring_interrupts.h"

#include "core_hal.h"

RGBClass RGB;
 80a1464:	4a03      	ldr	r2, [pc, #12]	; (80a1474 <_GLOBAL__sub_I_RGB+0x14>)
 80a1466:	4904      	ldr	r1, [pc, #16]	; (80a1478 <_GLOBAL__sub_I_RGB+0x18>)
 80a1468:	6083      	str	r3, [r0, #8]
 80a146a:	f000 bf5f 	b.w	80a232c <__aeabi_atexit>
 80a146e:	bf00      	nop
 80a1470:	200000e0 	.word	0x200000e0
 80a1474:	2000006c 	.word	0x2000006c
 80a1478:	080a1433 	.word	0x080a1433

080a147c <_ZZ21module_user_init_hookENUlP6_reentjmPvE_4_FUNES0_jmS1_>:

void module_user_init_hook()
{
#if HAL_PLATFORM_NEWLIB
    newlib_impure_ptr_callback([](struct _reent* r, size_t size, uint32_t version, void* ctx) -> void {
        _impure_ptr = r;
 80a147c:	4b01      	ldr	r3, [pc, #4]	; (80a1484 <_ZZ21module_user_init_hookENUlP6_reentjmPvE_4_FUNES0_jmS1_+0x8>)
 80a147e:	6018      	str	r0, [r3, #0]
    }, nullptr);
 80a1480:	4770      	bx	lr
 80a1482:	bf00      	nop
 80a1484:	20000008 	.word	0x20000008

080a1488 <serialEventRun>:
{
 80a1488:	b508      	push	{r3, lr}
    if (serialEvent && Serial.available()>0)
 80a148a:	4b13      	ldr	r3, [pc, #76]	; (80a14d8 <serialEventRun+0x50>)
 80a148c:	b143      	cbz	r3, 80a14a0 <serialEventRun+0x18>
 80a148e:	f000 fc05 	bl	80a1c9c <_Z16_fetch_usbserialv>
 80a1492:	6803      	ldr	r3, [r0, #0]
 80a1494:	691b      	ldr	r3, [r3, #16]
 80a1496:	4798      	blx	r3
 80a1498:	2800      	cmp	r0, #0
 80a149a:	dd01      	ble.n	80a14a0 <serialEventRun+0x18>
        serialEvent();
 80a149c:	f3af 8000 	nop.w
    if (serialEvent1 && Serial1.available()>0)
 80a14a0:	4b0e      	ldr	r3, [pc, #56]	; (80a14dc <serialEventRun+0x54>)
 80a14a2:	b143      	cbz	r3, 80a14b6 <serialEventRun+0x2e>
 80a14a4:	f000 fd08 	bl	80a1eb8 <_Z22__fetch_global_Serial1v>
 80a14a8:	6803      	ldr	r3, [r0, #0]
 80a14aa:	691b      	ldr	r3, [r3, #16]
 80a14ac:	4798      	blx	r3
 80a14ae:	2800      	cmp	r0, #0
 80a14b0:	dd01      	ble.n	80a14b6 <serialEventRun+0x2e>
        serialEvent1();
 80a14b2:	f3af 8000 	nop.w
    if (serialEventRun2) serialEventRun2();
 80a14b6:	4b0a      	ldr	r3, [pc, #40]	; (80a14e0 <serialEventRun+0x58>)
 80a14b8:	b10b      	cbz	r3, 80a14be <serialEventRun+0x36>
 80a14ba:	f3af 8000 	nop.w
    if (usbSerialEvent1 && USBSerial1.available()>0)
 80a14be:	4b09      	ldr	r3, [pc, #36]	; (80a14e4 <serialEventRun+0x5c>)
 80a14c0:	b143      	cbz	r3, 80a14d4 <serialEventRun+0x4c>
 80a14c2:	f000 fc29 	bl	80a1d18 <_Z17_fetch_usbserial1v>
 80a14c6:	6803      	ldr	r3, [r0, #0]
 80a14c8:	691b      	ldr	r3, [r3, #16]
 80a14ca:	4798      	blx	r3
 80a14cc:	2800      	cmp	r0, #0
 80a14ce:	dd01      	ble.n	80a14d4 <serialEventRun+0x4c>
        usbSerialEvent1();
 80a14d0:	f3af 8000 	nop.w
}
 80a14d4:	bd08      	pop	{r3, pc}
 80a14d6:	bf00      	nop
	...

080a14e8 <_post_loop>:
{
 80a14e8:	b508      	push	{r3, lr}
	serialEventRun();
 80a14ea:	f7ff ffcd 	bl	80a1488 <serialEventRun>
		return !timeout_fn;
	}

	static inline system_tick_t current_time()
	{
		return HAL_Timer_Get_Milli_Seconds();
 80a14ee:	f7ff fb97 	bl	80a0c20 <HAL_Timer_Get_Milli_Seconds>
	/**
	 * Lifesign that the application is still working normally.
	 */
	static void checkin()
	{
		last_checkin = current_time();
 80a14f2:	4b01      	ldr	r3, [pc, #4]	; (80a14f8 <_post_loop+0x10>)
 80a14f4:	6018      	str	r0, [r3, #0]
}
 80a14f6:	bd08      	pop	{r3, pc}
 80a14f8:	2000056c 	.word	0x2000056c

080a14fc <_Z33system_initialize_user_backup_ramv>:
    memcpy(&link_global_retained_start, &link_global_retained_initial_values, len);
 80a14fc:	4802      	ldr	r0, [pc, #8]	; (80a1508 <_Z33system_initialize_user_backup_ramv+0xc>)
 80a14fe:	4a03      	ldr	r2, [pc, #12]	; (80a150c <_Z33system_initialize_user_backup_ramv+0x10>)
 80a1500:	4903      	ldr	r1, [pc, #12]	; (80a1510 <_Z33system_initialize_user_backup_ramv+0x14>)
 80a1502:	1a12      	subs	r2, r2, r0
 80a1504:	f001 bbbc 	b.w	80a2c80 <memcpy>
 80a1508:	40024000 	.word	0x40024000
 80a150c:	40024004 	.word	0x40024004
 80a1510:	080a3040 	.word	0x080a3040

080a1514 <_Z27ctrl_request_custom_handlerP12ctrl_request>:
    system_ctrl_set_result(req, SYSTEM_ERROR_NOT_SUPPORTED, nullptr, nullptr, nullptr);
 80a1514:	2300      	movs	r3, #0
void __attribute((weak)) ctrl_request_custom_handler(ctrl_request* req) {
 80a1516:	b507      	push	{r0, r1, r2, lr}
    system_ctrl_set_result(req, SYSTEM_ERROR_NOT_SUPPORTED, nullptr, nullptr, nullptr);
 80a1518:	461a      	mov	r2, r3
 80a151a:	f06f 0177 	mvn.w	r1, #119	; 0x77
 80a151e:	9300      	str	r3, [sp, #0]
 80a1520:	f7ff fca2 	bl	80a0e68 <system_ctrl_set_result>
}
 80a1524:	b003      	add	sp, #12
 80a1526:	f85d fb04 	ldr.w	pc, [sp], #4
	...

080a152c <_ZL20ctrl_request_handlerP12ctrl_request>:
static void ctrl_request_handler(ctrl_request* req) {
 80a152c:	b507      	push	{r0, r1, r2, lr}
    switch (req->type) {
 80a152e:	8843      	ldrh	r3, [r0, #2]
 80a1530:	2b0a      	cmp	r3, #10
 80a1532:	d008      	beq.n	80a1546 <_ZL20ctrl_request_handlerP12ctrl_request+0x1a>
 80a1534:	2b50      	cmp	r3, #80	; 0x50
 80a1536:	d10b      	bne.n	80a1550 <_ZL20ctrl_request_handlerP12ctrl_request+0x24>
        if (log_process_ctrl_request_callback) {
 80a1538:	4b09      	ldr	r3, [pc, #36]	; (80a1560 <_ZL20ctrl_request_handlerP12ctrl_request+0x34>)
 80a153a:	681b      	ldr	r3, [r3, #0]
 80a153c:	b14b      	cbz	r3, 80a1552 <_ZL20ctrl_request_handlerP12ctrl_request+0x26>
}
 80a153e:	b003      	add	sp, #12
 80a1540:	f85d eb04 	ldr.w	lr, [sp], #4
            log_process_ctrl_request_callback(req);
 80a1544:	4718      	bx	r3
        ctrl_request_custom_handler(req);
 80a1546:	f7ff ffe5 	bl	80a1514 <_Z27ctrl_request_custom_handlerP12ctrl_request>
}
 80a154a:	b003      	add	sp, #12
 80a154c:	f85d fb04 	ldr.w	pc, [sp], #4
        system_ctrl_set_result(req, SYSTEM_ERROR_NOT_SUPPORTED, nullptr, nullptr, nullptr);
 80a1550:	2300      	movs	r3, #0
 80a1552:	461a      	mov	r2, r3
 80a1554:	f06f 0177 	mvn.w	r1, #119	; 0x77
 80a1558:	9300      	str	r3, [sp, #0]
 80a155a:	f7ff fc85 	bl	80a0e68 <system_ctrl_set_result>
}
 80a155e:	e7f4      	b.n	80a154a <_ZL20ctrl_request_handlerP12ctrl_request+0x1e>
 80a1560:	200000f4 	.word	0x200000f4

080a1564 <module_user_init_hook>:
{
 80a1564:	b538      	push	{r3, r4, r5, lr}
#endif // HAL_PLATFORM_NEWLIB

#if HAL_PLATFORM_BACKUP_RAM
    backup_ram_was_valid_ =  __backup_sram_signature==signature;
 80a1566:	4c12      	ldr	r4, [pc, #72]	; (80a15b0 <module_user_init_hook+0x4c>)
    newlib_impure_ptr_callback([](struct _reent* r, size_t size, uint32_t version, void* ctx) -> void {
 80a1568:	2100      	movs	r1, #0
 80a156a:	4812      	ldr	r0, [pc, #72]	; (80a15b4 <module_user_init_hook+0x50>)
 80a156c:	f7ff fd1e 	bl	80a0fac <newlib_impure_ptr_callback>
    backup_ram_was_valid_ =  __backup_sram_signature==signature;
 80a1570:	4d11      	ldr	r5, [pc, #68]	; (80a15b8 <module_user_init_hook+0x54>)
 80a1572:	6823      	ldr	r3, [r4, #0]
 80a1574:	42ab      	cmp	r3, r5
 80a1576:	bf0c      	ite	eq
 80a1578:	2201      	moveq	r2, #1
 80a157a:	2200      	movne	r2, #0
 80a157c:	4b0f      	ldr	r3, [pc, #60]	; (80a15bc <module_user_init_hook+0x58>)
 80a157e:	701a      	strb	r2, [r3, #0]
    if (!backup_ram_was_valid_) {
 80a1580:	d002      	beq.n	80a1588 <module_user_init_hook+0x24>
        system_initialize_user_backup_ram();
 80a1582:	f7ff ffbb 	bl	80a14fc <_Z33system_initialize_user_backup_ramv>
        __backup_sram_signature = signature;
 80a1586:	6025      	str	r5, [r4, #0]
    }
#endif

#if HAL_PLATFORM_RNG
    // Initialize the default stdlib PRNG using hardware RNG as a seed
    const uint32_t seed = HAL_RNG_GetRandomNumber();
 80a1588:	f7ff fb32 	bl	80a0bf0 <HAL_RNG_GetRandomNumber>
 80a158c:	4604      	mov	r4, r0
    srand(seed);
 80a158e:	f001 fb8d 	bl	80a2cac <srand>

    // If the user defines random_seed_from_cloud, call it with a seed value
    // generated by a hardware RNG as well.
    if (random_seed_from_cloud) {
 80a1592:	4b0b      	ldr	r3, [pc, #44]	; (80a15c0 <module_user_init_hook+0x5c>)
 80a1594:	b113      	cbz	r3, 80a159c <module_user_init_hook+0x38>
        random_seed_from_cloud(seed);
 80a1596:	4620      	mov	r0, r4
 80a1598:	f3af 8000 	nop.w
    }
#endif
    // Register the random_seed_from_cloud handler
    spark_set_random_seed_from_cloud_handler(&random_seed_from_cloud, nullptr);
 80a159c:	2100      	movs	r1, #0
 80a159e:	4808      	ldr	r0, [pc, #32]	; (80a15c0 <module_user_init_hook+0x5c>)
 80a15a0:	f7ff fccc 	bl	80a0f3c <spark_set_random_seed_from_cloud_handler>

    // Register application handler for the control requests
    system_ctrl_set_app_request_handler(ctrl_request_handler, nullptr);
}
 80a15a4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    system_ctrl_set_app_request_handler(ctrl_request_handler, nullptr);
 80a15a8:	2100      	movs	r1, #0
 80a15aa:	4806      	ldr	r0, [pc, #24]	; (80a15c4 <module_user_init_hook+0x60>)
 80a15ac:	f7ff bc52 	b.w	80a0e54 <system_ctrl_set_app_request_handler>
 80a15b0:	40024000 	.word	0x40024000
 80a15b4:	080a147d 	.word	0x080a147d
 80a15b8:	9a271c1e 	.word	0x9a271c1e
 80a15bc:	200000f0 	.word	0x200000f0
 80a15c0:	00000000 	.word	0x00000000
 80a15c4:	080a152d 	.word	0x080a152d

080a15c8 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EED1Ev>:
    class _Sp_counted_ptr final : public _Sp_counted_base<_Lp>
 80a15c8:	4770      	bx	lr

080a15ca <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE14_M_get_deleterERKSt9type_info>:
      { return nullptr; }
 80a15ca:	2000      	movs	r0, #0
 80a15cc:	4770      	bx	lr

080a15ce <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EED0Ev>:
    class _Sp_counted_ptr final : public _Sp_counted_base<_Lp>
 80a15ce:	b510      	push	{r4, lr}
 80a15d0:	4604      	mov	r4, r0
 80a15d2:	2110      	movs	r1, #16
 80a15d4:	f000 feaf 	bl	80a2336 <_ZdlPvj>
 80a15d8:	4620      	mov	r0, r4
 80a15da:	bd10      	pop	{r4, pc}

080a15dc <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_destroyEv>:
      _M_destroy() noexcept
 80a15dc:	b508      	push	{r3, lr}
      { delete this; }
 80a15de:	f7ff fff6 	bl	80a15ce <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EED0Ev>
 80a15e2:	bd08      	pop	{r3, pc}

080a15e4 <_ZN8particle5ErrorC1EOS0_>:

} // namespace particle

inline particle::Error::Error(Type type) :
        msg_(nullptr),
        type_(type) {
 80a15e4:	2200      	movs	r2, #0

inline particle::Error::Error(const Error& error) :
        Error(error.type_, error.msg_) {
}

inline particle::Error::Error(Error&& error) :
 80a15e6:	b530      	push	{r4, r5, lr}
        type_(type) {
 80a15e8:	f64f 749c 	movw	r4, #65436	; 0xff9c
 80a15ec:	6002      	str	r2, [r0, #0]
 80a15ee:	8084      	strh	r4, [r0, #4]
      __a = _GLIBCXX_MOVE(__b);
 80a15f0:	888d      	ldrh	r5, [r1, #4]
      __b = _GLIBCXX_MOVE(__tmp);
 80a15f2:	808c      	strh	r4, [r1, #4]
      __a = _GLIBCXX_MOVE(__b);
 80a15f4:	680c      	ldr	r4, [r1, #0]
 80a15f6:	8085      	strh	r5, [r0, #4]
 80a15f8:	6004      	str	r4, [r0, #0]
      __b = _GLIBCXX_MOVE(__tmp);
 80a15fa:	600a      	str	r2, [r1, #0]
        Error() {
    swap(*this, error);
}
 80a15fc:	bd30      	pop	{r4, r5, pc}

080a15fe <_ZN8particle5ErrorD1Ev>:

inline particle::Error::~Error() {
 80a15fe:	b510      	push	{r4, lr}
 80a1600:	4604      	mov	r4, r0
    free((void*)msg_);
 80a1602:	6800      	ldr	r0, [r0, #0]
 80a1604:	f7ff fcaa 	bl	80a0f5c <free>
}
 80a1608:	4620      	mov	r0, r4
 80a160a:	bd10      	pop	{r4, pc}

080a160c <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv>:
      _M_dispose() noexcept
 80a160c:	b538      	push	{r3, r4, r5, lr}
      { delete _M_ptr; }
 80a160e:	68c4      	ldr	r4, [r0, #12]
 80a1610:	b1f4      	cbz	r4, 80a1650 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv+0x44>
      _Tp
      load(memory_order __m = memory_order_seq_cst) const noexcept
      {
	alignas(_Tp) unsigned char __buf[sizeof(_Tp)];
	_Tp* __ptr = reinterpret_cast<_Tp*>(__buf);
	__atomic_load(std::__addressof(_M_i), __ptr, int(__m));
 80a1612:	7823      	ldrb	r3, [r4, #0]
    ~FutureImpl() {
        // Call destructor of the appropriate unnamed enum's field
        const State s = this->state();
        if (s == State::SUCCEEDED) {
            result_.~ResultT();
        } else if (s == State::FAILED) {
 80a1614:	2b02      	cmp	r3, #2
 80a1616:	d103      	bne.n	80a1620 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv+0x14>
            error_.~Error();
 80a1618:	f104 000c 	add.w	r0, r4, #12
 80a161c:	f7ff ffef 	bl	80a15fe <_ZN8particle5ErrorD1Ev>
      {
	memory_order __b = __m & __memory_order_mask;
	__glibcxx_assert(__b != memory_order_release);
	__glibcxx_assert(__b != memory_order_acq_rel);

	return __atomic_load_n(&_M_p, int(__m));
 80a1620:	6865      	ldr	r5, [r4, #4]
        delete onSuccess_.load(std::memory_order_relaxed);
 80a1622:	b135      	cbz	r5, 80a1632 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv+0x26>
    class function<_Res(_ArgTypes...)>
 80a1624:	4628      	mov	r0, r5
 80a1626:	f7ff f895 	bl	80a0754 <_ZNSt14_Function_baseD1Ev>
 80a162a:	2110      	movs	r1, #16
 80a162c:	4628      	mov	r0, r5
 80a162e:	f000 fe82 	bl	80a2336 <_ZdlPvj>
 80a1632:	68a5      	ldr	r5, [r4, #8]
        delete onError_.load(std::memory_order_relaxed);
 80a1634:	b135      	cbz	r5, 80a1644 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv+0x38>
 80a1636:	4628      	mov	r0, r5
 80a1638:	f7ff f88c 	bl	80a0754 <_ZNSt14_Function_baseD1Ev>
 80a163c:	2110      	movs	r1, #16
 80a163e:	4628      	mov	r0, r5
 80a1640:	f000 fe79 	bl	80a2336 <_ZdlPvj>
 80a1644:	4620      	mov	r0, r4
 80a1646:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80a164a:	2114      	movs	r1, #20
 80a164c:	f000 be73 	b.w	80a2336 <_ZdlPvj>
 80a1650:	bd38      	pop	{r3, r4, r5, pc}

080a1652 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE11fromDataPtrEPv>:
        // TODO: Use custom reference counting object to avoid unnecessary memory allocation
        return new detail::FutureImplPtr<ResultT, ContextT>(p_);
    }

    // Unwraps promise from an object pointer created via dataPtr() method
    static Promise<ResultT, ContextT> fromDataPtr(void* data) {
 80a1652:	b573      	push	{r0, r1, r4, r5, r6, lr}
	__shared_ptr(const __shared_ptr<_Yp, _Lp>& __r,
		     element_type* __p) noexcept
	: _M_ptr(__p), _M_refcount(__r._M_refcount) // never throws
	{ }

      __shared_ptr(const __shared_ptr&) noexcept = default;
 80a1654:	460e      	mov	r6, r1
 80a1656:	4604      	mov	r4, r0
 80a1658:	f856 3b04 	ldr.w	r3, [r6], #4
 80a165c:	460d      	mov	r5, r1
 80a165e:	a801      	add	r0, sp, #4
 80a1660:	4631      	mov	r1, r6
 80a1662:	9300      	str	r3, [sp, #0]
 80a1664:	f7ff fec9 	bl	80a13fa <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_>
	__shared_ptr(const __shared_ptr<_Yp, _Lp>& __r) noexcept
	: _M_ptr(__r._M_ptr), _M_refcount(__r._M_refcount)
	{ }

      __shared_ptr(__shared_ptr&& __r) noexcept
      : _M_ptr(__r._M_ptr), _M_refcount()
 80a1668:	9b00      	ldr	r3, [sp, #0]
	_Sp_counted_base<_Lp>* __tmp = __r._M_pi;
 80a166a:	9a01      	ldr	r2, [sp, #4]
      : _M_ptr(__r._M_ptr), _M_refcount()
 80a166c:	6023      	str	r3, [r4, #0]
	__r._M_pi = _M_pi;
 80a166e:	2300      	movs	r3, #0
	_M_pi = __tmp;
 80a1670:	6062      	str	r2, [r4, #4]
      ~__shared_ptr() = default;
 80a1672:	a801      	add	r0, sp, #4
	__r._M_pi = _M_pi;
 80a1674:	9301      	str	r3, [sp, #4]
      {
	_M_refcount._M_swap(__r._M_refcount);
	__r._M_ptr = 0;
 80a1676:	9300      	str	r3, [sp, #0]
      ~__shared_ptr() = default;
 80a1678:	f7ff fea9 	bl	80a13ce <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
 80a167c:	4630      	mov	r0, r6
 80a167e:	f7ff fea6 	bl	80a13ce <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
        auto d = static_cast<detail::FutureImplPtr<ResultT, ContextT>*>(data);
        const Promise<ResultT, ContextT> p(*d);
        delete d;
 80a1682:	4628      	mov	r0, r5
 80a1684:	2108      	movs	r1, #8
 80a1686:	f000 fe56 	bl	80a2336 <_ZdlPvj>
        return p;
    }
 80a168a:	4620      	mov	r0, r4
 80a168c:	b002      	add	sp, #8
 80a168e:	bd70      	pop	{r4, r5, r6, pc}

080a1690 <_ZNKSt8functionIFvRKN8particle5ErrorEEEclES3_>:
  template<typename _Res, typename... _ArgTypes>
    _Res
    function<_Res(_ArgTypes...)>::
    operator()(_ArgTypes... __args) const
    {
      if (_M_empty())
 80a1690:	6882      	ldr	r2, [r0, #8]
    function<_Res(_ArgTypes...)>::
 80a1692:	b510      	push	{r4, lr}
      if (_M_empty())
 80a1694:	b90a      	cbnz	r2, 80a169a <_ZNKSt8functionIFvRKN8particle5ErrorEEEclES3_+0xa>
	__throw_bad_function_call();
 80a1696:	f000 fe52 	bl	80a233e <_ZSt25__throw_bad_function_callv>
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
 80a169a:	68c3      	ldr	r3, [r0, #12]
    }
 80a169c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
 80a16a0:	4718      	bx	r3

080a16a2 <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE9_M_invokeERKSt9_Any_data>:
      _M_invoke(const _Any_data& __functor, _ArgTypes&&... __args)
 80a16a2:	b508      	push	{r3, lr}
	    return __source._M_access<_Functor*>();
 80a16a4:	6800      	ldr	r0, [r0, #0]
    { return static_cast<_Up&&>(__t); }

  template<typename _Res, typename _Fn, typename... _Args>
    constexpr _Res
    __invoke_impl(__invoke_other, _Fn&& __f, _Args&&... __args)
    { return std::forward<_Fn>(__f)(std::forward<_Args>(__args)...); }
 80a16a6:	f100 0110 	add.w	r1, r0, #16
 80a16aa:	f7ff fff1 	bl	80a1690 <_ZNKSt8functionIFvRKN8particle5ErrorEEEclES3_>
      }
 80a16ae:	bd08      	pop	{r3, pc}

080a16b0 <_ZNKSt8functionIFvRKbEEclES1_>:
      if (_M_empty())
 80a16b0:	6882      	ldr	r2, [r0, #8]
    function<_Res(_ArgTypes...)>::
 80a16b2:	b510      	push	{r4, lr}
      if (_M_empty())
 80a16b4:	b90a      	cbnz	r2, 80a16ba <_ZNKSt8functionIFvRKbEEclES1_+0xa>
	__throw_bad_function_call();
 80a16b6:	f000 fe42 	bl	80a233e <_ZSt25__throw_bad_function_callv>
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
 80a16ba:	68c3      	ldr	r3, [r0, #12]
    }
 80a16bc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
 80a16c0:	4718      	bx	r3

080a16c2 <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKbEEbEEE9_M_invokeERKSt9_Any_data>:
      _M_invoke(const _Any_data& __functor, _ArgTypes&&... __args)
 80a16c2:	b508      	push	{r3, lr}
	    return __source._M_access<_Functor*>();
 80a16c4:	6800      	ldr	r0, [r0, #0]
 80a16c6:	f100 0110 	add.w	r1, r0, #16
 80a16ca:	f7ff fff1 	bl	80a16b0 <_ZNKSt8functionIFvRKbEEclES1_>
      }
 80a16ce:	bd08      	pop	{r3, pc}

080a16d0 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1IPN8particle6detail10FutureImplIbNS5_13FutureContextEEEEET_>:
	__shared_count(_Ptr __p) : _M_pi(0)
 80a16d0:	b538      	push	{r3, r4, r5, lr}
 80a16d2:	2300      	movs	r3, #0
 80a16d4:	4604      	mov	r4, r0
 80a16d6:	6003      	str	r3, [r0, #0]
	      _M_pi = new _Sp_counted_ptr<_Ptr, _Lp>(__p);
 80a16d8:	2010      	movs	r0, #16
	__shared_count(_Ptr __p) : _M_pi(0)
 80a16da:	460d      	mov	r5, r1
	      _M_pi = new _Sp_counted_ptr<_Ptr, _Lp>(__p);
 80a16dc:	f7fe fcdb 	bl	80a0096 <_Znwj>
 80a16e0:	b128      	cbz	r0, 80a16ee <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1IPN8particle6detail10FutureImplIbNS5_13FutureContextEEEEET_+0x1e>
      : _M_use_count(1), _M_weak_count(1) { }
 80a16e2:	2301      	movs	r3, #1
 80a16e4:	e9c0 3301 	strd	r3, r3, [r0, #4]
      : _M_ptr(__p) { }
 80a16e8:	4b02      	ldr	r3, [pc, #8]	; (80a16f4 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1IPN8particle6detail10FutureImplIbNS5_13FutureContextEEEEET_+0x24>)
 80a16ea:	60c5      	str	r5, [r0, #12]
 80a16ec:	6003      	str	r3, [r0, #0]
	      _M_pi = new _Sp_counted_ptr<_Ptr, _Lp>(__p);
 80a16ee:	6020      	str	r0, [r4, #0]
	}
 80a16f0:	4620      	mov	r0, r4
 80a16f2:	bd38      	pop	{r3, r4, r5, pc}
 80a16f4:	080a2ef8 	.word	0x080a2ef8

080a16f8 <_ZNSt8functionIFvRKN8particle5ErrorEEEC1ERKS5_>:
    function<_Res(_ArgTypes...)>::
 80a16f8:	b538      	push	{r3, r4, r5, lr}
    _Function_base() : _M_manager(nullptr) { }
 80a16fa:	2300      	movs	r3, #0
 80a16fc:	6083      	str	r3, [r0, #8]
      { return !_M_empty(); }
 80a16fe:	688b      	ldr	r3, [r1, #8]
    function<_Res(_ArgTypes...)>::
 80a1700:	4604      	mov	r4, r0
 80a1702:	460d      	mov	r5, r1
      if (static_cast<bool>(__x))
 80a1704:	b12b      	cbz	r3, 80a1712 <_ZNSt8functionIFvRKN8particle5ErrorEEEC1ERKS5_+0x1a>
	  __x._M_manager(_M_functor, __x._M_functor, __clone_functor);
 80a1706:	2202      	movs	r2, #2
 80a1708:	4798      	blx	r3
	  _M_invoker = __x._M_invoker;
 80a170a:	68eb      	ldr	r3, [r5, #12]
 80a170c:	60e3      	str	r3, [r4, #12]
	  _M_manager = __x._M_manager;
 80a170e:	68ab      	ldr	r3, [r5, #8]
 80a1710:	60a3      	str	r3, [r4, #8]
    }
 80a1712:	4620      	mov	r0, r4
 80a1714:	bd38      	pop	{r3, r4, r5, pc}
	...

080a1718 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE>:
    void setError(Error error) {
 80a1718:	b5f0      	push	{r4, r5, r6, r7, lr}
 80a171a:	b089      	sub	sp, #36	; 0x24
      { return static_cast<const __shared_ptr<_Tp, _Lp>*>(this)->get(); }
 80a171c:	6804      	ldr	r4, [r0, #0]
        p_->setError(std::move(error));
 80a171e:	4668      	mov	r0, sp
 80a1720:	f7ff ff60 	bl	80a15e4 <_ZN8particle5ErrorC1EOS0_>

      bool
      compare_exchange_strong(_Tp& __e, _Tp __i, memory_order __s,
			      memory_order __f) noexcept
      {
	return __atomic_compare_exchange(std::__addressof(_M_i),
 80a1724:	f04f 0302 	mov.w	r3, #2
 80a1728:	e8d4 2f4f 	ldrexb	r2, [r4]
 80a172c:	2a00      	cmp	r2, #0
 80a172e:	d103      	bne.n	80a1738 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x20>
 80a1730:	e8c4 3f41 	strexb	r1, r3, [r4]
 80a1734:	2900      	cmp	r1, #0
 80a1736:	d1f7      	bne.n	80a1728 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x10>
        if (this->changeState(State::FAILED)) {
 80a1738:	d125      	bne.n	80a1786 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x6e>
            new(&error_) Error(std::move(error));
 80a173a:	f104 050c 	add.w	r5, r4, #12
 80a173e:	4669      	mov	r1, sp
 80a1740:	4628      	mov	r0, r5
 80a1742:	f7ff ff4f 	bl	80a15e4 <_ZN8particle5ErrorC1EOS0_>
	__atomic_store_n(&_M_i, __i, int(__m));
 80a1746:	2301      	movs	r3, #1
 80a1748:	f3bf 8f5b 	dmb	ish
 80a174c:	7063      	strb	r3, [r4, #1]

      _GLIBCXX_ALWAYS_INLINE __pointer_type
      exchange(__pointer_type __p,
	       memory_order __m = memory_order_seq_cst) noexcept
      {
	return __atomic_exchange_n(&_M_p, __p, int(__m));
 80a174e:	2000      	movs	r0, #0
 80a1750:	f3bf 8f5b 	dmb	ish
 80a1754:	f104 0308 	add.w	r3, r4, #8
 80a1758:	e853 6f00 	ldrex	r6, [r3]
 80a175c:	e843 0200 	strex	r2, r0, [r3]
 80a1760:	2a00      	cmp	r2, #0
 80a1762:	d1f9      	bne.n	80a1758 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x40>
 80a1764:	f3bf 8f5b 	dmb	ish
        if (callbackPtr) {
 80a1768:	b16e      	cbz	r6, 80a1786 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x6e>
        return (application_thread_current(nullptr) != 0);
 80a176a:	f7ff fb63 	bl	80a0e34 <application_thread_current>
        if (ContextT::isApplicationThreadCurrent()) {
 80a176e:	b178      	cbz	r0, 80a1790 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x78>
            callback(std::forward<ArgsT>(args)...); // Synchronous call
 80a1770:	4629      	mov	r1, r5
 80a1772:	4630      	mov	r0, r6
 80a1774:	f7ff ff8c 	bl	80a1690 <_ZNKSt8functionIFvRKN8particle5ErrorEEEclES3_>
    class function<_Res(_ArgTypes...)>
 80a1778:	4630      	mov	r0, r6
 80a177a:	f7fe ffeb 	bl	80a0754 <_ZNSt14_Function_baseD1Ev>
            delete callbackPtr;
 80a177e:	2110      	movs	r1, #16
 80a1780:	4630      	mov	r0, r6
 80a1782:	f000 fdd8 	bl	80a2336 <_ZdlPvj>
        p_->setError(std::move(error));
 80a1786:	4668      	mov	r0, sp
 80a1788:	f7ff ff39 	bl	80a15fe <_ZN8particle5ErrorD1Ev>
    }
 80a178c:	b009      	add	sp, #36	; 0x24
 80a178e:	bdf0      	pop	{r4, r5, r6, r7, pc}
	  typename __cv_quals<_Bound_args>::type...>;

     public:
      template<typename... _Args>
	explicit _Bind(const _Functor& __f, _Args&&... __args)
	: _M_f(__f), _M_bound_args(std::forward<_Args>(__args)...)
 80a1790:	4631      	mov	r1, r6
 80a1792:	a802      	add	r0, sp, #8
 80a1794:	f7ff ffb0 	bl	80a16f8 <_ZNSt8functionIFvRKN8particle5ErrorEEEC1ERKS5_>
        Error(error.type_, error.msg_) {
 80a1798:	68e0      	ldr	r0, [r4, #12]
 80a179a:	f9b4 5010 	ldrsh.w	r5, [r4, #16]
        msg_(msg ? (const char*)strdup(msg) : nullptr),
 80a179e:	b108      	cbz	r0, 80a17a4 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x8c>
 80a17a0:	f001 fab0 	bl	80a2d04 <strdup>
        type_(type) {
 80a17a4:	9006      	str	r0, [sp, #24]
            auto callbackPtr = new std::function<void()>(std::bind(callback, std::forward<ArgsT>(args)...));
 80a17a6:	2010      	movs	r0, #16
 80a17a8:	f8ad 501c 	strh.w	r5, [sp, #28]
 80a17ac:	f7fe fc73 	bl	80a0096 <_Znwj>
 80a17b0:	4605      	mov	r5, r0
 80a17b2:	b1e8      	cbz	r0, 80a17f0 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0xd8>
    _Function_base() : _M_manager(nullptr) { }
 80a17b4:	2700      	movs	r7, #0
 80a17b6:	6087      	str	r7, [r0, #8]
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
 80a17b8:	2018      	movs	r0, #24
 80a17ba:	f7fe fc6c 	bl	80a0096 <_Znwj>
 80a17be:	4604      	mov	r4, r0
 80a17c0:	b188      	cbz	r0, 80a17e6 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0xce>
	std::swap(_M_functor, __x._M_functor);
 80a17c2:	4601      	mov	r1, r0
    _Function_base() : _M_manager(nullptr) { }
 80a17c4:	6087      	str	r7, [r0, #8]
	std::swap(_M_functor, __x._M_functor);
 80a17c6:	a802      	add	r0, sp, #8
 80a17c8:	f7ff fe39 	bl	80a143e <_ZSt4swapISt9_Any_dataENSt9enable_ifIXsrSt6__and_IJSt6__not_ISt15__is_tuple_likeIT_EESt21is_move_constructibleIS5_ESt18is_move_assignableIS5_EEE5valueEvE4typeERS5_SF_>
      _Tp __tmp = _GLIBCXX_MOVE(__a);
 80a17cc:	9b04      	ldr	r3, [sp, #16]
      __a = _GLIBCXX_MOVE(__b);
 80a17ce:	68a2      	ldr	r2, [r4, #8]
      __b = _GLIBCXX_MOVE(__tmp);
 80a17d0:	60a3      	str	r3, [r4, #8]
      _Tp __tmp = _GLIBCXX_MOVE(__a);
 80a17d2:	9b05      	ldr	r3, [sp, #20]
      __a = _GLIBCXX_MOVE(__b);
 80a17d4:	9204      	str	r2, [sp, #16]
 80a17d6:	68e2      	ldr	r2, [r4, #12]
      constexpr _Head_base(const _Head_base&) = default;
      constexpr _Head_base(_Head_base&&) = default;

      template<typename _UHead>
        constexpr _Head_base(_UHead&& __h)
	: _M_head_impl(std::forward<_UHead>(__h)) { }
 80a17d8:	a906      	add	r1, sp, #24
      __b = _GLIBCXX_MOVE(__tmp);
 80a17da:	60e3      	str	r3, [r4, #12]
 80a17dc:	f104 0010 	add.w	r0, r4, #16
      __a = _GLIBCXX_MOVE(__b);
 80a17e0:	9205      	str	r2, [sp, #20]
 80a17e2:	f7ff feff 	bl	80a15e4 <_ZN8particle5ErrorC1EOS0_>
	    _M_invoker = &_My_handler::_M_invoke;
 80a17e6:	4b08      	ldr	r3, [pc, #32]	; (80a1808 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0xf0>)
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
 80a17e8:	602c      	str	r4, [r5, #0]
	    _M_invoker = &_My_handler::_M_invoke;
 80a17ea:	60eb      	str	r3, [r5, #12]
	    _M_manager = &_My_handler::_M_manager;
 80a17ec:	4b07      	ldr	r3, [pc, #28]	; (80a180c <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0xf4>)
 80a17ee:	60ab      	str	r3, [r5, #8]
    struct _Head_base<_Idx, _Head, false>
 80a17f0:	a806      	add	r0, sp, #24
 80a17f2:	f7ff ff04 	bl	80a15fe <_ZN8particle5ErrorD1Ev>
    class function<_Res(_ArgTypes...)>
 80a17f6:	a802      	add	r0, sp, #8
 80a17f8:	f7fe ffac 	bl	80a0754 <_ZNSt14_Function_baseD1Ev>
        return (application_thread_invoke(callback, data, nullptr) == 0);
 80a17fc:	2200      	movs	r2, #0
 80a17fe:	4629      	mov	r1, r5
 80a1800:	4803      	ldr	r0, [pc, #12]	; (80a1810 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0xf8>)
 80a1802:	f7ff fb1f 	bl	80a0e44 <application_thread_invoke>
 80a1806:	e7b7      	b.n	80a1778 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x60>
 80a1808:	080a16a3 	.word	0x080a16a3
 80a180c:	080a1939 	.word	0x080a1939
 80a1810:	080a1f09 	.word	0x080a1f09

080a1814 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE>:
    desc.data = (void*)data;
    desc.funcKey = funcKey;
    return spark_function(NULL, (user_function_int_str_t*)&desc, NULL);
}

Future<bool> CloudClass::publish_event(const char *eventName, const char *eventData, int ttl, PublishFlags flags) {
 80a1814:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80a1818:	b08a      	sub	sp, #40	; 0x28
 80a181a:	4605      	mov	r5, r0
 80a181c:	460c      	mov	r4, r1
 80a181e:	4617      	mov	r7, r2
 80a1820:	4698      	mov	r8, r3
 80a1822:	f89d 9048 	ldrb.w	r9, [sp, #72]	; 0x48
    static void sleep(Spark_Sleep_TypeDef sleepMode, long seconds=0) __attribute__ ((deprecated("Please use System.sleep() instead.")))
    { SystemClass::sleep(sleepMode, seconds); }
    static void sleep(uint16_t wakeUpPin, InterruptMode edgeTriggerMode, long seconds=0) __attribute__ ((deprecated("Please use System.sleep() instead.")))
    { SystemClass::sleep(wakeUpPin, edgeTriggerMode, seconds); }

    static bool connected(void) { return spark_cloud_flag_connected(); }
 80a1826:	f7ff fb79 	bl	80a0f1c <spark_cloud_flag_connected>
 80a182a:	ae07      	add	r6, sp, #28
    if (!connected()) {
 80a182c:	4682      	mov	sl, r0
 80a182e:	bb38      	cbnz	r0, 80a1880 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0x6c>
        type_(type) {
 80a1830:	f64f 732e 	movw	r3, #65326	; 0xff2e
 80a1834:	9005      	str	r0, [sp, #20]
    typedef typename detail::FutureImpl<ResultT, ContextT>::OnSuccessCallback OnSuccessCallback;
    typedef typename detail::FutureImpl<ResultT, ContextT>::OnErrorCallback OnErrorCallback;

    // Construct failed future
    explicit FutureBase(Error error) :
            p_(new detail::FutureImpl<ResultT, ContextT>(std::move(error))) {
 80a1836:	a905      	add	r1, sp, #20
 80a1838:	4630      	mov	r0, r6
 80a183a:	f8ad 3018 	strh.w	r3, [sp, #24]
 80a183e:	f7ff fed1 	bl	80a15e4 <_ZN8particle5ErrorC1EOS0_>
 80a1842:	2014      	movs	r0, #20
 80a1844:	f7fe fc27 	bl	80a0096 <_Znwj>
 80a1848:	4604      	mov	r4, r0
 80a184a:	b148      	cbz	r0, 80a1860 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0x4c>
      constexpr atomic(_Tp __i) noexcept : _M_i(__i) { }
 80a184c:	2302      	movs	r3, #2
 80a184e:	7003      	strb	r3, [r0, #0]
      constexpr __atomic_base(__int_type __i) noexcept : _M_i (__i) { }
 80a1850:	2301      	movs	r3, #1
      constexpr __atomic_base(__pointer_type __p) noexcept : _M_p (__p) { }
 80a1852:	e9c0 aa01 	strd	sl, sl, [r0, #4]
      constexpr __atomic_base(__int_type __i) noexcept : _M_i (__i) { }
 80a1856:	7043      	strb	r3, [r0, #1]
            error_(std::move(error)) {
 80a1858:	4631      	mov	r1, r6
 80a185a:	300c      	adds	r0, #12
 80a185c:	f7ff fec2 	bl	80a15e4 <_ZN8particle5ErrorC1EOS0_>
	: _M_ptr(__p), _M_refcount(__p, typename is_array<_Tp>::type())
 80a1860:	4628      	mov	r0, r5
	: __shared_count(__p)
 80a1862:	4621      	mov	r1, r4
	: _M_ptr(__p), _M_refcount(__p, typename is_array<_Tp>::type())
 80a1864:	f840 4b04 	str.w	r4, [r0], #4
	: __shared_count(__p)
 80a1868:	f7ff ff32 	bl	80a16d0 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1IPN8particle6detail10FutureImplIbNS5_13FutureContextEEEEET_>
            p_(new detail::FutureImpl<ResultT, ContextT>(std::move(error))) {
 80a186c:	4630      	mov	r0, r6
 80a186e:	f7ff fec6 	bl	80a15fe <_ZN8particle5ErrorD1Ev>
    }

    explicit FutureBase(Error::Type error) :
            FutureBase(Error(error)) {
 80a1872:	a805      	add	r0, sp, #20
 80a1874:	f7ff fec3 	bl	80a15fe <_ZN8particle5ErrorD1Ev>
        p.setError(Error::UNKNOWN);
        p.fromDataPtr(d.handler_data); // Free wrapper object
    }

    return p.future();
}
 80a1878:	4628      	mov	r0, r5
 80a187a:	b00a      	add	sp, #40	; 0x28
 80a187c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    spark_send_event_data d = { sizeof(spark_send_event_data) };
 80a1880:	230c      	movs	r3, #12
 80a1882:	f04f 0a00 	mov.w	sl, #0
            p_(new detail::FutureImpl<ResultT, ContextT>(State::RUNNING)) {
 80a1886:	2014      	movs	r0, #20
 80a1888:	e9cd aa08 	strd	sl, sl, [sp, #32]
 80a188c:	9307      	str	r3, [sp, #28]
 80a188e:	f7fe fc02 	bl	80a0096 <_Znwj>
 80a1892:	4601      	mov	r1, r0
 80a1894:	b128      	cbz	r0, 80a18a2 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0x8e>
      constexpr __atomic_base(__pointer_type __p) noexcept : _M_p (__p) { }
 80a1896:	e9c0 aa01 	strd	sl, sl, [r0, #4]
 80a189a:	f880 a000 	strb.w	sl, [r0]
      constexpr __atomic_base(__int_type __i) noexcept : _M_i (__i) { }
 80a189e:	f880 a001 	strb.w	sl, [r0, #1]
 80a18a2:	a804      	add	r0, sp, #16
	: _M_ptr(__p), _M_refcount(__p, typename is_array<_Tp>::type())
 80a18a4:	9103      	str	r1, [sp, #12]
	: __shared_count(__p)
 80a18a6:	f7ff ff13 	bl	80a16d0 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1IPN8particle6detail10FutureImplIbNS5_13FutureContextEEEEET_>
    d.handler_callback = publishCompletionCallback;
 80a18aa:	4b22      	ldr	r3, [pc, #136]	; (80a1934 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0x120>)
        return new detail::FutureImplPtr<ResultT, ContextT>(p_);
 80a18ac:	2008      	movs	r0, #8
 80a18ae:	9308      	str	r3, [sp, #32]
 80a18b0:	f7fe fbf1 	bl	80a0096 <_Znwj>
 80a18b4:	4682      	mov	sl, r0
 80a18b6:	b128      	cbz	r0, 80a18c4 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0xb0>
      __shared_ptr(const __shared_ptr&) noexcept = default;
 80a18b8:	9b03      	ldr	r3, [sp, #12]
 80a18ba:	a904      	add	r1, sp, #16
 80a18bc:	f840 3b04 	str.w	r3, [r0], #4
 80a18c0:	f7ff fd9b 	bl	80a13fa <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_>
    if (!spark_send_event(eventName, eventData, ttl, flags.value(), &d) && !p.isDone()) {
 80a18c4:	4642      	mov	r2, r8
 80a18c6:	4639      	mov	r1, r7
 80a18c8:	4620      	mov	r0, r4
 80a18ca:	9600      	str	r6, [sp, #0]
 80a18cc:	fa5f f389 	uxtb.w	r3, r9
    d.handler_data = p.dataPtr();
 80a18d0:	f8cd a024 	str.w	sl, [sp, #36]	; 0x24
    if (!spark_send_event(eventName, eventData, ttl, flags.value(), &d) && !p.isDone()) {
 80a18d4:	f7ff fb2a 	bl	80a0f2c <spark_send_event>
 80a18d8:	b9b8      	cbnz	r0, 80a190a <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0xf6>
	return __atomic_load_n(&_M_i, int(__m));
 80a18da:	9b03      	ldr	r3, [sp, #12]
 80a18dc:	785b      	ldrb	r3, [r3, #1]
 80a18de:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 80a18e2:	b993      	cbnz	r3, 80a190a <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0xf6>
 80a18e4:	f64f 739c 	movw	r3, #65436	; 0xff9c
        p.setError(Error::UNKNOWN);
 80a18e8:	a905      	add	r1, sp, #20
 80a18ea:	a803      	add	r0, sp, #12
 80a18ec:	9205      	str	r2, [sp, #20]
 80a18ee:	f8ad 3018 	strh.w	r3, [sp, #24]
 80a18f2:	f7ff ff11 	bl	80a1718 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE>
 80a18f6:	a805      	add	r0, sp, #20
 80a18f8:	f7ff fe81 	bl	80a15fe <_ZN8particle5ErrorD1Ev>
        p.fromDataPtr(d.handler_data); // Free wrapper object
 80a18fc:	a805      	add	r0, sp, #20
 80a18fe:	9909      	ldr	r1, [sp, #36]	; 0x24
 80a1900:	f7ff fea7 	bl	80a1652 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE11fromDataPtrEPv>
      ~__shared_ptr() = default;
 80a1904:	a806      	add	r0, sp, #24
 80a1906:	f7ff fd62 	bl	80a13ce <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
      __shared_ptr(const __shared_ptr&) noexcept = default;
 80a190a:	9b03      	ldr	r3, [sp, #12]
 80a190c:	a904      	add	r1, sp, #16
 80a190e:	a806      	add	r0, sp, #24
 80a1910:	9305      	str	r3, [sp, #20]
 80a1912:	f7ff fd72 	bl	80a13fa <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_>
      : _M_ptr(__r._M_ptr), _M_refcount()
 80a1916:	9b05      	ldr	r3, [sp, #20]
	_Sp_counted_base<_Lp>* __tmp = __r._M_pi;
 80a1918:	9a06      	ldr	r2, [sp, #24]
      : _M_ptr(__r._M_ptr), _M_refcount()
 80a191a:	602b      	str	r3, [r5, #0]
	__r._M_pi = _M_pi;
 80a191c:	2300      	movs	r3, #0
	_M_pi = __tmp;
 80a191e:	606a      	str	r2, [r5, #4]
      ~__shared_ptr() = default;
 80a1920:	a806      	add	r0, sp, #24
	__r._M_pi = _M_pi;
 80a1922:	9306      	str	r3, [sp, #24]
	__r._M_ptr = 0;
 80a1924:	9305      	str	r3, [sp, #20]
      ~__shared_ptr() = default;
 80a1926:	f7ff fd52 	bl	80a13ce <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
 80a192a:	a804      	add	r0, sp, #16
 80a192c:	f7ff fd4f 	bl	80a13ce <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
class Promise: public PromiseBase<ResultT, ContextT> {
 80a1930:	e7a2      	b.n	80a1878 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0x64>
 80a1932:	bf00      	nop
 80a1934:	080a19fd 	.word	0x080a19fd

080a1938 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation>:
	  switch (__op)
 80a1938:	2a02      	cmp	r2, #2
	_M_manager(_Any_data& __dest, const _Any_data& __source,
 80a193a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80a193c:	4605      	mov	r5, r0
	  switch (__op)
 80a193e:	d007      	beq.n	80a1950 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x18>
 80a1940:	2a03      	cmp	r2, #3
 80a1942:	d018      	beq.n	80a1976 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x3e>
 80a1944:	2a01      	cmp	r2, #1
 80a1946:	d101      	bne.n	80a194c <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x14>
	    return __source._M_access<_Functor*>();
 80a1948:	680b      	ldr	r3, [r1, #0]
	      __dest._M_access<_Functor*>() = _M_get_pointer(__source);
 80a194a:	6003      	str	r3, [r0, #0]
	}
 80a194c:	2000      	movs	r0, #0
 80a194e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	    new _Functor(*__source._M_access<const _Functor*>());
 80a1950:	2018      	movs	r0, #24
	  __dest._M_access<_Functor*>() =
 80a1952:	680e      	ldr	r6, [r1, #0]
	    new _Functor(*__source._M_access<const _Functor*>());
 80a1954:	f7fe fb9f 	bl	80a0096 <_Znwj>
 80a1958:	4604      	mov	r4, r0
 80a195a:	b150      	cbz	r0, 80a1972 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x3a>
      template<typename... _Args>
	explicit _Bind(_Functor&& __f, _Args&&... __args)
	: _M_f(std::move(__f)), _M_bound_args(std::forward<_Args>(__args)...)
	{ }

      _Bind(const _Bind&) = default;
 80a195c:	4631      	mov	r1, r6
 80a195e:	f7ff fecb 	bl	80a16f8 <_ZNSt8functionIFvRKN8particle5ErrorEEEC1ERKS5_>
        Error(error.type_, error.msg_) {
 80a1962:	6930      	ldr	r0, [r6, #16]
 80a1964:	f9b6 7014 	ldrsh.w	r7, [r6, #20]
        msg_(msg ? (const char*)strdup(msg) : nullptr),
 80a1968:	b108      	cbz	r0, 80a196e <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x36>
 80a196a:	f001 f9cb 	bl	80a2d04 <strdup>
        type_(type) {
 80a196e:	6120      	str	r0, [r4, #16]
 80a1970:	82a7      	strh	r7, [r4, #20]
	  __dest._M_access<_Functor*>() =
 80a1972:	602c      	str	r4, [r5, #0]
	}
 80a1974:	e7ea      	b.n	80a194c <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x14>
	  delete __victim._M_access<_Functor*>();
 80a1976:	6804      	ldr	r4, [r0, #0]
 80a1978:	2c00      	cmp	r4, #0
 80a197a:	d0e7      	beq.n	80a194c <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x14>
 80a197c:	f104 0010 	add.w	r0, r4, #16
 80a1980:	f7ff fe3d 	bl	80a15fe <_ZN8particle5ErrorD1Ev>
    class function<_Res(_ArgTypes...)>
 80a1984:	4620      	mov	r0, r4
 80a1986:	f7fe fee5 	bl	80a0754 <_ZNSt14_Function_baseD1Ev>
	  delete __victim._M_access<_Functor*>();
 80a198a:	2118      	movs	r1, #24
 80a198c:	4620      	mov	r0, r4
 80a198e:	f000 fcd2 	bl	80a2336 <_ZdlPvj>
 80a1992:	e7db      	b.n	80a194c <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x14>

080a1994 <_ZNSt8functionIFvRKbEEC1ERKS3_>:
    function<_Res(_ArgTypes...)>::
 80a1994:	b538      	push	{r3, r4, r5, lr}
    _Function_base() : _M_manager(nullptr) { }
 80a1996:	2300      	movs	r3, #0
 80a1998:	6083      	str	r3, [r0, #8]
      { return !_M_empty(); }
 80a199a:	688b      	ldr	r3, [r1, #8]
    function<_Res(_ArgTypes...)>::
 80a199c:	4604      	mov	r4, r0
 80a199e:	460d      	mov	r5, r1
      if (static_cast<bool>(__x))
 80a19a0:	b12b      	cbz	r3, 80a19ae <_ZNSt8functionIFvRKbEEC1ERKS3_+0x1a>
	  __x._M_manager(_M_functor, __x._M_functor, __clone_functor);
 80a19a2:	2202      	movs	r2, #2
 80a19a4:	4798      	blx	r3
	  _M_invoker = __x._M_invoker;
 80a19a6:	68eb      	ldr	r3, [r5, #12]
 80a19a8:	60e3      	str	r3, [r4, #12]
	  _M_manager = __x._M_manager;
 80a19aa:	68ab      	ldr	r3, [r5, #8]
 80a19ac:	60a3      	str	r3, [r4, #8]
    }
 80a19ae:	4620      	mov	r0, r4
 80a19b0:	bd38      	pop	{r3, r4, r5, pc}

080a19b2 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation>:
	  switch (__op)
 80a19b2:	2a02      	cmp	r2, #2
	_M_manager(_Any_data& __dest, const _Any_data& __source,
 80a19b4:	b570      	push	{r4, r5, r6, lr}
 80a19b6:	4604      	mov	r4, r0
	  switch (__op)
 80a19b8:	d007      	beq.n	80a19ca <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x18>
 80a19ba:	2a03      	cmp	r2, #3
 80a19bc:	d012      	beq.n	80a19e4 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x32>
 80a19be:	2a01      	cmp	r2, #1
 80a19c0:	d101      	bne.n	80a19c6 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x14>
	    return __source._M_access<_Functor*>();
 80a19c2:	680b      	ldr	r3, [r1, #0]
	      __dest._M_access<_Functor*>() = _M_get_pointer(__source);
 80a19c4:	6003      	str	r3, [r0, #0]
	}
 80a19c6:	2000      	movs	r0, #0
 80a19c8:	bd70      	pop	{r4, r5, r6, pc}
	    new _Functor(*__source._M_access<const _Functor*>());
 80a19ca:	2014      	movs	r0, #20
	  __dest._M_access<_Functor*>() =
 80a19cc:	680e      	ldr	r6, [r1, #0]
	    new _Functor(*__source._M_access<const _Functor*>());
 80a19ce:	f7fe fb62 	bl	80a0096 <_Znwj>
 80a19d2:	4605      	mov	r5, r0
 80a19d4:	b120      	cbz	r0, 80a19e0 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x2e>
 80a19d6:	4631      	mov	r1, r6
 80a19d8:	f7ff ffdc 	bl	80a1994 <_ZNSt8functionIFvRKbEEC1ERKS3_>
 80a19dc:	7c33      	ldrb	r3, [r6, #16]
 80a19de:	742b      	strb	r3, [r5, #16]
	  __dest._M_access<_Functor*>() =
 80a19e0:	6025      	str	r5, [r4, #0]
	}
 80a19e2:	e7f0      	b.n	80a19c6 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x14>
	  delete __victim._M_access<_Functor*>();
 80a19e4:	6804      	ldr	r4, [r0, #0]
 80a19e6:	2c00      	cmp	r4, #0
 80a19e8:	d0ed      	beq.n	80a19c6 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x14>
    class function<_Res(_ArgTypes...)>
 80a19ea:	4620      	mov	r0, r4
 80a19ec:	f7fe feb2 	bl	80a0754 <_ZNSt14_Function_baseD1Ev>
	  delete __victim._M_access<_Functor*>();
 80a19f0:	2114      	movs	r1, #20
 80a19f2:	4620      	mov	r0, r4
 80a19f4:	f000 fc9f 	bl	80a2336 <_ZdlPvj>
 80a19f8:	e7e5      	b.n	80a19c6 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x14>
	...

080a19fc <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_>:
void publishCompletionCallback(int error, const void* data, void* callbackData, void* reserved) {
 80a19fc:	b5f0      	push	{r4, r5, r6, r7, lr}
 80a19fe:	4604      	mov	r4, r0
 80a1a00:	b089      	sub	sp, #36	; 0x24
 80a1a02:	460d      	mov	r5, r1
    auto p = Promise<bool>::fromDataPtr(callbackData);
 80a1a04:	a801      	add	r0, sp, #4
 80a1a06:	4611      	mov	r1, r2
 80a1a08:	f7ff fe23 	bl	80a1652 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE11fromDataPtrEPv>
    if (error != Error::NONE) {
 80a1a0c:	b1a4      	cbz	r4, 80a1a38 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x3c>
        p.setError(Error((Error::Type)error, (const char*)data));
 80a1a0e:	b224      	sxth	r4, r4
        msg_(msg ? (const char*)strdup(msg) : nullptr),
 80a1a10:	b11d      	cbz	r5, 80a1a1a <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x1e>
 80a1a12:	4628      	mov	r0, r5
 80a1a14:	f001 f976 	bl	80a2d04 <strdup>
 80a1a18:	4605      	mov	r5, r0
 80a1a1a:	a801      	add	r0, sp, #4
 80a1a1c:	a903      	add	r1, sp, #12
        type_(type) {
 80a1a1e:	9503      	str	r5, [sp, #12]
 80a1a20:	f8ad 4010 	strh.w	r4, [sp, #16]
 80a1a24:	f7ff fe78 	bl	80a1718 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE>
 80a1a28:	a803      	add	r0, sp, #12
 80a1a2a:	f7ff fde8 	bl	80a15fe <_ZN8particle5ErrorD1Ev>
 80a1a2e:	a802      	add	r0, sp, #8
 80a1a30:	f7ff fccd 	bl	80a13ce <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
}
 80a1a34:	b009      	add	sp, #36	; 0x24
 80a1a36:	bdf0      	pop	{r4, r5, r6, r7, pc}
	return __atomic_compare_exchange(std::__addressof(_M_i),
 80a1a38:	2301      	movs	r3, #1
      { return static_cast<const __shared_ptr<_Tp, _Lp>*>(this)->get(); }
 80a1a3a:	9d01      	ldr	r5, [sp, #4]
 80a1a3c:	e8d5 2f4f 	ldrexb	r2, [r5]
 80a1a40:	2a00      	cmp	r2, #0
 80a1a42:	d103      	bne.n	80a1a4c <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x50>
 80a1a44:	e8c5 3f41 	strexb	r1, r3, [r5]
 80a1a48:	2900      	cmp	r1, #0
 80a1a4a:	d1f7      	bne.n	80a1a3c <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x40>
        if (this->changeState(State::SUCCEEDED)) {
 80a1a4c:	d1ef      	bne.n	80a1a2e <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x32>
            new(&result_) ResultT(std::move(result));
 80a1a4e:	732b      	strb	r3, [r5, #12]
	__atomic_store_n(&_M_i, __i, int(__m));
 80a1a50:	f3bf 8f5b 	dmb	ish
 80a1a54:	706b      	strb	r3, [r5, #1]
	return __atomic_exchange_n(&_M_p, __p, int(__m));
 80a1a56:	f3bf 8f5b 	dmb	ish
 80a1a5a:	1d2b      	adds	r3, r5, #4
 80a1a5c:	e853 6f00 	ldrex	r6, [r3]
 80a1a60:	e843 4200 	strex	r2, r4, [r3]
 80a1a64:	2a00      	cmp	r2, #0
 80a1a66:	d1f9      	bne.n	80a1a5c <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x60>
 80a1a68:	f3bf 8f5b 	dmb	ish
        if (callbackPtr) {
 80a1a6c:	2e00      	cmp	r6, #0
 80a1a6e:	d0de      	beq.n	80a1a2e <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x32>
        return (application_thread_current(nullptr) != 0);
 80a1a70:	4620      	mov	r0, r4
 80a1a72:	f7ff f9df 	bl	80a0e34 <application_thread_current>
        if (ContextT::isApplicationThreadCurrent()) {
 80a1a76:	4607      	mov	r7, r0
 80a1a78:	b160      	cbz	r0, 80a1a94 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x98>
            callback(std::forward<ArgsT>(args)...); // Synchronous call
 80a1a7a:	4630      	mov	r0, r6
 80a1a7c:	f105 010c 	add.w	r1, r5, #12
 80a1a80:	f7ff fe16 	bl	80a16b0 <_ZNKSt8functionIFvRKbEEclES1_>
    class function<_Res(_ArgTypes...)>
 80a1a84:	4630      	mov	r0, r6
 80a1a86:	f7fe fe65 	bl	80a0754 <_ZNSt14_Function_baseD1Ev>
            delete callbackPtr;
 80a1a8a:	2110      	movs	r1, #16
 80a1a8c:	4630      	mov	r0, r6
 80a1a8e:	f000 fc52 	bl	80a2336 <_ZdlPvj>
 80a1a92:	e7cc      	b.n	80a1a2e <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x32>
	: _M_f(__f), _M_bound_args(std::forward<_Args>(__args)...)
 80a1a94:	4631      	mov	r1, r6
 80a1a96:	a803      	add	r0, sp, #12
 80a1a98:	f7ff ff7c 	bl	80a1994 <_ZNSt8functionIFvRKbEEC1ERKS3_>
	: _M_head_impl(std::forward<_UHead>(__h)) { }
 80a1a9c:	7b2b      	ldrb	r3, [r5, #12]
            auto callbackPtr = new std::function<void()>(std::bind(callback, std::forward<ArgsT>(args)...));
 80a1a9e:	2010      	movs	r0, #16
 80a1aa0:	f88d 301c 	strb.w	r3, [sp, #28]
 80a1aa4:	f7fe faf7 	bl	80a0096 <_Znwj>
 80a1aa8:	4605      	mov	r5, r0
 80a1aaa:	b1d0      	cbz	r0, 80a1ae2 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0xe6>
    _Function_base() : _M_manager(nullptr) { }
 80a1aac:	6087      	str	r7, [r0, #8]
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
 80a1aae:	2014      	movs	r0, #20
 80a1ab0:	f7fe faf1 	bl	80a0096 <_Znwj>
 80a1ab4:	4604      	mov	r4, r0
 80a1ab6:	b178      	cbz	r0, 80a1ad8 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0xdc>
	std::swap(_M_functor, __x._M_functor);
 80a1ab8:	4601      	mov	r1, r0
    _Function_base() : _M_manager(nullptr) { }
 80a1aba:	6087      	str	r7, [r0, #8]
	std::swap(_M_functor, __x._M_functor);
 80a1abc:	a803      	add	r0, sp, #12
 80a1abe:	f7ff fcbe 	bl	80a143e <_ZSt4swapISt9_Any_dataENSt9enable_ifIXsrSt6__and_IJSt6__not_ISt15__is_tuple_likeIT_EESt21is_move_constructibleIS5_ESt18is_move_assignableIS5_EEE5valueEvE4typeERS5_SF_>
      _Tp __tmp = _GLIBCXX_MOVE(__a);
 80a1ac2:	9b05      	ldr	r3, [sp, #20]
      __a = _GLIBCXX_MOVE(__b);
 80a1ac4:	68a2      	ldr	r2, [r4, #8]
      __b = _GLIBCXX_MOVE(__tmp);
 80a1ac6:	60a3      	str	r3, [r4, #8]
      _Tp __tmp = _GLIBCXX_MOVE(__a);
 80a1ac8:	9b06      	ldr	r3, [sp, #24]
      __a = _GLIBCXX_MOVE(__b);
 80a1aca:	9205      	str	r2, [sp, #20]
 80a1acc:	68e2      	ldr	r2, [r4, #12]
      __b = _GLIBCXX_MOVE(__tmp);
 80a1ace:	60e3      	str	r3, [r4, #12]
 80a1ad0:	f89d 301c 	ldrb.w	r3, [sp, #28]
      __a = _GLIBCXX_MOVE(__b);
 80a1ad4:	9206      	str	r2, [sp, #24]
 80a1ad6:	7423      	strb	r3, [r4, #16]
	    _M_invoker = &_My_handler::_M_invoke;
 80a1ad8:	4b06      	ldr	r3, [pc, #24]	; (80a1af4 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0xf8>)
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
 80a1ada:	602c      	str	r4, [r5, #0]
	    _M_invoker = &_My_handler::_M_invoke;
 80a1adc:	60eb      	str	r3, [r5, #12]
	    _M_manager = &_My_handler::_M_manager;
 80a1ade:	4b06      	ldr	r3, [pc, #24]	; (80a1af8 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0xfc>)
 80a1ae0:	60ab      	str	r3, [r5, #8]
    class function<_Res(_ArgTypes...)>
 80a1ae2:	a803      	add	r0, sp, #12
 80a1ae4:	f7fe fe36 	bl	80a0754 <_ZNSt14_Function_baseD1Ev>
        return (application_thread_invoke(callback, data, nullptr) == 0);
 80a1ae8:	2200      	movs	r2, #0
 80a1aea:	4629      	mov	r1, r5
 80a1aec:	4803      	ldr	r0, [pc, #12]	; (80a1afc <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x100>)
 80a1aee:	f7ff f9a9 	bl	80a0e44 <application_thread_invoke>
 80a1af2:	e7c7      	b.n	80a1a84 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x88>
 80a1af4:	080a16c3 	.word	0x080a16c3
 80a1af8:	080a19b3 	.word	0x080a19b3
 80a1afc:	080a1f09 	.word	0x080a1f09

080a1b00 <_ZN9IPAddressD1Ev>:
    IPAddress(uint8_t first_octet, uint8_t second_octet, uint8_t third_octet, uint8_t fourth_octet);
    IPAddress(uint32_t address);
    IPAddress(const uint8_t* address);
    IPAddress(const HAL_IPAddress& address);

    virtual ~IPAddress() {}
 80a1b00:	4770      	bx	lr

080a1b02 <_ZN9IPAddressD0Ev>:
 80a1b02:	b510      	push	{r4, lr}
 80a1b04:	4604      	mov	r4, r0
 80a1b06:	2118      	movs	r1, #24
 80a1b08:	f000 fc15 	bl	80a2336 <_ZdlPvj>
 80a1b0c:	4620      	mov	r0, r4
 80a1b0e:	bd10      	pop	{r4, pc}

080a1b10 <_ZNK9IPAddress7printToER5Print>:
#endif // Wiring_IPv6
	return address.ipv4==that.address.ipv4;
}

size_t IPAddress::printTo(Print& p) const
{
 80a1b10:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80a1b12:	460e      	mov	r6, r1
 80a1b14:	2400      	movs	r4, #0
 80a1b16:	f100 0708 	add.w	r7, r0, #8
 80a1b1a:	1d05      	adds	r5, r0, #4
            val = n;
        }
#if __GNUC__ >= 9
#pragma GCC diagnostic pop
#endif // __GNUC__ >= 9
        return printNumber(val, base) + t;
 80a1b1c:	f817 1d01 	ldrb.w	r1, [r7, #-1]!
 80a1b20:	220a      	movs	r2, #10
 80a1b22:	4630      	mov	r0, r6
 80a1b24:	f7ff fbff 	bl	80a1326 <_ZN5Print11printNumberEmh>
#else
#pragma message "HAL_USE_INET_HAL_POSIX is required for IPv6 support in IPAddress::printTo()"
#endif // HAL_USE_INET_HAL_POSIX
#endif // Wiring_IPv6
    size_t n = 0;
    for (int i = 0; i < 4; i++)
 80a1b28:	42af      	cmp	r7, r5
    {
        if (n)
            n += p.print('.');
        n += p.print((*this)[i], DEC);
 80a1b2a:	4404      	add	r4, r0
    for (int i = 0; i < 4; i++)
 80a1b2c:	d101      	bne.n	80a1b32 <_ZNK9IPAddress7printToER5Print+0x22>
    }
    return n;
}
 80a1b2e:	4620      	mov	r0, r4
 80a1b30:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        if (n)
 80a1b32:	2c00      	cmp	r4, #0
 80a1b34:	d0f2      	beq.n	80a1b1c <_ZNK9IPAddress7printToER5Print+0xc>
            n += p.print('.');
 80a1b36:	212e      	movs	r1, #46	; 0x2e
 80a1b38:	4630      	mov	r0, r6
 80a1b3a:	f7ff fbdb 	bl	80a12f4 <_ZN5Print5printEc>
 80a1b3e:	4404      	add	r4, r0
 80a1b40:	e7ec      	b.n	80a1b1c <_ZNK9IPAddress7printToER5Print+0xc>
	...

080a1b44 <_ZN9IPAddressC1Ev>:
IPAddress::IPAddress()
 80a1b44:	b510      	push	{r4, lr}
 80a1b46:	4604      	mov	r4, r0
 80a1b48:	4b04      	ldr	r3, [pc, #16]	; (80a1b5c <_ZN9IPAddressC1Ev+0x18>)
        return address;
    }

    virtual size_t printTo(Print& p) const;

    void clear() { memset(&address, 0, sizeof (address)); }
 80a1b4a:	2211      	movs	r2, #17
 80a1b4c:	2100      	movs	r1, #0
 80a1b4e:	f840 3b04 	str.w	r3, [r0], #4
 80a1b52:	f001 f8a3 	bl	80a2c9c <memset>
}
 80a1b56:	4620      	mov	r0, r4
 80a1b58:	bd10      	pop	{r4, pc}
 80a1b5a:	bf00      	nop
 80a1b5c:	080a2f14 	.word	0x080a2f14

080a1b60 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t>:
IPAddress::IPAddress(const HAL_IPAddress& address)
 80a1b60:	4603      	mov	r3, r0
 80a1b62:	4a07      	ldr	r2, [pc, #28]	; (80a1b80 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t+0x20>)
 80a1b64:	b510      	push	{r4, lr}
 80a1b66:	f843 2b04 	str.w	r2, [r3], #4
    memcpy(&this->address, &address, sizeof(address));
 80a1b6a:	f101 0210 	add.w	r2, r1, #16
 80a1b6e:	f851 4b04 	ldr.w	r4, [r1], #4
 80a1b72:	4291      	cmp	r1, r2
 80a1b74:	f843 4b04 	str.w	r4, [r3], #4
 80a1b78:	d1f9      	bne.n	80a1b6e <_ZN9IPAddressC1ERK16_HAL_IPAddress_t+0xe>
 80a1b7a:	780a      	ldrb	r2, [r1, #0]
 80a1b7c:	701a      	strb	r2, [r3, #0]
}
 80a1b7e:	bd10      	pop	{r4, pc}
 80a1b80:	080a2f14 	.word	0x080a2f14

080a1b84 <_ZN9IPAddressC1Em>:
IPAddress::IPAddress(uint32_t address)
 80a1b84:	4a02      	ldr	r2, [pc, #8]	; (80a1b90 <_ZN9IPAddressC1Em+0xc>)
    address.ipv4 = ipv4;
 80a1b86:	e9c0 2100 	strd	r2, r1, [r0]
        address.v = version;
 80a1b8a:	2204      	movs	r2, #4
 80a1b8c:	7502      	strb	r2, [r0, #20]
}
 80a1b8e:	4770      	bx	lr
 80a1b90:	080a2f14 	.word	0x080a2f14

080a1b94 <_ZN9IPAddress8set_ipv4Ehhhh>:
{
 80a1b94:	b510      	push	{r4, lr}
    address.ipv4 = b0<<24 | b1 << 16 | b2 << 8 | b3;
 80a1b96:	f89d 4008 	ldrb.w	r4, [sp, #8]
 80a1b9a:	ea44 2403 	orr.w	r4, r4, r3, lsl #8
 80a1b9e:	2304      	movs	r3, #4
 80a1ba0:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 80a1ba4:	ea44 6401 	orr.w	r4, r4, r1, lsl #24
 80a1ba8:	6044      	str	r4, [r0, #4]
 80a1baa:	7503      	strb	r3, [r0, #20]
}
 80a1bac:	bd10      	pop	{r4, pc}
	...

080a1bb0 <_ZN9IPAddressC1Ehhhh>:
IPAddress::IPAddress(uint8_t first_octet, uint8_t second_octet, uint8_t third_octet, uint8_t fourth_octet)
 80a1bb0:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80a1bb2:	4d04      	ldr	r5, [pc, #16]	; (80a1bc4 <_ZN9IPAddressC1Ehhhh+0x14>)
 80a1bb4:	6005      	str	r5, [r0, #0]
    set_ipv4(first_octet, second_octet, third_octet, fourth_octet);
 80a1bb6:	f89d 5018 	ldrb.w	r5, [sp, #24]
 80a1bba:	9500      	str	r5, [sp, #0]
 80a1bbc:	f7ff ffea 	bl	80a1b94 <_ZN9IPAddress8set_ipv4Ehhhh>
}
 80a1bc0:	b003      	add	sp, #12
 80a1bc2:	bd30      	pop	{r4, r5, pc}
 80a1bc4:	080a2f14 	.word	0x080a2f14

080a1bc8 <_ZN9USBSerial14blockOnOverrunEb>:
  HAL_USB_USART_Flush_Data(_serial);
}

void USBSerial::blockOnOverrun(bool block)
{
  _blocking = block;
 80a1bc8:	7441      	strb	r1, [r0, #17]
}
 80a1bca:	4770      	bx	lr

080a1bcc <_ZN9USBSerialD1Ev>:
#include "usb_hal.h"
#include "system_task.h"
#include "spark_wiring_startup.h"
#include "concurrent_hal.h"

class USBSerial : public Stream
 80a1bcc:	4770      	bx	lr

080a1bce <_ZN9USBSerial4readEv>:
{
 80a1bce:	b508      	push	{r3, lr}
	return std::max(-1, (int)HAL_USB_USART_Receive_Data(_serial, false));
 80a1bd0:	2100      	movs	r1, #0
 80a1bd2:	7c00      	ldrb	r0, [r0, #16]
 80a1bd4:	f7ff f8fe 	bl	80a0dd4 <HAL_USB_USART_Receive_Data>
}
 80a1bd8:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
 80a1bdc:	bd08      	pop	{r3, pc}

080a1bde <_ZN9USBSerial4peekEv>:

int USBSerial::peek()
{
 80a1bde:	b508      	push	{r3, lr}
	return std::max(-1, (int)HAL_USB_USART_Receive_Data(_serial, true));
 80a1be0:	2101      	movs	r1, #1
 80a1be2:	7c00      	ldrb	r0, [r0, #16]
 80a1be4:	f7ff f8f6 	bl	80a0dd4 <HAL_USB_USART_Receive_Data>
}
 80a1be8:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
 80a1bec:	bd08      	pop	{r3, pc}

080a1bee <_ZN9USBSerial17availableForWriteEv>:
{
 80a1bee:	b508      	push	{r3, lr}
  return std::max(0, (int)HAL_USB_USART_Available_Data_For_Write(_serial));
 80a1bf0:	7c00      	ldrb	r0, [r0, #16]
 80a1bf2:	f7ff f8e7 	bl	80a0dc4 <HAL_USB_USART_Available_Data_For_Write>
}
 80a1bf6:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
 80a1bfa:	bd08      	pop	{r3, pc}

080a1bfc <_ZN9USBSerial9availableEv>:
{
 80a1bfc:	b508      	push	{r3, lr}
	return std::max(0, (int)HAL_USB_USART_Available_Data(_serial));
 80a1bfe:	7c00      	ldrb	r0, [r0, #16]
 80a1c00:	f7ff f8d8 	bl	80a0db4 <HAL_USB_USART_Available_Data>
}
 80a1c04:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
 80a1c08:	bd08      	pop	{r3, pc}

080a1c0a <_ZN9USBSerial5writeEh>:
{
 80a1c0a:	b538      	push	{r3, r4, r5, lr}
 80a1c0c:	4604      	mov	r4, r0
  if (HAL_USB_USART_Available_Data_For_Write(_serial) > 0 || _blocking) {
 80a1c0e:	7c00      	ldrb	r0, [r0, #16]
{
 80a1c10:	460d      	mov	r5, r1
  if (HAL_USB_USART_Available_Data_For_Write(_serial) > 0 || _blocking) {
 80a1c12:	f7ff f8d7 	bl	80a0dc4 <HAL_USB_USART_Available_Data_For_Write>
 80a1c16:	2800      	cmp	r0, #0
 80a1c18:	dc01      	bgt.n	80a1c1e <_ZN9USBSerial5writeEh+0x14>
 80a1c1a:	7c60      	ldrb	r0, [r4, #17]
 80a1c1c:	b128      	cbz	r0, 80a1c2a <_ZN9USBSerial5writeEh+0x20>
    return std::max(0, (int)HAL_USB_USART_Send_Data(_serial, byte));
 80a1c1e:	4629      	mov	r1, r5
 80a1c20:	7c20      	ldrb	r0, [r4, #16]
 80a1c22:	f7ff f8df 	bl	80a0de4 <HAL_USB_USART_Send_Data>
 80a1c26:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
}
 80a1c2a:	bd38      	pop	{r3, r4, r5, pc}

080a1c2c <_ZN9USBSerial5flushEv>:
  HAL_USB_USART_Flush_Data(_serial);
 80a1c2c:	7c00      	ldrb	r0, [r0, #16]
 80a1c2e:	f7ff b8e1 	b.w	80a0df4 <HAL_USB_USART_Flush_Data>

080a1c32 <_ZN9USBSerialD0Ev>:
 80a1c32:	b510      	push	{r4, lr}
 80a1c34:	4604      	mov	r4, r0
 80a1c36:	2114      	movs	r1, #20
 80a1c38:	f000 fb7d 	bl	80a2336 <_ZdlPvj>
 80a1c3c:	4620      	mov	r0, r4
 80a1c3e:	bd10      	pop	{r4, pc}

080a1c40 <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config>:
USBSerial::USBSerial(HAL_USB_USART_Serial serial, const HAL_USB_USART_Config& conf)
 80a1c40:	b510      	push	{r4, lr}
    virtual int available() = 0;
    virtual int read() = 0;
    virtual int peek() = 0;
    virtual void flush() = 0;

    Stream() {_timeout=1000;}
 80a1c42:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80a1c46:	4604      	mov	r4, r0
 80a1c48:	4608      	mov	r0, r1
 80a1c4a:	2100      	movs	r1, #0
 80a1c4c:	e9c4 1301 	strd	r1, r3, [r4, #4]
 80a1c50:	4b04      	ldr	r3, [pc, #16]	; (80a1c64 <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config+0x24>)
  _serial = serial;
 80a1c52:	7420      	strb	r0, [r4, #16]
USBSerial::USBSerial(HAL_USB_USART_Serial serial, const HAL_USB_USART_Config& conf)
 80a1c54:	6023      	str	r3, [r4, #0]
  _blocking = true;
 80a1c56:	2301      	movs	r3, #1
  HAL_USB_USART_Init(_serial, &conf);
 80a1c58:	4611      	mov	r1, r2
  _blocking = true;
 80a1c5a:	7463      	strb	r3, [r4, #17]
  HAL_USB_USART_Init(_serial, &conf);
 80a1c5c:	f7ff f89a 	bl	80a0d94 <HAL_USB_USART_Init>
}
 80a1c60:	4620      	mov	r0, r4
 80a1c62:	bd10      	pop	{r4, pc}
 80a1c64:	080a2f28 	.word	0x080a2f28

080a1c68 <_ZN9USBSerial5beginEl>:
    HAL_USB_USART_Begin(_serial, speed, NULL);
 80a1c68:	2200      	movs	r2, #0
 80a1c6a:	7c00      	ldrb	r0, [r0, #16]
 80a1c6c:	f7ff b89a 	b.w	80a0da4 <HAL_USB_USART_Begin>

080a1c70 <_Z19acquireSerialBufferv>:

// Preinstantiate Objects //////////////////////////////////////////////////////
#ifdef SPARK_USB_SERIAL

HAL_USB_USART_Config __attribute__((weak)) acquireSerialBuffer()
{
 80a1c70:	b510      	push	{r4, lr}
 80a1c72:	4604      	mov	r4, r0
  HAL_USB_USART_Config conf = {0};
 80a1c74:	2214      	movs	r2, #20
 80a1c76:	2100      	movs	r1, #0
 80a1c78:	f001 f810 	bl	80a2c9c <memset>

#if defined(USB_SERIAL_USERSPACE_BUFFERS) && ((MODULE_FUNCTION == MOD_FUNC_USER_PART) || (MODULE_FUNCTION == MOD_FUNC_MONO_FIRMWARE))
  static uint8_t serial_rx_buffer[USB_RX_BUFFER_SIZE];
  static uint8_t serial_tx_buffer[USB_TX_BUFFER_SIZE];

  conf.rx_buffer = serial_rx_buffer;
 80a1c7c:	4b05      	ldr	r3, [pc, #20]	; (80a1c94 <_Z19acquireSerialBufferv+0x24>)
  conf.rx_buffer_size = USB_RX_BUFFER_SIZE;
  conf.tx_buffer_size = USB_TX_BUFFER_SIZE;
#endif

  return conf;
}
 80a1c7e:	4620      	mov	r0, r4
  conf.rx_buffer = serial_rx_buffer;
 80a1c80:	6063      	str	r3, [r4, #4]
  conf.tx_buffer = serial_tx_buffer;
 80a1c82:	4b05      	ldr	r3, [pc, #20]	; (80a1c98 <_Z19acquireSerialBufferv+0x28>)
 80a1c84:	60e3      	str	r3, [r4, #12]
  conf.rx_buffer_size = USB_RX_BUFFER_SIZE;
 80a1c86:	f240 1301 	movw	r3, #257	; 0x101
 80a1c8a:	8123      	strh	r3, [r4, #8]
  conf.tx_buffer_size = USB_TX_BUFFER_SIZE;
 80a1c8c:	2381      	movs	r3, #129	; 0x81
 80a1c8e:	8223      	strh	r3, [r4, #16]
}
 80a1c90:	bd10      	pop	{r4, pc}
 80a1c92:	bf00      	nop
 80a1c94:	20000128 	.word	0x20000128
 80a1c98:	20000229 	.word	0x20000229

080a1c9c <_Z16_fetch_usbserialv>:

USBSerial& _fetch_usbserial()
{
 80a1c9c:	b530      	push	{r4, r5, lr}
  HAL_USB_USART_Config conf = acquireSerialBuffer();
	static USBSerial _usbserial(HAL_USB_USART_SERIAL, conf);
 80a1c9e:	4d0f      	ldr	r5, [pc, #60]	; (80a1cdc <_Z16_fetch_usbserialv+0x40>)
{
 80a1ca0:	b087      	sub	sp, #28
  HAL_USB_USART_Config conf = acquireSerialBuffer();
 80a1ca2:	a801      	add	r0, sp, #4
 80a1ca4:	f7ff ffe4 	bl	80a1c70 <_Z19acquireSerialBufferv>
	static USBSerial _usbserial(HAL_USB_USART_SERIAL, conf);
 80a1ca8:	7829      	ldrb	r1, [r5, #0]
 80a1caa:	f3bf 8f5b 	dmb	ish
 80a1cae:	f011 0401 	ands.w	r4, r1, #1
 80a1cb2:	d110      	bne.n	80a1cd6 <_Z16_fetch_usbserialv+0x3a>
 80a1cb4:	4628      	mov	r0, r5
 80a1cb6:	f7fe f9f4 	bl	80a00a2 <__cxa_guard_acquire>
 80a1cba:	b160      	cbz	r0, 80a1cd6 <_Z16_fetch_usbserialv+0x3a>
 80a1cbc:	4621      	mov	r1, r4
 80a1cbe:	aa01      	add	r2, sp, #4
 80a1cc0:	4807      	ldr	r0, [pc, #28]	; (80a1ce0 <_Z16_fetch_usbserialv+0x44>)
 80a1cc2:	f7ff ffbd 	bl	80a1c40 <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config>
 80a1cc6:	4628      	mov	r0, r5
 80a1cc8:	f7fe f9f0 	bl	80a00ac <__cxa_guard_release>
 80a1ccc:	4a05      	ldr	r2, [pc, #20]	; (80a1ce4 <_Z16_fetch_usbserialv+0x48>)
 80a1cce:	4906      	ldr	r1, [pc, #24]	; (80a1ce8 <_Z16_fetch_usbserialv+0x4c>)
 80a1cd0:	4803      	ldr	r0, [pc, #12]	; (80a1ce0 <_Z16_fetch_usbserialv+0x44>)
 80a1cd2:	f000 fb2b 	bl	80a232c <__aeabi_atexit>
	return _usbserial;
}
 80a1cd6:	4802      	ldr	r0, [pc, #8]	; (80a1ce0 <_Z16_fetch_usbserialv+0x44>)
 80a1cd8:	b007      	add	sp, #28
 80a1cda:	bd30      	pop	{r4, r5, pc}
 80a1cdc:	200000f8 	.word	0x200000f8
 80a1ce0:	20000100 	.word	0x20000100
 80a1ce4:	2000006c 	.word	0x2000006c
 80a1ce8:	080a1bcd 	.word	0x080a1bcd

080a1cec <_Z23acquireUSBSerial1Bufferv>:

#if Wiring_USBSerial1

HAL_USB_USART_Config __attribute__((weak)) acquireUSBSerial1Buffer()
{
 80a1cec:	b510      	push	{r4, lr}
 80a1cee:	4604      	mov	r4, r0
  HAL_USB_USART_Config conf = {0};
 80a1cf0:	2214      	movs	r2, #20
 80a1cf2:	2100      	movs	r1, #0
 80a1cf4:	f000 ffd2 	bl	80a2c9c <memset>

#if defined(USB_SERIAL_USERSPACE_BUFFERS) && ((MODULE_FUNCTION == MOD_FUNC_USER_PART) || (MODULE_FUNCTION == MOD_FUNC_MONO_FIRMWARE))
  static uint8_t usbserial1_rx_buffer[USB_RX_BUFFER_SIZE];
  static uint8_t usbserial1_tx_buffer[USB_TX_BUFFER_SIZE];

  conf.rx_buffer = usbserial1_rx_buffer;
 80a1cf8:	4b05      	ldr	r3, [pc, #20]	; (80a1d10 <_Z23acquireUSBSerial1Bufferv+0x24>)
  conf.rx_buffer_size = USB_RX_BUFFER_SIZE;
  conf.tx_buffer_size = USB_TX_BUFFER_SIZE;
#endif

  return conf;
}
 80a1cfa:	4620      	mov	r0, r4
  conf.rx_buffer = usbserial1_rx_buffer;
 80a1cfc:	6063      	str	r3, [r4, #4]
  conf.tx_buffer = usbserial1_tx_buffer;
 80a1cfe:	4b05      	ldr	r3, [pc, #20]	; (80a1d14 <_Z23acquireUSBSerial1Bufferv+0x28>)
 80a1d00:	60e3      	str	r3, [r4, #12]
  conf.rx_buffer_size = USB_RX_BUFFER_SIZE;
 80a1d02:	f240 1301 	movw	r3, #257	; 0x101
 80a1d06:	8123      	strh	r3, [r4, #8]
  conf.tx_buffer_size = USB_TX_BUFFER_SIZE;
 80a1d08:	2381      	movs	r3, #129	; 0x81
 80a1d0a:	8223      	strh	r3, [r4, #16]
}
 80a1d0c:	bd10      	pop	{r4, pc}
 80a1d0e:	bf00      	nop
 80a1d10:	200002aa 	.word	0x200002aa
 80a1d14:	200003ab 	.word	0x200003ab

080a1d18 <_Z17_fetch_usbserial1v>:

USBSerial& _fetch_usbserial1()
{
 80a1d18:	b510      	push	{r4, lr}
  HAL_USB_USART_Config conf = acquireUSBSerial1Buffer();
  static USBSerial _usbserial1(HAL_USB_USART_SERIAL1, conf);
 80a1d1a:	4c0f      	ldr	r4, [pc, #60]	; (80a1d58 <_Z17_fetch_usbserial1v+0x40>)
{
 80a1d1c:	b086      	sub	sp, #24
  HAL_USB_USART_Config conf = acquireUSBSerial1Buffer();
 80a1d1e:	a801      	add	r0, sp, #4
 80a1d20:	f7ff ffe4 	bl	80a1cec <_Z23acquireUSBSerial1Bufferv>
  static USBSerial _usbserial1(HAL_USB_USART_SERIAL1, conf);
 80a1d24:	7823      	ldrb	r3, [r4, #0]
 80a1d26:	f3bf 8f5b 	dmb	ish
 80a1d2a:	07db      	lsls	r3, r3, #31
 80a1d2c:	d410      	bmi.n	80a1d50 <_Z17_fetch_usbserial1v+0x38>
 80a1d2e:	4620      	mov	r0, r4
 80a1d30:	f7fe f9b7 	bl	80a00a2 <__cxa_guard_acquire>
 80a1d34:	b160      	cbz	r0, 80a1d50 <_Z17_fetch_usbserial1v+0x38>
 80a1d36:	2101      	movs	r1, #1
 80a1d38:	aa01      	add	r2, sp, #4
 80a1d3a:	4808      	ldr	r0, [pc, #32]	; (80a1d5c <_Z17_fetch_usbserial1v+0x44>)
 80a1d3c:	f7ff ff80 	bl	80a1c40 <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config>
 80a1d40:	4620      	mov	r0, r4
 80a1d42:	f7fe f9b3 	bl	80a00ac <__cxa_guard_release>
 80a1d46:	4a06      	ldr	r2, [pc, #24]	; (80a1d60 <_Z17_fetch_usbserial1v+0x48>)
 80a1d48:	4906      	ldr	r1, [pc, #24]	; (80a1d64 <_Z17_fetch_usbserial1v+0x4c>)
 80a1d4a:	4804      	ldr	r0, [pc, #16]	; (80a1d5c <_Z17_fetch_usbserial1v+0x44>)
 80a1d4c:	f000 faee 	bl	80a232c <__aeabi_atexit>
  return _usbserial1;
}
 80a1d50:	4802      	ldr	r0, [pc, #8]	; (80a1d5c <_Z17_fetch_usbserial1v+0x44>)
 80a1d52:	b006      	add	sp, #24
 80a1d54:	bd10      	pop	{r4, pc}
 80a1d56:	bf00      	nop
 80a1d58:	200000fc 	.word	0x200000fc
 80a1d5c:	20000114 	.word	0x20000114
 80a1d60:	2000006c 	.word	0x2000006c
 80a1d64:	080a1bcd 	.word	0x080a1bcd

080a1d68 <_Z29call_wiring_interrupt_handlerPv>:
      if (_M_empty())
 80a1d68:	6882      	ldr	r2, [r0, #8]
    delete handlers[pin];
    return handlers[pin] = new wiring_interrupt_handler_t(fn);
}

void call_wiring_interrupt_handler(void* data)
{
 80a1d6a:	b510      	push	{r4, lr}
 80a1d6c:	b90a      	cbnz	r2, 80a1d72 <_Z29call_wiring_interrupt_handlerPv+0xa>
	__throw_bad_function_call();
 80a1d6e:	f000 fae6 	bl	80a233e <_ZSt25__throw_bad_function_callv>
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
 80a1d72:	68c3      	ldr	r3, [r0, #12]
    wiring_interrupt_handler_t* handler = (wiring_interrupt_handler_t*)data;
    (*handler)();
}
 80a1d74:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80a1d78:	4718      	bx	r3

080a1d7a <_ZNSt8functionIFvvEEC1ERKS1_>:
    function<_Res(_ArgTypes...)>::
 80a1d7a:	b538      	push	{r3, r4, r5, lr}
    _Function_base() : _M_manager(nullptr) { }
 80a1d7c:	2300      	movs	r3, #0
 80a1d7e:	6083      	str	r3, [r0, #8]
      { return !_M_empty(); }
 80a1d80:	688b      	ldr	r3, [r1, #8]
    function<_Res(_ArgTypes...)>::
 80a1d82:	4604      	mov	r4, r0
 80a1d84:	460d      	mov	r5, r1
      if (static_cast<bool>(__x))
 80a1d86:	b12b      	cbz	r3, 80a1d94 <_ZNSt8functionIFvvEEC1ERKS1_+0x1a>
	  __x._M_manager(_M_functor, __x._M_functor, __clone_functor);
 80a1d88:	2202      	movs	r2, #2
 80a1d8a:	4798      	blx	r3
	  _M_invoker = __x._M_invoker;
 80a1d8c:	68eb      	ldr	r3, [r5, #12]
 80a1d8e:	60e3      	str	r3, [r4, #12]
	  _M_manager = __x._M_manager;
 80a1d90:	68ab      	ldr	r3, [r5, #8]
 80a1d92:	60a3      	str	r3, [r4, #8]
    }
 80a1d94:	4620      	mov	r0, r4
 80a1d96:	bd38      	pop	{r3, r4, r5, pc}

080a1d98 <_Z21attachSystemInterrupt9hal_irq_tSt8functionIFvvEE>:

/*
 * System Interrupts
 */
bool attachSystemInterrupt(hal_irq_t irq, wiring_interrupt_handler_t handler)
{
 80a1d98:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
    HAL_InterruptCallback callback;
    callback.handler = call_wiring_interrupt_handler;
 80a1d9a:	4b12      	ldr	r3, [pc, #72]	; (80a1de4 <_Z21attachSystemInterrupt9hal_irq_tSt8functionIFvvEE+0x4c>)
{
 80a1d9c:	4605      	mov	r5, r0
    wiring_interrupt_handler_t& h = handler;
    callback.data = new wiring_interrupt_handler_t(h);
 80a1d9e:	2010      	movs	r0, #16
{
 80a1da0:	460e      	mov	r6, r1
    callback.handler = call_wiring_interrupt_handler;
 80a1da2:	9300      	str	r3, [sp, #0]
    callback.data = new wiring_interrupt_handler_t(h);
 80a1da4:	f7fe f977 	bl	80a0096 <_Znwj>
 80a1da8:	4604      	mov	r4, r0
 80a1daa:	b110      	cbz	r0, 80a1db2 <_Z21attachSystemInterrupt9hal_irq_tSt8functionIFvvEE+0x1a>
 80a1dac:	4631      	mov	r1, r6
 80a1dae:	f7ff ffe4 	bl	80a1d7a <_ZNSt8functionIFvvEEC1ERKS1_>
    HAL_InterruptCallback prev = { 0 };
 80a1db2:	2300      	movs	r3, #0
    const bool ok = HAL_Set_System_Interrupt_Handler(irq, &callback, &prev, NULL);
 80a1db4:	4628      	mov	r0, r5
 80a1db6:	4669      	mov	r1, sp
 80a1db8:	aa02      	add	r2, sp, #8
    callback.data = new wiring_interrupt_handler_t(h);
 80a1dba:	9401      	str	r4, [sp, #4]
    HAL_InterruptCallback prev = { 0 };
 80a1dbc:	e9cd 3302 	strd	r3, r3, [sp, #8]
    const bool ok = HAL_Set_System_Interrupt_Handler(irq, &callback, &prev, NULL);
 80a1dc0:	f7fe ff06 	bl	80a0bd0 <HAL_Set_System_Interrupt_Handler>
    delete (wiring_interrupt_handler_t*)prev.data;
 80a1dc4:	9d03      	ldr	r5, [sp, #12]
    const bool ok = HAL_Set_System_Interrupt_Handler(irq, &callback, &prev, NULL);
 80a1dc6:	1e04      	subs	r4, r0, #0
 80a1dc8:	bf18      	it	ne
 80a1dca:	2401      	movne	r4, #1
    delete (wiring_interrupt_handler_t*)prev.data;
 80a1dcc:	b135      	cbz	r5, 80a1ddc <_Z21attachSystemInterrupt9hal_irq_tSt8functionIFvvEE+0x44>
    class function<_Res(_ArgTypes...)>
 80a1dce:	4628      	mov	r0, r5
 80a1dd0:	f7fe fcc0 	bl	80a0754 <_ZNSt14_Function_baseD1Ev>
 80a1dd4:	2110      	movs	r1, #16
 80a1dd6:	4628      	mov	r0, r5
 80a1dd8:	f000 faad 	bl	80a2336 <_ZdlPvj>
    return ok;
}
 80a1ddc:	4620      	mov	r0, r4
 80a1dde:	b004      	add	sp, #16
 80a1de0:	bd70      	pop	{r4, r5, r6, pc}
 80a1de2:	bf00      	nop
 80a1de4:	080a1d69 	.word	0x080a1d69

080a1de8 <tone>:

#include "spark_wiring_tone.h"
#include "tone_hal.h"

void tone(uint8_t pin, unsigned int frequency, unsigned long duration)
{
 80a1de8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    if (pinAvailable(pin) && HAL_Validate_Pin_Function(pin, PF_TIMER)==PF_TIMER) {
 80a1dea:	b287      	uxth	r7, r0
{
 80a1dec:	4604      	mov	r4, r0
    if (pinAvailable(pin) && HAL_Validate_Pin_Function(pin, PF_TIMER)==PF_TIMER) {
 80a1dee:	4638      	mov	r0, r7
{
 80a1df0:	460d      	mov	r5, r1
 80a1df2:	4616      	mov	r6, r2
    if (pinAvailable(pin) && HAL_Validate_Pin_Function(pin, PF_TIMER)==PF_TIMER) {
 80a1df4:	f000 f9a2 	bl	80a213c <pinAvailable>
 80a1df8:	b160      	cbz	r0, 80a1e14 <tone+0x2c>
 80a1dfa:	2102      	movs	r1, #2
 80a1dfc:	4638      	mov	r0, r7
 80a1dfe:	f7fe febf 	bl	80a0b80 <HAL_Validate_Pin_Function>
 80a1e02:	2802      	cmp	r0, #2
 80a1e04:	d106      	bne.n	80a1e14 <tone+0x2c>
        HAL_Tone_Start(pin, frequency, duration);
 80a1e06:	4632      	mov	r2, r6
 80a1e08:	4629      	mov	r1, r5
 80a1e0a:	4620      	mov	r0, r4
    }
}
 80a1e0c:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
        HAL_Tone_Start(pin, frequency, duration);
 80a1e10:	f7fe bfb8 	b.w	80a0d84 <HAL_Tone_Start>
}
 80a1e14:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

080a1e16 <_ZN11USARTSerialD1Ev>:
private:
  hal_usart_interface_t _serial;
  bool _blocking;
public:
  USARTSerial(hal_usart_interface_t serial, hal_usart_ring_buffer_t *rx_buffer, hal_usart_ring_buffer_t *tx_buffer);
  virtual ~USARTSerial() {};
 80a1e16:	4770      	bx	lr

080a1e18 <_ZN11USARTSerial14blockOnOverrunEb>:
    hal_usart_half_duplex(_serial, Enable);
}

void USARTSerial::blockOnOverrun(bool block)
{
  _blocking = block;
 80a1e18:	7441      	strb	r1, [r0, #17]
}
 80a1e1a:	4770      	bx	lr

080a1e1c <_ZN11USARTSerial17availableForWriteEv>:


int USARTSerial::availableForWrite(void)
{
 80a1e1c:	b508      	push	{r3, lr}
  return std::max(0, (int)hal_usart_available_data_for_write(_serial));
 80a1e1e:	7c00      	ldrb	r0, [r0, #16]
 80a1e20:	f7fe ff5e 	bl	80a0ce0 <hal_usart_available_data_for_write>
}
 80a1e24:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
 80a1e28:	bd08      	pop	{r3, pc}

080a1e2a <_ZN11USARTSerial9availableEv>:

int USARTSerial::available(void)
{
 80a1e2a:	b508      	push	{r3, lr}
  return std::max(0, (int)hal_usart_available(_serial));
 80a1e2c:	7c00      	ldrb	r0, [r0, #16]
 80a1e2e:	f7fe ff2f 	bl	80a0c90 <hal_usart_available>
}
 80a1e32:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
 80a1e36:	bd08      	pop	{r3, pc}

080a1e38 <_ZN11USARTSerial4peekEv>:

int USARTSerial::peek(void)
{
 80a1e38:	b508      	push	{r3, lr}
  return std::max(-1, (int)hal_usart_peek(_serial));
 80a1e3a:	7c00      	ldrb	r0, [r0, #16]
 80a1e3c:	f7fe ff38 	bl	80a0cb0 <hal_usart_peek>
}
 80a1e40:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
 80a1e44:	bd08      	pop	{r3, pc}

080a1e46 <_ZN11USARTSerial4readEv>:

int USARTSerial::read(void)
{
 80a1e46:	b508      	push	{r3, lr}
  return std::max(-1, (int)hal_usart_read(_serial));
 80a1e48:	7c00      	ldrb	r0, [r0, #16]
 80a1e4a:	f7fe ff29 	bl	80a0ca0 <hal_usart_read>
}
 80a1e4e:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
 80a1e52:	bd08      	pop	{r3, pc}

080a1e54 <_ZN11USARTSerial5flushEv>:

void USARTSerial::flush()
{
  hal_usart_flush(_serial);
 80a1e54:	7c00      	ldrb	r0, [r0, #16]
 80a1e56:	f7fe bf33 	b.w	80a0cc0 <hal_usart_flush>

080a1e5a <_ZN11USARTSerial5writeEh>:
}

size_t USARTSerial::write(uint8_t c)
{
 80a1e5a:	b570      	push	{r4, r5, r6, lr}
  // attempt a write if blocking, or for non-blocking if there is room.
  if (_blocking || hal_usart_available_data_for_write(_serial) > 0) {
 80a1e5c:	7c46      	ldrb	r6, [r0, #17]
{
 80a1e5e:	4604      	mov	r4, r0
 80a1e60:	460d      	mov	r5, r1
  if (_blocking || hal_usart_available_data_for_write(_serial) > 0) {
 80a1e62:	b12e      	cbz	r6, 80a1e70 <_ZN11USARTSerial5writeEh+0x16>
    // the HAL always blocks.
	  return hal_usart_write(_serial, c);
 80a1e64:	4629      	mov	r1, r5
 80a1e66:	7c20      	ldrb	r0, [r4, #16]
  }
  return 0;
}
 80a1e68:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	  return hal_usart_write(_serial, c);
 80a1e6c:	f7fe bf08 	b.w	80a0c80 <hal_usart_write>
  if (_blocking || hal_usart_available_data_for_write(_serial) > 0) {
 80a1e70:	7c00      	ldrb	r0, [r0, #16]
 80a1e72:	f7fe ff35 	bl	80a0ce0 <hal_usart_available_data_for_write>
 80a1e76:	2800      	cmp	r0, #0
 80a1e78:	dcf4      	bgt.n	80a1e64 <_ZN11USARTSerial5writeEh+0xa>
}
 80a1e7a:	4630      	mov	r0, r6
 80a1e7c:	bd70      	pop	{r4, r5, r6, pc}

080a1e7e <_ZN11USARTSerialD0Ev>:
 80a1e7e:	b510      	push	{r4, lr}
 80a1e80:	4604      	mov	r4, r0
 80a1e82:	2114      	movs	r1, #20
 80a1e84:	f000 fa57 	bl	80a2336 <_ZdlPvj>
 80a1e88:	4620      	mov	r0, r4
 80a1e8a:	bd10      	pop	{r4, pc}

080a1e8c <_ZN11USARTSerialC1E21hal_usart_interface_tP23hal_usart_ring_buffer_tS2_>:
 80a1e8c:	f04f 0c00 	mov.w	ip, #0
USARTSerial::USARTSerial(hal_usart_interface_t serial, hal_usart_ring_buffer_t *rx_buffer, hal_usart_ring_buffer_t *tx_buffer)
 80a1e90:	b510      	push	{r4, lr}
 80a1e92:	4604      	mov	r4, r0
 80a1e94:	4608      	mov	r0, r1
 80a1e96:	4611      	mov	r1, r2
 80a1e98:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80a1e9c:	e9c4 c201 	strd	ip, r2, [r4, #4]
 80a1ea0:	4a04      	ldr	r2, [pc, #16]	; (80a1eb4 <_ZN11USARTSerialC1E21hal_usart_interface_tP23hal_usart_ring_buffer_tS2_+0x28>)
  _serial = serial;
 80a1ea2:	7420      	strb	r0, [r4, #16]
USARTSerial::USARTSerial(hal_usart_interface_t serial, hal_usart_ring_buffer_t *rx_buffer, hal_usart_ring_buffer_t *tx_buffer)
 80a1ea4:	6022      	str	r2, [r4, #0]
  _blocking = true;
 80a1ea6:	2201      	movs	r2, #1
 80a1ea8:	7462      	strb	r2, [r4, #17]
  hal_usart_init(serial, rx_buffer, tx_buffer);
 80a1eaa:	461a      	mov	r2, r3
 80a1eac:	f7fe fee0 	bl	80a0c70 <hal_usart_init>
}
 80a1eb0:	4620      	mov	r0, r4
 80a1eb2:	bd10      	pop	{r4, pc}
 80a1eb4:	080a2f58 	.word	0x080a2f58

080a1eb8 <_Z22__fetch_global_Serial1v>:
static hal_usart_ring_buffer_t* serial1_rx_buffer = nullptr;
static hal_usart_ring_buffer_t* serial1_tx_buffer = nullptr;
#endif

USARTSerial& __fetch_global_Serial1()
{
 80a1eb8:	b538      	push	{r3, r4, r5, lr}
#if ((MODULE_FUNCTION == MOD_FUNC_USER_PART) || (MODULE_FUNCTION == MOD_FUNC_MONO_FIRMWARE))
	static USARTSerial serial1(HAL_USART_SERIAL1, &serial1_rx_buffer, &serial1_tx_buffer);
 80a1eba:	4d0d      	ldr	r5, [pc, #52]	; (80a1ef0 <_Z22__fetch_global_Serial1v+0x38>)
 80a1ebc:	7829      	ldrb	r1, [r5, #0]
 80a1ebe:	f3bf 8f5b 	dmb	ish
 80a1ec2:	f011 0401 	ands.w	r4, r1, #1
 80a1ec6:	d111      	bne.n	80a1eec <_Z22__fetch_global_Serial1v+0x34>
 80a1ec8:	4628      	mov	r0, r5
 80a1eca:	f7fe f8ea 	bl	80a00a2 <__cxa_guard_acquire>
 80a1ece:	b168      	cbz	r0, 80a1eec <_Z22__fetch_global_Serial1v+0x34>
 80a1ed0:	4621      	mov	r1, r4
 80a1ed2:	4a08      	ldr	r2, [pc, #32]	; (80a1ef4 <_Z22__fetch_global_Serial1v+0x3c>)
 80a1ed4:	4b08      	ldr	r3, [pc, #32]	; (80a1ef8 <_Z22__fetch_global_Serial1v+0x40>)
 80a1ed6:	4809      	ldr	r0, [pc, #36]	; (80a1efc <_Z22__fetch_global_Serial1v+0x44>)
 80a1ed8:	f7ff ffd8 	bl	80a1e8c <_ZN11USARTSerialC1E21hal_usart_interface_tP23hal_usart_ring_buffer_tS2_>
 80a1edc:	4628      	mov	r0, r5
 80a1ede:	f7fe f8e5 	bl	80a00ac <__cxa_guard_release>
 80a1ee2:	4a07      	ldr	r2, [pc, #28]	; (80a1f00 <_Z22__fetch_global_Serial1v+0x48>)
 80a1ee4:	4907      	ldr	r1, [pc, #28]	; (80a1f04 <_Z22__fetch_global_Serial1v+0x4c>)
 80a1ee6:	4805      	ldr	r0, [pc, #20]	; (80a1efc <_Z22__fetch_global_Serial1v+0x44>)
 80a1ee8:	f000 fa20 	bl	80a232c <__aeabi_atexit>
    serial1_tx_buffer = new hal_usart_ring_buffer_t();
  }
  static USARTSerial serial1(HAL_USART_SERIAL1, serial1_rx_buffer, serial1_tx_buffer);
#endif
	return serial1;
}
 80a1eec:	4803      	ldr	r0, [pc, #12]	; (80a1efc <_Z22__fetch_global_Serial1v+0x44>)
 80a1eee:	bd38      	pop	{r3, r4, r5, pc}
 80a1ef0:	2000042c 	.word	0x2000042c
 80a1ef4:	20000430 	.word	0x20000430
 80a1ef8:	200004b4 	.word	0x200004b4
 80a1efc:	20000538 	.word	0x20000538
 80a1f00:	2000006c 	.word	0x2000006c
 80a1f04:	080a1e17 	.word	0x080a1e17

080a1f08 <_ZN8particle6detail21futureCallbackWrapperEPv>:
 * License along with this library; if not, see <http://www.gnu.org/licenses/>.
 */

#include "spark_wiring_async.h"

void particle::detail::futureCallbackWrapper(void* data) {
 80a1f08:	b510      	push	{r4, lr}
      if (_M_empty())
 80a1f0a:	6883      	ldr	r3, [r0, #8]
 80a1f0c:	4604      	mov	r4, r0
 80a1f0e:	b90b      	cbnz	r3, 80a1f14 <_ZN8particle6detail21futureCallbackWrapperEPv+0xc>
	__throw_bad_function_call();
 80a1f10:	f000 fa15 	bl	80a233e <_ZSt25__throw_bad_function_callv>
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
 80a1f14:	68c3      	ldr	r3, [r0, #12]
 80a1f16:	4798      	blx	r3
      if (_M_manager)
 80a1f18:	68a3      	ldr	r3, [r4, #8]
 80a1f1a:	b11b      	cbz	r3, 80a1f24 <_ZN8particle6detail21futureCallbackWrapperEPv+0x1c>
	_M_manager(_M_functor, _M_functor, __destroy_functor);
 80a1f1c:	2203      	movs	r2, #3
 80a1f1e:	4621      	mov	r1, r4
 80a1f20:	4620      	mov	r0, r4
 80a1f22:	4798      	blx	r3
    auto callbackPtr = static_cast<const std::function<void()>*>(data);
    (*callbackPtr)();
    delete callbackPtr;
 80a1f24:	4620      	mov	r0, r4
}
 80a1f26:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    delete callbackPtr;
 80a1f2a:	2110      	movs	r1, #16
 80a1f2c:	f000 ba03 	b.w	80a2336 <_ZdlPvj>

080a1f30 <_ZN7TwoWireD1Ev>:
private:
  hal_i2c_interface_t _i2c;

public:
  TwoWire(hal_i2c_interface_t i2c, const hal_i2c_config_t& config);
  virtual ~TwoWire() {};
 80a1f30:	4770      	bx	lr

080a1f32 <_ZN7TwoWire5writeEPKhj>:

// must be called in:
// slave tx event callback
// or after beginTransmission(address)
size_t TwoWire::write(const uint8_t *data, size_t quantity)
{
 80a1f32:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80a1f34:	4606      	mov	r6, r0
 80a1f36:	4615      	mov	r5, r2
 80a1f38:	460c      	mov	r4, r1
 80a1f3a:	188f      	adds	r7, r1, r2
  // in master/slave transmitter mode
  for(size_t i = 0; i < quantity; ++i)
 80a1f3c:	42bc      	cmp	r4, r7
 80a1f3e:	d006      	beq.n	80a1f4e <_ZN7TwoWire5writeEPKhj+0x1c>
  {
    write(data[i]);
 80a1f40:	6833      	ldr	r3, [r6, #0]
 80a1f42:	4630      	mov	r0, r6
 80a1f44:	689b      	ldr	r3, [r3, #8]
 80a1f46:	f814 1b01 	ldrb.w	r1, [r4], #1
 80a1f4a:	4798      	blx	r3
  for(size_t i = 0; i < quantity; ++i)
 80a1f4c:	e7f6      	b.n	80a1f3c <_ZN7TwoWire5writeEPKhj+0xa>
  }

  return quantity;
}
 80a1f4e:	4628      	mov	r0, r5
 80a1f50:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

080a1f52 <_ZN7TwoWire5writeEh>:
  return hal_i2c_write(_i2c, data, NULL);
 80a1f52:	2200      	movs	r2, #0
 80a1f54:	7c00      	ldrb	r0, [r0, #16]
 80a1f56:	f7fe becb 	b.w	80a0cf0 <hal_i2c_write>

080a1f5a <_ZN7TwoWire9availableEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::available(void)
{
  return hal_i2c_available(_i2c, NULL);
 80a1f5a:	2100      	movs	r1, #0
 80a1f5c:	7c00      	ldrb	r0, [r0, #16]
 80a1f5e:	f7fe becf 	b.w	80a0d00 <hal_i2c_available>

080a1f62 <_ZN7TwoWire4readEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::read(void)
{
  return hal_i2c_read(_i2c, NULL);
 80a1f62:	2100      	movs	r1, #0
 80a1f64:	7c00      	ldrb	r0, [r0, #16]
 80a1f66:	f7fe bed3 	b.w	80a0d10 <hal_i2c_read>

080a1f6a <_ZN7TwoWire4peekEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::peek(void)
{
  return hal_i2c_peek(_i2c, NULL);
 80a1f6a:	2100      	movs	r1, #0
 80a1f6c:	7c00      	ldrb	r0, [r0, #16]
 80a1f6e:	f7fe bed7 	b.w	80a0d20 <hal_i2c_peek>

080a1f72 <_ZN7TwoWire5flushEv>:
}

void TwoWire::flush(void)
{
  hal_i2c_flush(_i2c, NULL);
 80a1f72:	2100      	movs	r1, #0
 80a1f74:	7c00      	ldrb	r0, [r0, #16]
 80a1f76:	f7fe bedb 	b.w	80a0d30 <hal_i2c_flush>

080a1f7a <_ZN7TwoWireD0Ev>:
 80a1f7a:	b510      	push	{r4, lr}
 80a1f7c:	4604      	mov	r4, r0
 80a1f7e:	2114      	movs	r1, #20
 80a1f80:	f000 f9d9 	bl	80a2336 <_ZdlPvj>
 80a1f84:	4620      	mov	r0, r4
 80a1f86:	bd10      	pop	{r4, pc}

080a1f88 <_ZN7TwoWireC1E19hal_i2c_interface_tRK16hal_i2c_config_t>:
TwoWire::TwoWire(hal_i2c_interface_t i2c, const hal_i2c_config_t& conf)
 80a1f88:	b510      	push	{r4, lr}
 80a1f8a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80a1f8e:	4604      	mov	r4, r0
 80a1f90:	4608      	mov	r0, r1
 80a1f92:	2100      	movs	r1, #0
 80a1f94:	e9c4 1301 	strd	r1, r3, [r4, #4]
 80a1f98:	4b03      	ldr	r3, [pc, #12]	; (80a1fa8 <_ZN7TwoWireC1E19hal_i2c_interface_tRK16hal_i2c_config_t+0x20>)
  hal_i2c_init(_i2c, &conf);
 80a1f9a:	4611      	mov	r1, r2
TwoWire::TwoWire(hal_i2c_interface_t i2c, const hal_i2c_config_t& conf)
 80a1f9c:	6023      	str	r3, [r4, #0]
  _i2c = i2c;
 80a1f9e:	7420      	strb	r0, [r4, #16]
  hal_i2c_init(_i2c, &conf);
 80a1fa0:	f7fe fed6 	bl	80a0d50 <hal_i2c_init>
}
 80a1fa4:	4620      	mov	r0, r4
 80a1fa6:	bd10      	pop	{r4, pc}
 80a1fa8:	080a2f88 	.word	0x080a2f88

080a1fac <_ZN5spark9WiFiClass5readyEv>:
        return network_ready(*this, 0, NULL);
 80a1fac:	2200      	movs	r2, #0
 80a1fae:	6840      	ldr	r0, [r0, #4]
 80a1fb0:	4611      	mov	r1, r2
 80a1fb2:	f7fe bf7b 	b.w	80a0eac <network_ready>

080a1fb6 <_ZN5spark9WiFiClass7resolveEPKc>:
    WLanSelectAntenna_TypeDef getAntenna() {
        return wlan_get_antenna(nullptr);
    }

#if !HAL_USE_INET_HAL_POSIX
    IPAddress resolve(const char* name)
 80a1fb6:	b5f0      	push	{r4, r5, r6, r7, lr}
 80a1fb8:	4615      	mov	r5, r2
 80a1fba:	b089      	sub	sp, #36	; 0x24
    {
        HAL_IPAddress ip = {};
 80a1fbc:	2211      	movs	r2, #17
    IPAddress resolve(const char* name)
 80a1fbe:	460e      	mov	r6, r1
 80a1fc0:	4604      	mov	r4, r0
        HAL_IPAddress ip = {};
 80a1fc2:	2100      	movs	r1, #0
 80a1fc4:	a803      	add	r0, sp, #12
 80a1fc6:	f000 fe69 	bl	80a2c9c <memset>
        return (inet_gethostbyname(name, strlen(name), &ip, *this, NULL) != 0) ?
 80a1fca:	4628      	mov	r0, r5
 80a1fcc:	f000 feb5 	bl	80a2d3a <strlen>
 80a1fd0:	2700      	movs	r7, #0
 80a1fd2:	b281      	uxth	r1, r0
 80a1fd4:	6873      	ldr	r3, [r6, #4]
 80a1fd6:	4628      	mov	r0, r5
 80a1fd8:	9700      	str	r7, [sp, #0]
 80a1fda:	aa03      	add	r2, sp, #12
 80a1fdc:	f7fe ff12 	bl	80a0e04 <inet_gethostbyname>
                IPAddress(uint32_t(0)) : IPAddress(ip);
 80a1fe0:	b130      	cbz	r0, 80a1ff0 <_ZN5spark9WiFiClass7resolveEPKc+0x3a>
 80a1fe2:	4639      	mov	r1, r7
 80a1fe4:	4620      	mov	r0, r4
 80a1fe6:	f7ff fdcd 	bl	80a1b84 <_ZN9IPAddressC1Em>
    }
 80a1fea:	4620      	mov	r0, r4
 80a1fec:	b009      	add	sp, #36	; 0x24
 80a1fee:	bdf0      	pop	{r4, r5, r6, r7, pc}
                IPAddress(uint32_t(0)) : IPAddress(ip);
 80a1ff0:	4620      	mov	r0, r4
 80a1ff2:	a903      	add	r1, sp, #12
 80a1ff4:	f7ff fdb4 	bl	80a1b60 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t>
 80a1ff8:	e7f7      	b.n	80a1fea <_ZN5spark9WiFiClass7resolveEPKc+0x34>

080a1ffa <_ZN5spark9WiFiClass9listeningEv>:
        return network_listening(*this, 0, NULL);
 80a1ffa:	2200      	movs	r2, #0
 80a1ffc:	6840      	ldr	r0, [r0, #4]
 80a1ffe:	4611      	mov	r1, r2
 80a2000:	f7fe bf74 	b.w	80a0eec <network_listening>

080a2004 <_ZN5spark9WiFiClass16getListenTimeoutEv>:
        return network_get_listen_timeout(*this, 0, NULL);
 80a2004:	2200      	movs	r2, #0
 80a2006:	6840      	ldr	r0, [r0, #4]
 80a2008:	4611      	mov	r1, r2
 80a200a:	f7fe bf7f 	b.w	80a0f0c <network_get_listen_timeout>

080a200e <_ZN5spark9WiFiClass16setListenTimeoutEt>:
        network_set_listen_timeout(*this, timeout, NULL);
 80a200e:	2200      	movs	r2, #0
 80a2010:	6840      	ldr	r0, [r0, #4]
 80a2012:	f7fe bf73 	b.w	80a0efc <network_set_listen_timeout>

080a2016 <_ZN5spark9WiFiClass6listenEb>:
        network_listen(*this, begin ? 0 : 1, NULL);
 80a2016:	2200      	movs	r2, #0
 80a2018:	6840      	ldr	r0, [r0, #4]
 80a201a:	f081 0101 	eor.w	r1, r1, #1
 80a201e:	f7fe bf5d 	b.w	80a0edc <network_listen>

080a2022 <_ZN5spark9WiFiClass3offEv>:
        network_off(*this, 0, 0, NULL);
 80a2022:	2300      	movs	r3, #0
 80a2024:	6840      	ldr	r0, [r0, #4]
 80a2026:	461a      	mov	r2, r3
 80a2028:	4619      	mov	r1, r3
 80a202a:	f7fe bf4f 	b.w	80a0ecc <network_off>

080a202e <_ZN5spark9WiFiClass10connectingEv>:
        return network_connecting(*this, 0, NULL);
 80a202e:	2200      	movs	r2, #0
 80a2030:	6840      	ldr	r0, [r0, #4]
 80a2032:	4611      	mov	r1, r2
 80a2034:	f7fe bf2a 	b.w	80a0e8c <network_connecting>

080a2038 <_ZN5spark9WiFiClass10disconnectEv>:
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
 80a2038:	2200      	movs	r2, #0
 80a203a:	2102      	movs	r1, #2
 80a203c:	6840      	ldr	r0, [r0, #4]
 80a203e:	f7fe bf2d 	b.w	80a0e9c <network_disconnect>

080a2042 <_ZN5spark9WiFiClass7connectEj>:
        network_connect(*this, flags, 0, NULL);
 80a2042:	2300      	movs	r3, #0
 80a2044:	6840      	ldr	r0, [r0, #4]
 80a2046:	461a      	mov	r2, r3
 80a2048:	f7fe bf18 	b.w	80a0e7c <network_connect>

080a204c <_GLOBAL__sub_I__ZN10WiFiSignalC2ERK21wlan_connected_info_t>:
    static NetworkClass& from(network_interface_t nif);

    virtual IPAddress resolve(const char* name);

    explicit NetworkClass(network_interface_t iface)
            : iface_(iface) {
 80a204c:	2204      	movs	r2, #4
 80a204e:	4b02      	ldr	r3, [pc, #8]	; (80a2058 <_GLOBAL__sub_I__ZN10WiFiSignalC2ERK21wlan_connected_info_t+0xc>)
 80a2050:	605a      	str	r2, [r3, #4]
            NetworkClass(NETWORK_INTERFACE_WIFI_STA) {
 80a2052:	4a02      	ldr	r2, [pc, #8]	; (80a205c <_GLOBAL__sub_I__ZN10WiFiSignalC2ERK21wlan_connected_info_t+0x10>)
 80a2054:	601a      	str	r2, [r3, #0]
the same way.
*****************************************************************************/

    WiFiClass WiFi;
    // NetworkClass& Network = WiFi;
}
 80a2056:	4770      	bx	lr
 80a2058:	2000054c 	.word	0x2000054c
 80a205c:	080a2fb0 	.word	0x080a2fb0

080a2060 <_ZN5spark12NetworkClass7connectEj>:
        return Network;
    }
}

void NetworkClass::connect(unsigned flags) {
    network_connect(*this, flags, 0, nullptr);
 80a2060:	2300      	movs	r3, #0
 80a2062:	6840      	ldr	r0, [r0, #4]
 80a2064:	461a      	mov	r2, r3
 80a2066:	f7fe bf09 	b.w	80a0e7c <network_connect>

080a206a <_ZN5spark12NetworkClass10disconnectEv>:
}

void NetworkClass::disconnect() {
    network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, nullptr);
 80a206a:	2200      	movs	r2, #0
 80a206c:	2102      	movs	r1, #2
 80a206e:	6840      	ldr	r0, [r0, #4]
 80a2070:	f7fe bf14 	b.w	80a0e9c <network_disconnect>

080a2074 <_ZN5spark12NetworkClass10connectingEv>:
}

bool NetworkClass::connecting() {
    return network_connecting(*this, 0, nullptr);
 80a2074:	2200      	movs	r2, #0
 80a2076:	6840      	ldr	r0, [r0, #4]
 80a2078:	4611      	mov	r1, r2
 80a207a:	f7fe bf07 	b.w	80a0e8c <network_connecting>

080a207e <_ZN5spark12NetworkClass5readyEv>:
}

bool NetworkClass::ready() {
    return network_ready(*this, 0, nullptr);
 80a207e:	2200      	movs	r2, #0
 80a2080:	6840      	ldr	r0, [r0, #4]
 80a2082:	4611      	mov	r1, r2
 80a2084:	f7fe bf12 	b.w	80a0eac <network_ready>

080a2088 <_ZN5spark12NetworkClass2onEv>:
}

void NetworkClass::on() {
    network_on(*this, 0, 0, nullptr);
 80a2088:	2300      	movs	r3, #0
 80a208a:	6840      	ldr	r0, [r0, #4]
 80a208c:	461a      	mov	r2, r3
 80a208e:	4619      	mov	r1, r3
 80a2090:	f7fe bf14 	b.w	80a0ebc <network_on>

080a2094 <_ZN5spark12NetworkClass3offEv>:
}

void NetworkClass::off() {
    network_off(*this, 0, 0, nullptr);
 80a2094:	2300      	movs	r3, #0
 80a2096:	6840      	ldr	r0, [r0, #4]
 80a2098:	461a      	mov	r2, r3
 80a209a:	4619      	mov	r1, r3
 80a209c:	f7fe bf16 	b.w	80a0ecc <network_off>

080a20a0 <_ZN5spark12NetworkClass6listenEb>:
}

void NetworkClass::listen(bool begin) {
    network_listen(*this, begin ? 0 : 1, nullptr);
 80a20a0:	2200      	movs	r2, #0
 80a20a2:	6840      	ldr	r0, [r0, #4]
 80a20a4:	f081 0101 	eor.w	r1, r1, #1
 80a20a8:	f7fe bf18 	b.w	80a0edc <network_listen>

080a20ac <_ZN5spark12NetworkClass16setListenTimeoutEt>:
}

void NetworkClass::setListenTimeout(uint16_t timeout) {
    network_set_listen_timeout(*this, timeout, nullptr);
 80a20ac:	2200      	movs	r2, #0
 80a20ae:	6840      	ldr	r0, [r0, #4]
 80a20b0:	f7fe bf24 	b.w	80a0efc <network_set_listen_timeout>

080a20b4 <_ZN5spark12NetworkClass16getListenTimeoutEv>:
}

uint16_t NetworkClass::getListenTimeout() {
    return network_get_listen_timeout(*this, 0, nullptr);
 80a20b4:	2200      	movs	r2, #0
 80a20b6:	6840      	ldr	r0, [r0, #4]
 80a20b8:	4611      	mov	r1, r2
 80a20ba:	f7fe bf27 	b.w	80a0f0c <network_get_listen_timeout>

080a20be <_ZN5spark12NetworkClass9listeningEv>:
}

bool NetworkClass::listening() {
    return network_listening(*this, 0, nullptr);
 80a20be:	2200      	movs	r2, #0
 80a20c0:	6840      	ldr	r0, [r0, #4]
 80a20c2:	4611      	mov	r1, r2
 80a20c4:	f7fe bf12 	b.w	80a0eec <network_listening>

080a20c8 <_ZN5spark12NetworkClass7resolveEPKc>:
}

IPAddress NetworkClass::resolve(const char* name) {
 80a20c8:	b570      	push	{r4, r5, r6, lr}
 80a20ca:	4615      	mov	r5, r2
 80a20cc:	b08e      	sub	sp, #56	; 0x38
 80a20ce:	4604      	mov	r4, r0
    IPAddress addr;
 80a20d0:	a808      	add	r0, sp, #32
 80a20d2:	f7ff fd37 	bl	80a1b44 <_ZN9IPAddressC1Ev>
        HAL_IPAddress ip = {};
 80a20d6:	2211      	movs	r2, #17
 80a20d8:	2100      	movs	r1, #0
 80a20da:	a803      	add	r0, sp, #12
 80a20dc:	f000 fdde 	bl	80a2c9c <memset>
        return (inet_gethostbyname(name, strlen(name), &ip, *this, NULL) != 0) ?
 80a20e0:	2600      	movs	r6, #0
 80a20e2:	4628      	mov	r0, r5
 80a20e4:	f000 fe29 	bl	80a2d3a <strlen>
 80a20e8:	4b0a      	ldr	r3, [pc, #40]	; (80a2114 <_ZN5spark12NetworkClass7resolveEPKc+0x4c>)
 80a20ea:	9600      	str	r6, [sp, #0]
 80a20ec:	b281      	uxth	r1, r0
 80a20ee:	685b      	ldr	r3, [r3, #4]
 80a20f0:	4628      	mov	r0, r5
 80a20f2:	aa03      	add	r2, sp, #12
 80a20f4:	f7fe fe86 	bl	80a0e04 <inet_gethostbyname>
                IPAddress(uint32_t(0)) : IPAddress(ip);
 80a20f8:	b130      	cbz	r0, 80a2108 <_ZN5spark12NetworkClass7resolveEPKc+0x40>
 80a20fa:	4631      	mov	r1, r6
 80a20fc:	4620      	mov	r0, r4
 80a20fe:	f7ff fd41 	bl	80a1b84 <_ZN9IPAddressC1Em>
    return Cellular.resolve(name);
#endif // Wiring_Cellular

#endif // HAL_USE_INET_HAL_POSIX
    return addr;
}
 80a2102:	4620      	mov	r0, r4
 80a2104:	b00e      	add	sp, #56	; 0x38
 80a2106:	bd70      	pop	{r4, r5, r6, pc}
 80a2108:	4620      	mov	r0, r4
 80a210a:	a903      	add	r1, sp, #12
 80a210c:	f7ff fd28 	bl	80a1b60 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t>
    virtual ~IPAddress() {}
 80a2110:	e7f7      	b.n	80a2102 <_ZN5spark12NetworkClass7resolveEPKc+0x3a>
 80a2112:	bf00      	nop
 80a2114:	2000054c 	.word	0x2000054c

080a2118 <_GLOBAL__sub_I__ZN5spark7NetworkE>:
 80a2118:	4b02      	ldr	r3, [pc, #8]	; (80a2124 <_GLOBAL__sub_I__ZN5spark7NetworkE+0xc>)
 80a211a:	4a03      	ldr	r2, [pc, #12]	; (80a2128 <_GLOBAL__sub_I__ZN5spark7NetworkE+0x10>)
 80a211c:	601a      	str	r2, [r3, #0]
 80a211e:	2200      	movs	r2, #0
 80a2120:	605a      	str	r2, [r3, #4]

} // spark
 80a2122:	4770      	bx	lr
 80a2124:	20000554 	.word	0x20000554
 80a2128:	080a2fe4 	.word	0x080a2fe4

080a212c <_ZN8SPIClassD1Ev>:
  RecursiveMutex _mutex;
#endif

public:
  SPIClass(hal_spi_interface_t spi);
  ~SPIClass() = default;
 80a212c:	b510      	push	{r4, lr}
 80a212e:	4604      	mov	r4, r0
        dispose();
    }

    void dispose()
    {
        if (handle_) {
 80a2130:	6880      	ldr	r0, [r0, #8]
 80a2132:	b108      	cbz	r0, 80a2138 <_ZN8SPIClassD1Ev+0xc>
            os_mutex_recursive_destroy(handle_);
 80a2134:	f7fe fd94 	bl	80a0c60 <os_mutex_recursive_destroy>
 80a2138:	4620      	mov	r0, r4
 80a213a:	bd10      	pop	{r4, pc}

080a213c <pinAvailable>:
/*
 * @brief Perform safety check on desired pin to see if it's already
 * being used.  Return 0 if used, otherwise return 1 if available.
 */
bool pinAvailable(uint16_t pin) {
  if (pin >= TOTAL_PINS) {
 80a213c:	2817      	cmp	r0, #23
bool pinAvailable(uint16_t pin) {
 80a213e:	b570      	push	{r4, r5, r6, lr}
 80a2140:	4604      	mov	r4, r0
  if (pin >= TOTAL_PINS) {
 80a2142:	d901      	bls.n	80a2148 <pinAvailable+0xc>
    return false;
 80a2144:	2000      	movs	r0, #0
    return false; // 'pin' is used
  }
#endif

  return true; // 'pin' is available
}
 80a2146:	bd70      	pop	{r4, r5, r6, pc}
  if((pin == SCK || pin == MOSI || pin == MISO) && hal_spi_is_enabled(SPI.interface()) == true)
 80a2148:	f1a0 030d 	sub.w	r3, r0, #13
 80a214c:	2b02      	cmp	r3, #2
 80a214e:	d90b      	bls.n	80a2168 <pinAvailable+0x2c>
  if((pin == SCL || pin == SDA) && hal_i2c_is_enabled(Wire.interface(), nullptr) == true)
 80a2150:	2801      	cmp	r0, #1
 80a2152:	d826      	bhi.n	80a21a2 <pinAvailable+0x66>
 80a2154:	f000 f8c2 	bl	80a22dc <_Z19__fetch_global_Wirev>
 80a2158:	2100      	movs	r1, #0
 80a215a:	7c00      	ldrb	r0, [r0, #16]
 80a215c:	f7fe fdf0 	bl	80a0d40 <hal_i2c_is_enabled>
  if((pin == RX || pin == TX) && hal_usart_is_enabled(Serial1.interface()) == true)
 80a2160:	f080 0001 	eor.w	r0, r0, #1
 80a2164:	b2c0      	uxtb	r0, r0
 80a2166:	e7ee      	b.n	80a2146 <pinAvailable+0xa>

template <hal_spi_interface_t Interface>
class SpiProxy {
public:
    static SPIClass& instance() {
        static SPIClass instance(Interface);
 80a2168:	4e13      	ldr	r6, [pc, #76]	; (80a21b8 <pinAvailable+0x7c>)
 80a216a:	7831      	ldrb	r1, [r6, #0]
 80a216c:	f3bf 8f5b 	dmb	ish
 80a2170:	f011 0501 	ands.w	r5, r1, #1
 80a2174:	d10f      	bne.n	80a2196 <pinAvailable+0x5a>
 80a2176:	4630      	mov	r0, r6
 80a2178:	f7fd ff93 	bl	80a00a2 <__cxa_guard_acquire>
 80a217c:	b158      	cbz	r0, 80a2196 <pinAvailable+0x5a>
 80a217e:	4629      	mov	r1, r5
 80a2180:	480e      	ldr	r0, [pc, #56]	; (80a21bc <pinAvailable+0x80>)
 80a2182:	f7fe ff1b 	bl	80a0fbc <_ZN8SPIClassC1E19hal_spi_interface_t>
 80a2186:	4630      	mov	r0, r6
 80a2188:	f7fd ff90 	bl	80a00ac <__cxa_guard_release>
 80a218c:	4a0c      	ldr	r2, [pc, #48]	; (80a21c0 <pinAvailable+0x84>)
 80a218e:	490d      	ldr	r1, [pc, #52]	; (80a21c4 <pinAvailable+0x88>)
 80a2190:	480a      	ldr	r0, [pc, #40]	; (80a21bc <pinAvailable+0x80>)
 80a2192:	f000 f8cb 	bl	80a232c <__aeabi_atexit>
  if((pin == SCK || pin == MOSI || pin == MISO) && hal_spi_is_enabled(SPI.interface()) == true)
 80a2196:	4b09      	ldr	r3, [pc, #36]	; (80a21bc <pinAvailable+0x80>)
 80a2198:	7818      	ldrb	r0, [r3, #0]
 80a219a:	f7fe fdeb 	bl	80a0d74 <hal_spi_is_enabled>
 80a219e:	2800      	cmp	r0, #0
 80a21a0:	d1d0      	bne.n	80a2144 <pinAvailable+0x8>
  if((pin == RX || pin == TX) && hal_usart_is_enabled(Serial1.interface()) == true)
 80a21a2:	3c12      	subs	r4, #18
 80a21a4:	2c01      	cmp	r4, #1
 80a21a6:	d805      	bhi.n	80a21b4 <pinAvailable+0x78>
 80a21a8:	f7ff fe86 	bl	80a1eb8 <_Z22__fetch_global_Serial1v>
 80a21ac:	7c00      	ldrb	r0, [r0, #16]
 80a21ae:	f7fe fd8f 	bl	80a0cd0 <hal_usart_is_enabled>
 80a21b2:	e7d5      	b.n	80a2160 <pinAvailable+0x24>
  return true; // 'pin' is available
 80a21b4:	2001      	movs	r0, #1
 80a21b6:	e7c6      	b.n	80a2146 <pinAvailable+0xa>
 80a21b8:	2000055c 	.word	0x2000055c
 80a21bc:	20000560 	.word	0x20000560
 80a21c0:	2000006c 	.word	0x2000006c
 80a21c4:	080a212d 	.word	0x080a212d

080a21c8 <pinMode>:
  if(pin >= TOTAL_PINS || setMode == PIN_MODE_NONE )
 80a21c8:	2817      	cmp	r0, #23
{
 80a21ca:	b538      	push	{r3, r4, r5, lr}
 80a21cc:	4604      	mov	r4, r0
 80a21ce:	460d      	mov	r5, r1
  if(pin >= TOTAL_PINS || setMode == PIN_MODE_NONE )
 80a21d0:	d80a      	bhi.n	80a21e8 <pinMode+0x20>
 80a21d2:	29ff      	cmp	r1, #255	; 0xff
 80a21d4:	d008      	beq.n	80a21e8 <pinMode+0x20>
  if( !pinAvailable(pin) ) {
 80a21d6:	f7ff ffb1 	bl	80a213c <pinAvailable>
 80a21da:	b128      	cbz	r0, 80a21e8 <pinMode+0x20>
  HAL_Pin_Mode(pin, setMode);
 80a21dc:	4629      	mov	r1, r5
 80a21de:	4620      	mov	r0, r4
}
 80a21e0:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  HAL_Pin_Mode(pin, setMode);
 80a21e4:	f7fe bcd4 	b.w	80a0b90 <HAL_Pin_Mode>
}
 80a21e8:	bd38      	pop	{r3, r4, r5, pc}

080a21ea <digitalWrite>:

/*
 * @brief Sets a GPIO pin to HIGH or LOW.
 */
void digitalWrite(pin_t pin, uint8_t value)
{
 80a21ea:	b538      	push	{r3, r4, r5, lr}
 80a21ec:	4604      	mov	r4, r0
 80a21ee:	460d      	mov	r5, r1
    PinMode mode = HAL_Get_Pin_Mode(pin);
 80a21f0:	f7fe fcd6 	bl	80a0ba0 <HAL_Get_Pin_Mode>
    if (mode==PIN_MODE_NONE || is_input_mode(mode))
 80a21f4:	28ff      	cmp	r0, #255	; 0xff
 80a21f6:	d010      	beq.n	80a221a <digitalWrite+0x30>
            mode == INPUT_PULLDOWN ||
 80a21f8:	2806      	cmp	r0, #6
 80a21fa:	d804      	bhi.n	80a2206 <digitalWrite+0x1c>
 80a21fc:	234d      	movs	r3, #77	; 0x4d
 80a21fe:	fa23 f000 	lsr.w	r0, r3, r0
 80a2202:	07c3      	lsls	r3, r0, #31
 80a2204:	d409      	bmi.n	80a221a <digitalWrite+0x30>
        return;
  // Safety check
  if( !pinAvailable(pin) ) {
 80a2206:	4620      	mov	r0, r4
 80a2208:	f7ff ff98 	bl	80a213c <pinAvailable>
 80a220c:	b128      	cbz	r0, 80a221a <digitalWrite+0x30>
    return;
  }

  HAL_GPIO_Write(pin, value);
 80a220e:	4629      	mov	r1, r5
 80a2210:	4620      	mov	r0, r4
}
 80a2212:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  HAL_GPIO_Write(pin, value);
 80a2216:	f7fe bccb 	b.w	80a0bb0 <HAL_GPIO_Write>
}
 80a221a:	bd38      	pop	{r3, r4, r5, pc}

080a221c <digitalRead>:

/*
 * @brief Reads the value of a GPIO pin. Should return either 1 (HIGH) or 0 (LOW).
 */
int32_t digitalRead(pin_t pin)
{
 80a221c:	b510      	push	{r4, lr}
 80a221e:	4604      	mov	r4, r0
    PinMode mode = HAL_Get_Pin_Mode(pin);
 80a2220:	f7fe fcbe 	bl	80a0ba0 <HAL_Get_Pin_Mode>
    return mode == AF_OUTPUT_PUSHPULL ||
 80a2224:	1f03      	subs	r3, r0, #4
    if (is_af_output_mode(mode))
 80a2226:	b2db      	uxtb	r3, r3
 80a2228:	2b01      	cmp	r3, #1
 80a222a:	d908      	bls.n	80a223e <digitalRead+0x22>
        return LOW;

    // Safety check
    if( !pinAvailable(pin) ) {
 80a222c:	4620      	mov	r0, r4
 80a222e:	f7ff ff85 	bl	80a213c <pinAvailable>
 80a2232:	b120      	cbz	r0, 80a223e <digitalRead+0x22>
      return LOW;
    }

    return HAL_GPIO_Read(pin);
 80a2234:	4620      	mov	r0, r4
}
 80a2236:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    return HAL_GPIO_Read(pin);
 80a223a:	f7fe bcc1 	b.w	80a0bc0 <HAL_GPIO_Read>
}
 80a223e:	2000      	movs	r0, #0
 80a2240:	bd10      	pop	{r4, pc}

080a2242 <_Z11analogWritetmm>:
/*
 * @brief Should take an integer 0-255 and create a PWM signal with a duty cycle from 0-100%
 * and frequency from 1 to 65535 Hz.
 */
void analogWrite(pin_t pin, uint32_t value, uint32_t pwm_frequency)
{
 80a2242:	b570      	push	{r4, r5, r6, lr}
 80a2244:	4604      	mov	r4, r0
 80a2246:	460d      	mov	r5, r1
 80a2248:	4616      	mov	r6, r2
    // Safety check
    if (!pinAvailable(pin))
 80a224a:	f7ff ff77 	bl	80a213c <pinAvailable>
 80a224e:	b198      	cbz	r0, 80a2278 <_Z11analogWritetmm+0x36>
    {
        return;
    }

    if (HAL_Validate_Pin_Function(pin, PF_TIMER) == PF_TIMER)
 80a2250:	2102      	movs	r1, #2
 80a2252:	4620      	mov	r0, r4
 80a2254:	f7fe fc94 	bl	80a0b80 <HAL_Validate_Pin_Function>
 80a2258:	2802      	cmp	r0, #2
 80a225a:	d10d      	bne.n	80a2278 <_Z11analogWritetmm+0x36>
    {
        PinMode mode = HAL_Get_Pin_Mode(pin);
 80a225c:	4620      	mov	r0, r4
 80a225e:	f7fe fc9f 	bl	80a0ba0 <HAL_Get_Pin_Mode>

        if (mode != OUTPUT && mode != AF_OUTPUT_PUSHPULL)
 80a2262:	2801      	cmp	r0, #1
 80a2264:	d001      	beq.n	80a226a <_Z11analogWritetmm+0x28>
 80a2266:	2804      	cmp	r0, #4
 80a2268:	d106      	bne.n	80a2278 <_Z11analogWritetmm+0x36>
        {
            return;
        }

        hal_pwm_write_with_frequency_ext(pin, value, pwm_frequency);
 80a226a:	4632      	mov	r2, r6
 80a226c:	4629      	mov	r1, r5
 80a226e:	4620      	mov	r0, r4
    }
}
 80a2270:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
        hal_pwm_write_with_frequency_ext(pin, value, pwm_frequency);
 80a2274:	f7fe bcb4 	b.w	80a0be0 <hal_pwm_write_with_frequency_ext>
}
 80a2278:	bd70      	pop	{r4, r5, r6, pc}
	...

080a227c <_GLOBAL__sub_I_INADDR_NONE>:
#include "spark_wiring_ipaddress.h"

#if !HAL_USE_SOCKET_HAL_POSIX
const IPAddress INADDR_NONE(0, 0, 0, 0);
 80a227c:	2300      	movs	r3, #0
 80a227e:	b513      	push	{r0, r1, r4, lr}
 80a2280:	4c07      	ldr	r4, [pc, #28]	; (80a22a0 <_GLOBAL__sub_I_INADDR_NONE+0x24>)
 80a2282:	461a      	mov	r2, r3
 80a2284:	4619      	mov	r1, r3
 80a2286:	4620      	mov	r0, r4
 80a2288:	9300      	str	r3, [sp, #0]
 80a228a:	f7ff fc91 	bl	80a1bb0 <_ZN9IPAddressC1Ehhhh>
 80a228e:	4620      	mov	r0, r4
 80a2290:	4a04      	ldr	r2, [pc, #16]	; (80a22a4 <_GLOBAL__sub_I_INADDR_NONE+0x28>)
 80a2292:	4905      	ldr	r1, [pc, #20]	; (80a22a8 <_GLOBAL__sub_I_INADDR_NONE+0x2c>)
 80a2294:	b002      	add	sp, #8
 80a2296:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80a229a:	f000 b847 	b.w	80a232c <__aeabi_atexit>
 80a229e:	bf00      	nop
 80a22a0:	20000570 	.word	0x20000570
 80a22a4:	2000006c 	.word	0x2000006c
 80a22a8:	080a1b01 	.word	0x080a1b01

080a22ac <_Z17acquireWireBufferv>:
#ifndef SPARK_WIRING_NO_I2C

namespace {

hal_i2c_config_t defaultWireConfig() {
	hal_i2c_config_t config = {
 80a22ac:	2300      	movs	r3, #0
}

} // anonymous

hal_i2c_config_t __attribute__((weak)) acquireWireBuffer()
{
 80a22ae:	b570      	push	{r4, r5, r6, lr}
	hal_i2c_config_t config = {
 80a22b0:	2520      	movs	r5, #32
 80a22b2:	8043      	strh	r3, [r0, #2]
 80a22b4:	2314      	movs	r3, #20
		.rx_buffer = new (std::nothrow) uint8_t[I2C_BUFFER_LENGTH],
 80a22b6:	4e08      	ldr	r6, [pc, #32]	; (80a22d8 <_Z17acquireWireBufferv+0x2c>)
{
 80a22b8:	4604      	mov	r4, r0
	hal_i2c_config_t config = {
 80a22ba:	8003      	strh	r3, [r0, #0]
		.rx_buffer = new (std::nothrow) uint8_t[I2C_BUFFER_LENGTH],
 80a22bc:	4631      	mov	r1, r6
	hal_i2c_config_t config = {
 80a22be:	6085      	str	r5, [r0, #8]
 80a22c0:	6105      	str	r5, [r0, #16]
		.rx_buffer = new (std::nothrow) uint8_t[I2C_BUFFER_LENGTH],
 80a22c2:	4628      	mov	r0, r5
 80a22c4:	f000 f839 	bl	80a233a <_ZnajRKSt9nothrow_t>
		.tx_buffer = new (std::nothrow) uint8_t[I2C_BUFFER_LENGTH],
 80a22c8:	4631      	mov	r1, r6
	};
 80a22ca:	6060      	str	r0, [r4, #4]
		.tx_buffer = new (std::nothrow) uint8_t[I2C_BUFFER_LENGTH],
 80a22cc:	4628      	mov	r0, r5
 80a22ce:	f000 f834 	bl	80a233a <_ZnajRKSt9nothrow_t>
	};
 80a22d2:	60e0      	str	r0, [r4, #12]
	return defaultWireConfig();
}
 80a22d4:	4620      	mov	r0, r4
 80a22d6:	bd70      	pop	{r4, r5, r6, pc}
 80a22d8:	080a3010 	.word	0x080a3010

080a22dc <_Z19__fetch_global_Wirev>:
	return defaultWireConfig();
}
#endif

TwoWire& __fetch_global_Wire()
{
 80a22dc:	b530      	push	{r4, r5, lr}
	static TwoWire wire(HAL_I2C_INTERFACE1, acquireWireBuffer());
 80a22de:	4d0f      	ldr	r5, [pc, #60]	; (80a231c <_Z19__fetch_global_Wirev+0x40>)
{
 80a22e0:	b087      	sub	sp, #28
	static TwoWire wire(HAL_I2C_INTERFACE1, acquireWireBuffer());
 80a22e2:	7829      	ldrb	r1, [r5, #0]
 80a22e4:	f3bf 8f5b 	dmb	ish
 80a22e8:	f011 0401 	ands.w	r4, r1, #1
 80a22ec:	d113      	bne.n	80a2316 <_Z19__fetch_global_Wirev+0x3a>
 80a22ee:	4628      	mov	r0, r5
 80a22f0:	f7fd fed7 	bl	80a00a2 <__cxa_guard_acquire>
 80a22f4:	b178      	cbz	r0, 80a2316 <_Z19__fetch_global_Wirev+0x3a>
 80a22f6:	a801      	add	r0, sp, #4
 80a22f8:	f7ff ffd8 	bl	80a22ac <_Z17acquireWireBufferv>
 80a22fc:	4621      	mov	r1, r4
 80a22fe:	aa01      	add	r2, sp, #4
 80a2300:	4807      	ldr	r0, [pc, #28]	; (80a2320 <_Z19__fetch_global_Wirev+0x44>)
 80a2302:	f7ff fe41 	bl	80a1f88 <_ZN7TwoWireC1E19hal_i2c_interface_tRK16hal_i2c_config_t>
 80a2306:	4628      	mov	r0, r5
 80a2308:	f7fd fed0 	bl	80a00ac <__cxa_guard_release>
 80a230c:	4a05      	ldr	r2, [pc, #20]	; (80a2324 <_Z19__fetch_global_Wirev+0x48>)
 80a230e:	4906      	ldr	r1, [pc, #24]	; (80a2328 <_Z19__fetch_global_Wirev+0x4c>)
 80a2310:	4803      	ldr	r0, [pc, #12]	; (80a2320 <_Z19__fetch_global_Wirev+0x44>)
 80a2312:	f000 f80b 	bl	80a232c <__aeabi_atexit>
	return wire;
}
 80a2316:	4802      	ldr	r0, [pc, #8]	; (80a2320 <_Z19__fetch_global_Wirev+0x44>)
 80a2318:	b007      	add	sp, #28
 80a231a:	bd30      	pop	{r4, r5, pc}
 80a231c:	20000588 	.word	0x20000588
 80a2320:	2000058c 	.word	0x2000058c
 80a2324:	2000006c 	.word	0x2000006c
 80a2328:	080a1f31 	.word	0x080a1f31

080a232c <__aeabi_atexit>:
 80a232c:	460b      	mov	r3, r1
 80a232e:	4601      	mov	r1, r0
 80a2330:	4618      	mov	r0, r3
 80a2332:	f000 bc97 	b.w	80a2c64 <__cxa_atexit>

080a2336 <_ZdlPvj>:
 80a2336:	f7fd beb2 	b.w	80a009e <_ZdlPv>

080a233a <_ZnajRKSt9nothrow_t>:
 80a233a:	f7fd beae 	b.w	80a009a <_Znaj>

080a233e <_ZSt25__throw_bad_function_callv>:
 80a233e:	b508      	push	{r3, lr}
 80a2340:	f7fe fe24 	bl	80a0f8c <abort>

080a2344 <__aeabi_drsub>:
 80a2344:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80a2348:	e002      	b.n	80a2350 <__adddf3>
 80a234a:	bf00      	nop

080a234c <__aeabi_dsub>:
 80a234c:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080a2350 <__adddf3>:
 80a2350:	b530      	push	{r4, r5, lr}
 80a2352:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80a2356:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80a235a:	ea94 0f05 	teq	r4, r5
 80a235e:	bf08      	it	eq
 80a2360:	ea90 0f02 	teqeq	r0, r2
 80a2364:	bf1f      	itttt	ne
 80a2366:	ea54 0c00 	orrsne.w	ip, r4, r0
 80a236a:	ea55 0c02 	orrsne.w	ip, r5, r2
 80a236e:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80a2372:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80a2376:	f000 80e2 	beq.w	80a253e <__adddf3+0x1ee>
 80a237a:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80a237e:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80a2382:	bfb8      	it	lt
 80a2384:	426d      	neglt	r5, r5
 80a2386:	dd0c      	ble.n	80a23a2 <__adddf3+0x52>
 80a2388:	442c      	add	r4, r5
 80a238a:	ea80 0202 	eor.w	r2, r0, r2
 80a238e:	ea81 0303 	eor.w	r3, r1, r3
 80a2392:	ea82 0000 	eor.w	r0, r2, r0
 80a2396:	ea83 0101 	eor.w	r1, r3, r1
 80a239a:	ea80 0202 	eor.w	r2, r0, r2
 80a239e:	ea81 0303 	eor.w	r3, r1, r3
 80a23a2:	2d36      	cmp	r5, #54	; 0x36
 80a23a4:	bf88      	it	hi
 80a23a6:	bd30      	pophi	{r4, r5, pc}
 80a23a8:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80a23ac:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80a23b0:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80a23b4:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80a23b8:	d002      	beq.n	80a23c0 <__adddf3+0x70>
 80a23ba:	4240      	negs	r0, r0
 80a23bc:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80a23c0:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80a23c4:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80a23c8:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80a23cc:	d002      	beq.n	80a23d4 <__adddf3+0x84>
 80a23ce:	4252      	negs	r2, r2
 80a23d0:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80a23d4:	ea94 0f05 	teq	r4, r5
 80a23d8:	f000 80a7 	beq.w	80a252a <__adddf3+0x1da>
 80a23dc:	f1a4 0401 	sub.w	r4, r4, #1
 80a23e0:	f1d5 0e20 	rsbs	lr, r5, #32
 80a23e4:	db0d      	blt.n	80a2402 <__adddf3+0xb2>
 80a23e6:	fa02 fc0e 	lsl.w	ip, r2, lr
 80a23ea:	fa22 f205 	lsr.w	r2, r2, r5
 80a23ee:	1880      	adds	r0, r0, r2
 80a23f0:	f141 0100 	adc.w	r1, r1, #0
 80a23f4:	fa03 f20e 	lsl.w	r2, r3, lr
 80a23f8:	1880      	adds	r0, r0, r2
 80a23fa:	fa43 f305 	asr.w	r3, r3, r5
 80a23fe:	4159      	adcs	r1, r3
 80a2400:	e00e      	b.n	80a2420 <__adddf3+0xd0>
 80a2402:	f1a5 0520 	sub.w	r5, r5, #32
 80a2406:	f10e 0e20 	add.w	lr, lr, #32
 80a240a:	2a01      	cmp	r2, #1
 80a240c:	fa03 fc0e 	lsl.w	ip, r3, lr
 80a2410:	bf28      	it	cs
 80a2412:	f04c 0c02 	orrcs.w	ip, ip, #2
 80a2416:	fa43 f305 	asr.w	r3, r3, r5
 80a241a:	18c0      	adds	r0, r0, r3
 80a241c:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80a2420:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80a2424:	d507      	bpl.n	80a2436 <__adddf3+0xe6>
 80a2426:	f04f 0e00 	mov.w	lr, #0
 80a242a:	f1dc 0c00 	rsbs	ip, ip, #0
 80a242e:	eb7e 0000 	sbcs.w	r0, lr, r0
 80a2432:	eb6e 0101 	sbc.w	r1, lr, r1
 80a2436:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80a243a:	d31b      	bcc.n	80a2474 <__adddf3+0x124>
 80a243c:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80a2440:	d30c      	bcc.n	80a245c <__adddf3+0x10c>
 80a2442:	0849      	lsrs	r1, r1, #1
 80a2444:	ea5f 0030 	movs.w	r0, r0, rrx
 80a2448:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80a244c:	f104 0401 	add.w	r4, r4, #1
 80a2450:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80a2454:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80a2458:	f080 809a 	bcs.w	80a2590 <__adddf3+0x240>
 80a245c:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80a2460:	bf08      	it	eq
 80a2462:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80a2466:	f150 0000 	adcs.w	r0, r0, #0
 80a246a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80a246e:	ea41 0105 	orr.w	r1, r1, r5
 80a2472:	bd30      	pop	{r4, r5, pc}
 80a2474:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80a2478:	4140      	adcs	r0, r0
 80a247a:	eb41 0101 	adc.w	r1, r1, r1
 80a247e:	3c01      	subs	r4, #1
 80a2480:	bf28      	it	cs
 80a2482:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80a2486:	d2e9      	bcs.n	80a245c <__adddf3+0x10c>
 80a2488:	f091 0f00 	teq	r1, #0
 80a248c:	bf04      	itt	eq
 80a248e:	4601      	moveq	r1, r0
 80a2490:	2000      	moveq	r0, #0
 80a2492:	fab1 f381 	clz	r3, r1
 80a2496:	bf08      	it	eq
 80a2498:	3320      	addeq	r3, #32
 80a249a:	f1a3 030b 	sub.w	r3, r3, #11
 80a249e:	f1b3 0220 	subs.w	r2, r3, #32
 80a24a2:	da0c      	bge.n	80a24be <__adddf3+0x16e>
 80a24a4:	320c      	adds	r2, #12
 80a24a6:	dd08      	ble.n	80a24ba <__adddf3+0x16a>
 80a24a8:	f102 0c14 	add.w	ip, r2, #20
 80a24ac:	f1c2 020c 	rsb	r2, r2, #12
 80a24b0:	fa01 f00c 	lsl.w	r0, r1, ip
 80a24b4:	fa21 f102 	lsr.w	r1, r1, r2
 80a24b8:	e00c      	b.n	80a24d4 <__adddf3+0x184>
 80a24ba:	f102 0214 	add.w	r2, r2, #20
 80a24be:	bfd8      	it	le
 80a24c0:	f1c2 0c20 	rsble	ip, r2, #32
 80a24c4:	fa01 f102 	lsl.w	r1, r1, r2
 80a24c8:	fa20 fc0c 	lsr.w	ip, r0, ip
 80a24cc:	bfdc      	itt	le
 80a24ce:	ea41 010c 	orrle.w	r1, r1, ip
 80a24d2:	4090      	lslle	r0, r2
 80a24d4:	1ae4      	subs	r4, r4, r3
 80a24d6:	bfa2      	ittt	ge
 80a24d8:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80a24dc:	4329      	orrge	r1, r5
 80a24de:	bd30      	popge	{r4, r5, pc}
 80a24e0:	ea6f 0404 	mvn.w	r4, r4
 80a24e4:	3c1f      	subs	r4, #31
 80a24e6:	da1c      	bge.n	80a2522 <__adddf3+0x1d2>
 80a24e8:	340c      	adds	r4, #12
 80a24ea:	dc0e      	bgt.n	80a250a <__adddf3+0x1ba>
 80a24ec:	f104 0414 	add.w	r4, r4, #20
 80a24f0:	f1c4 0220 	rsb	r2, r4, #32
 80a24f4:	fa20 f004 	lsr.w	r0, r0, r4
 80a24f8:	fa01 f302 	lsl.w	r3, r1, r2
 80a24fc:	ea40 0003 	orr.w	r0, r0, r3
 80a2500:	fa21 f304 	lsr.w	r3, r1, r4
 80a2504:	ea45 0103 	orr.w	r1, r5, r3
 80a2508:	bd30      	pop	{r4, r5, pc}
 80a250a:	f1c4 040c 	rsb	r4, r4, #12
 80a250e:	f1c4 0220 	rsb	r2, r4, #32
 80a2512:	fa20 f002 	lsr.w	r0, r0, r2
 80a2516:	fa01 f304 	lsl.w	r3, r1, r4
 80a251a:	ea40 0003 	orr.w	r0, r0, r3
 80a251e:	4629      	mov	r1, r5
 80a2520:	bd30      	pop	{r4, r5, pc}
 80a2522:	fa21 f004 	lsr.w	r0, r1, r4
 80a2526:	4629      	mov	r1, r5
 80a2528:	bd30      	pop	{r4, r5, pc}
 80a252a:	f094 0f00 	teq	r4, #0
 80a252e:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80a2532:	bf06      	itte	eq
 80a2534:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80a2538:	3401      	addeq	r4, #1
 80a253a:	3d01      	subne	r5, #1
 80a253c:	e74e      	b.n	80a23dc <__adddf3+0x8c>
 80a253e:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80a2542:	bf18      	it	ne
 80a2544:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80a2548:	d029      	beq.n	80a259e <__adddf3+0x24e>
 80a254a:	ea94 0f05 	teq	r4, r5
 80a254e:	bf08      	it	eq
 80a2550:	ea90 0f02 	teqeq	r0, r2
 80a2554:	d005      	beq.n	80a2562 <__adddf3+0x212>
 80a2556:	ea54 0c00 	orrs.w	ip, r4, r0
 80a255a:	bf04      	itt	eq
 80a255c:	4619      	moveq	r1, r3
 80a255e:	4610      	moveq	r0, r2
 80a2560:	bd30      	pop	{r4, r5, pc}
 80a2562:	ea91 0f03 	teq	r1, r3
 80a2566:	bf1e      	ittt	ne
 80a2568:	2100      	movne	r1, #0
 80a256a:	2000      	movne	r0, #0
 80a256c:	bd30      	popne	{r4, r5, pc}
 80a256e:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80a2572:	d105      	bne.n	80a2580 <__adddf3+0x230>
 80a2574:	0040      	lsls	r0, r0, #1
 80a2576:	4149      	adcs	r1, r1
 80a2578:	bf28      	it	cs
 80a257a:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80a257e:	bd30      	pop	{r4, r5, pc}
 80a2580:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80a2584:	bf3c      	itt	cc
 80a2586:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80a258a:	bd30      	popcc	{r4, r5, pc}
 80a258c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80a2590:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80a2594:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80a2598:	f04f 0000 	mov.w	r0, #0
 80a259c:	bd30      	pop	{r4, r5, pc}
 80a259e:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80a25a2:	bf1a      	itte	ne
 80a25a4:	4619      	movne	r1, r3
 80a25a6:	4610      	movne	r0, r2
 80a25a8:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80a25ac:	bf1c      	itt	ne
 80a25ae:	460b      	movne	r3, r1
 80a25b0:	4602      	movne	r2, r0
 80a25b2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80a25b6:	bf06      	itte	eq
 80a25b8:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80a25bc:	ea91 0f03 	teqeq	r1, r3
 80a25c0:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80a25c4:	bd30      	pop	{r4, r5, pc}
 80a25c6:	bf00      	nop

080a25c8 <__aeabi_ui2d>:
 80a25c8:	f090 0f00 	teq	r0, #0
 80a25cc:	bf04      	itt	eq
 80a25ce:	2100      	moveq	r1, #0
 80a25d0:	4770      	bxeq	lr
 80a25d2:	b530      	push	{r4, r5, lr}
 80a25d4:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80a25d8:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80a25dc:	f04f 0500 	mov.w	r5, #0
 80a25e0:	f04f 0100 	mov.w	r1, #0
 80a25e4:	e750      	b.n	80a2488 <__adddf3+0x138>
 80a25e6:	bf00      	nop

080a25e8 <__aeabi_i2d>:
 80a25e8:	f090 0f00 	teq	r0, #0
 80a25ec:	bf04      	itt	eq
 80a25ee:	2100      	moveq	r1, #0
 80a25f0:	4770      	bxeq	lr
 80a25f2:	b530      	push	{r4, r5, lr}
 80a25f4:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80a25f8:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80a25fc:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 80a2600:	bf48      	it	mi
 80a2602:	4240      	negmi	r0, r0
 80a2604:	f04f 0100 	mov.w	r1, #0
 80a2608:	e73e      	b.n	80a2488 <__adddf3+0x138>
 80a260a:	bf00      	nop

080a260c <__aeabi_f2d>:
 80a260c:	0042      	lsls	r2, r0, #1
 80a260e:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80a2612:	ea4f 0131 	mov.w	r1, r1, rrx
 80a2616:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80a261a:	bf1f      	itttt	ne
 80a261c:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80a2620:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80a2624:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80a2628:	4770      	bxne	lr
 80a262a:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80a262e:	bf08      	it	eq
 80a2630:	4770      	bxeq	lr
 80a2632:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80a2636:	bf04      	itt	eq
 80a2638:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80a263c:	4770      	bxeq	lr
 80a263e:	b530      	push	{r4, r5, lr}
 80a2640:	f44f 7460 	mov.w	r4, #896	; 0x380
 80a2644:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80a2648:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80a264c:	e71c      	b.n	80a2488 <__adddf3+0x138>
 80a264e:	bf00      	nop

080a2650 <__aeabi_ul2d>:
 80a2650:	ea50 0201 	orrs.w	r2, r0, r1
 80a2654:	bf08      	it	eq
 80a2656:	4770      	bxeq	lr
 80a2658:	b530      	push	{r4, r5, lr}
 80a265a:	f04f 0500 	mov.w	r5, #0
 80a265e:	e00a      	b.n	80a2676 <__aeabi_l2d+0x16>

080a2660 <__aeabi_l2d>:
 80a2660:	ea50 0201 	orrs.w	r2, r0, r1
 80a2664:	bf08      	it	eq
 80a2666:	4770      	bxeq	lr
 80a2668:	b530      	push	{r4, r5, lr}
 80a266a:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80a266e:	d502      	bpl.n	80a2676 <__aeabi_l2d+0x16>
 80a2670:	4240      	negs	r0, r0
 80a2672:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80a2676:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80a267a:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80a267e:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80a2682:	f43f aed8 	beq.w	80a2436 <__adddf3+0xe6>
 80a2686:	f04f 0203 	mov.w	r2, #3
 80a268a:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80a268e:	bf18      	it	ne
 80a2690:	3203      	addne	r2, #3
 80a2692:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80a2696:	bf18      	it	ne
 80a2698:	3203      	addne	r2, #3
 80a269a:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80a269e:	f1c2 0320 	rsb	r3, r2, #32
 80a26a2:	fa00 fc03 	lsl.w	ip, r0, r3
 80a26a6:	fa20 f002 	lsr.w	r0, r0, r2
 80a26aa:	fa01 fe03 	lsl.w	lr, r1, r3
 80a26ae:	ea40 000e 	orr.w	r0, r0, lr
 80a26b2:	fa21 f102 	lsr.w	r1, r1, r2
 80a26b6:	4414      	add	r4, r2
 80a26b8:	e6bd      	b.n	80a2436 <__adddf3+0xe6>
 80a26ba:	bf00      	nop

080a26bc <__aeabi_frsub>:
 80a26bc:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
 80a26c0:	e002      	b.n	80a26c8 <__addsf3>
 80a26c2:	bf00      	nop

080a26c4 <__aeabi_fsub>:
 80a26c4:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000

080a26c8 <__addsf3>:
 80a26c8:	0042      	lsls	r2, r0, #1
 80a26ca:	bf1f      	itttt	ne
 80a26cc:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 80a26d0:	ea92 0f03 	teqne	r2, r3
 80a26d4:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 80a26d8:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 80a26dc:	d06a      	beq.n	80a27b4 <__addsf3+0xec>
 80a26de:	ea4f 6212 	mov.w	r2, r2, lsr #24
 80a26e2:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 80a26e6:	bfc1      	itttt	gt
 80a26e8:	18d2      	addgt	r2, r2, r3
 80a26ea:	4041      	eorgt	r1, r0
 80a26ec:	4048      	eorgt	r0, r1
 80a26ee:	4041      	eorgt	r1, r0
 80a26f0:	bfb8      	it	lt
 80a26f2:	425b      	neglt	r3, r3
 80a26f4:	2b19      	cmp	r3, #25
 80a26f6:	bf88      	it	hi
 80a26f8:	4770      	bxhi	lr
 80a26fa:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 80a26fe:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 80a2702:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
 80a2706:	bf18      	it	ne
 80a2708:	4240      	negne	r0, r0
 80a270a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80a270e:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
 80a2712:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
 80a2716:	bf18      	it	ne
 80a2718:	4249      	negne	r1, r1
 80a271a:	ea92 0f03 	teq	r2, r3
 80a271e:	d03f      	beq.n	80a27a0 <__addsf3+0xd8>
 80a2720:	f1a2 0201 	sub.w	r2, r2, #1
 80a2724:	fa41 fc03 	asr.w	ip, r1, r3
 80a2728:	eb10 000c 	adds.w	r0, r0, ip
 80a272c:	f1c3 0320 	rsb	r3, r3, #32
 80a2730:	fa01 f103 	lsl.w	r1, r1, r3
 80a2734:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 80a2738:	d502      	bpl.n	80a2740 <__addsf3+0x78>
 80a273a:	4249      	negs	r1, r1
 80a273c:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 80a2740:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
 80a2744:	d313      	bcc.n	80a276e <__addsf3+0xa6>
 80a2746:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 80a274a:	d306      	bcc.n	80a275a <__addsf3+0x92>
 80a274c:	0840      	lsrs	r0, r0, #1
 80a274e:	ea4f 0131 	mov.w	r1, r1, rrx
 80a2752:	f102 0201 	add.w	r2, r2, #1
 80a2756:	2afe      	cmp	r2, #254	; 0xfe
 80a2758:	d251      	bcs.n	80a27fe <__addsf3+0x136>
 80a275a:	f1b1 4f00 	cmp.w	r1, #2147483648	; 0x80000000
 80a275e:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 80a2762:	bf08      	it	eq
 80a2764:	f020 0001 	biceq.w	r0, r0, #1
 80a2768:	ea40 0003 	orr.w	r0, r0, r3
 80a276c:	4770      	bx	lr
 80a276e:	0049      	lsls	r1, r1, #1
 80a2770:	eb40 0000 	adc.w	r0, r0, r0
 80a2774:	3a01      	subs	r2, #1
 80a2776:	bf28      	it	cs
 80a2778:	f5b0 0f00 	cmpcs.w	r0, #8388608	; 0x800000
 80a277c:	d2ed      	bcs.n	80a275a <__addsf3+0x92>
 80a277e:	fab0 fc80 	clz	ip, r0
 80a2782:	f1ac 0c08 	sub.w	ip, ip, #8
 80a2786:	ebb2 020c 	subs.w	r2, r2, ip
 80a278a:	fa00 f00c 	lsl.w	r0, r0, ip
 80a278e:	bfaa      	itet	ge
 80a2790:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 80a2794:	4252      	neglt	r2, r2
 80a2796:	4318      	orrge	r0, r3
 80a2798:	bfbc      	itt	lt
 80a279a:	40d0      	lsrlt	r0, r2
 80a279c:	4318      	orrlt	r0, r3
 80a279e:	4770      	bx	lr
 80a27a0:	f092 0f00 	teq	r2, #0
 80a27a4:	f481 0100 	eor.w	r1, r1, #8388608	; 0x800000
 80a27a8:	bf06      	itte	eq
 80a27aa:	f480 0000 	eoreq.w	r0, r0, #8388608	; 0x800000
 80a27ae:	3201      	addeq	r2, #1
 80a27b0:	3b01      	subne	r3, #1
 80a27b2:	e7b5      	b.n	80a2720 <__addsf3+0x58>
 80a27b4:	ea4f 0341 	mov.w	r3, r1, lsl #1
 80a27b8:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 80a27bc:	bf18      	it	ne
 80a27be:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 80a27c2:	d021      	beq.n	80a2808 <__addsf3+0x140>
 80a27c4:	ea92 0f03 	teq	r2, r3
 80a27c8:	d004      	beq.n	80a27d4 <__addsf3+0x10c>
 80a27ca:	f092 0f00 	teq	r2, #0
 80a27ce:	bf08      	it	eq
 80a27d0:	4608      	moveq	r0, r1
 80a27d2:	4770      	bx	lr
 80a27d4:	ea90 0f01 	teq	r0, r1
 80a27d8:	bf1c      	itt	ne
 80a27da:	2000      	movne	r0, #0
 80a27dc:	4770      	bxne	lr
 80a27de:	f012 4f7f 	tst.w	r2, #4278190080	; 0xff000000
 80a27e2:	d104      	bne.n	80a27ee <__addsf3+0x126>
 80a27e4:	0040      	lsls	r0, r0, #1
 80a27e6:	bf28      	it	cs
 80a27e8:	f040 4000 	orrcs.w	r0, r0, #2147483648	; 0x80000000
 80a27ec:	4770      	bx	lr
 80a27ee:	f112 7200 	adds.w	r2, r2, #33554432	; 0x2000000
 80a27f2:	bf3c      	itt	cc
 80a27f4:	f500 0000 	addcc.w	r0, r0, #8388608	; 0x800000
 80a27f8:	4770      	bxcc	lr
 80a27fa:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 80a27fe:	f043 40fe 	orr.w	r0, r3, #2130706432	; 0x7f000000
 80a2802:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 80a2806:	4770      	bx	lr
 80a2808:	ea7f 6222 	mvns.w	r2, r2, asr #24
 80a280c:	bf16      	itet	ne
 80a280e:	4608      	movne	r0, r1
 80a2810:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 80a2814:	4601      	movne	r1, r0
 80a2816:	0242      	lsls	r2, r0, #9
 80a2818:	bf06      	itte	eq
 80a281a:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 80a281e:	ea90 0f01 	teqeq	r0, r1
 80a2822:	f440 0080 	orrne.w	r0, r0, #4194304	; 0x400000
 80a2826:	4770      	bx	lr

080a2828 <__aeabi_ui2f>:
 80a2828:	f04f 0300 	mov.w	r3, #0
 80a282c:	e004      	b.n	80a2838 <__aeabi_i2f+0x8>
 80a282e:	bf00      	nop

080a2830 <__aeabi_i2f>:
 80a2830:	f010 4300 	ands.w	r3, r0, #2147483648	; 0x80000000
 80a2834:	bf48      	it	mi
 80a2836:	4240      	negmi	r0, r0
 80a2838:	ea5f 0c00 	movs.w	ip, r0
 80a283c:	bf08      	it	eq
 80a283e:	4770      	bxeq	lr
 80a2840:	f043 4396 	orr.w	r3, r3, #1258291200	; 0x4b000000
 80a2844:	4601      	mov	r1, r0
 80a2846:	f04f 0000 	mov.w	r0, #0
 80a284a:	e01c      	b.n	80a2886 <__aeabi_l2f+0x2a>

080a284c <__aeabi_ul2f>:
 80a284c:	ea50 0201 	orrs.w	r2, r0, r1
 80a2850:	bf08      	it	eq
 80a2852:	4770      	bxeq	lr
 80a2854:	f04f 0300 	mov.w	r3, #0
 80a2858:	e00a      	b.n	80a2870 <__aeabi_l2f+0x14>
 80a285a:	bf00      	nop

080a285c <__aeabi_l2f>:
 80a285c:	ea50 0201 	orrs.w	r2, r0, r1
 80a2860:	bf08      	it	eq
 80a2862:	4770      	bxeq	lr
 80a2864:	f011 4300 	ands.w	r3, r1, #2147483648	; 0x80000000
 80a2868:	d502      	bpl.n	80a2870 <__aeabi_l2f+0x14>
 80a286a:	4240      	negs	r0, r0
 80a286c:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80a2870:	ea5f 0c01 	movs.w	ip, r1
 80a2874:	bf02      	ittt	eq
 80a2876:	4684      	moveq	ip, r0
 80a2878:	4601      	moveq	r1, r0
 80a287a:	2000      	moveq	r0, #0
 80a287c:	f043 43b6 	orr.w	r3, r3, #1526726656	; 0x5b000000
 80a2880:	bf08      	it	eq
 80a2882:	f1a3 5380 	subeq.w	r3, r3, #268435456	; 0x10000000
 80a2886:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
 80a288a:	fabc f28c 	clz	r2, ip
 80a288e:	3a08      	subs	r2, #8
 80a2890:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 80a2894:	db10      	blt.n	80a28b8 <__aeabi_l2f+0x5c>
 80a2896:	fa01 fc02 	lsl.w	ip, r1, r2
 80a289a:	4463      	add	r3, ip
 80a289c:	fa00 fc02 	lsl.w	ip, r0, r2
 80a28a0:	f1c2 0220 	rsb	r2, r2, #32
 80a28a4:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80a28a8:	fa20 f202 	lsr.w	r2, r0, r2
 80a28ac:	eb43 0002 	adc.w	r0, r3, r2
 80a28b0:	bf08      	it	eq
 80a28b2:	f020 0001 	biceq.w	r0, r0, #1
 80a28b6:	4770      	bx	lr
 80a28b8:	f102 0220 	add.w	r2, r2, #32
 80a28bc:	fa01 fc02 	lsl.w	ip, r1, r2
 80a28c0:	f1c2 0220 	rsb	r2, r2, #32
 80a28c4:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 80a28c8:	fa21 f202 	lsr.w	r2, r1, r2
 80a28cc:	eb43 0002 	adc.w	r0, r3, r2
 80a28d0:	bf08      	it	eq
 80a28d2:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 80a28d6:	4770      	bx	lr

080a28d8 <__aeabi_fmul>:
 80a28d8:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80a28dc:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 80a28e0:	bf1e      	ittt	ne
 80a28e2:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 80a28e6:	ea92 0f0c 	teqne	r2, ip
 80a28ea:	ea93 0f0c 	teqne	r3, ip
 80a28ee:	d06f      	beq.n	80a29d0 <__aeabi_fmul+0xf8>
 80a28f0:	441a      	add	r2, r3
 80a28f2:	ea80 0c01 	eor.w	ip, r0, r1
 80a28f6:	0240      	lsls	r0, r0, #9
 80a28f8:	bf18      	it	ne
 80a28fa:	ea5f 2141 	movsne.w	r1, r1, lsl #9
 80a28fe:	d01e      	beq.n	80a293e <__aeabi_fmul+0x66>
 80a2900:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 80a2904:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
 80a2908:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
 80a290c:	fba0 3101 	umull	r3, r1, r0, r1
 80a2910:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 80a2914:	f5b1 0f00 	cmp.w	r1, #8388608	; 0x800000
 80a2918:	bf3e      	ittt	cc
 80a291a:	0049      	lslcc	r1, r1, #1
 80a291c:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
 80a2920:	005b      	lslcc	r3, r3, #1
 80a2922:	ea40 0001 	orr.w	r0, r0, r1
 80a2926:	f162 027f 	sbc.w	r2, r2, #127	; 0x7f
 80a292a:	2afd      	cmp	r2, #253	; 0xfd
 80a292c:	d81d      	bhi.n	80a296a <__aeabi_fmul+0x92>
 80a292e:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80a2932:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 80a2936:	bf08      	it	eq
 80a2938:	f020 0001 	biceq.w	r0, r0, #1
 80a293c:	4770      	bx	lr
 80a293e:	f090 0f00 	teq	r0, #0
 80a2942:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 80a2946:	bf08      	it	eq
 80a2948:	0249      	lsleq	r1, r1, #9
 80a294a:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 80a294e:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
 80a2952:	3a7f      	subs	r2, #127	; 0x7f
 80a2954:	bfc2      	ittt	gt
 80a2956:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 80a295a:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 80a295e:	4770      	bxgt	lr
 80a2960:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 80a2964:	f04f 0300 	mov.w	r3, #0
 80a2968:	3a01      	subs	r2, #1
 80a296a:	dc5d      	bgt.n	80a2a28 <__aeabi_fmul+0x150>
 80a296c:	f112 0f19 	cmn.w	r2, #25
 80a2970:	bfdc      	itt	le
 80a2972:	f000 4000 	andle.w	r0, r0, #2147483648	; 0x80000000
 80a2976:	4770      	bxle	lr
 80a2978:	f1c2 0200 	rsb	r2, r2, #0
 80a297c:	0041      	lsls	r1, r0, #1
 80a297e:	fa21 f102 	lsr.w	r1, r1, r2
 80a2982:	f1c2 0220 	rsb	r2, r2, #32
 80a2986:	fa00 fc02 	lsl.w	ip, r0, r2
 80a298a:	ea5f 0031 	movs.w	r0, r1, rrx
 80a298e:	f140 0000 	adc.w	r0, r0, #0
 80a2992:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
 80a2996:	bf08      	it	eq
 80a2998:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 80a299c:	4770      	bx	lr
 80a299e:	f092 0f00 	teq	r2, #0
 80a29a2:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 80a29a6:	bf02      	ittt	eq
 80a29a8:	0040      	lsleq	r0, r0, #1
 80a29aa:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 80a29ae:	3a01      	subeq	r2, #1
 80a29b0:	d0f9      	beq.n	80a29a6 <__aeabi_fmul+0xce>
 80a29b2:	ea40 000c 	orr.w	r0, r0, ip
 80a29b6:	f093 0f00 	teq	r3, #0
 80a29ba:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 80a29be:	bf02      	ittt	eq
 80a29c0:	0049      	lsleq	r1, r1, #1
 80a29c2:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 80a29c6:	3b01      	subeq	r3, #1
 80a29c8:	d0f9      	beq.n	80a29be <__aeabi_fmul+0xe6>
 80a29ca:	ea41 010c 	orr.w	r1, r1, ip
 80a29ce:	e78f      	b.n	80a28f0 <__aeabi_fmul+0x18>
 80a29d0:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 80a29d4:	ea92 0f0c 	teq	r2, ip
 80a29d8:	bf18      	it	ne
 80a29da:	ea93 0f0c 	teqne	r3, ip
 80a29de:	d00a      	beq.n	80a29f6 <__aeabi_fmul+0x11e>
 80a29e0:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 80a29e4:	bf18      	it	ne
 80a29e6:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 80a29ea:	d1d8      	bne.n	80a299e <__aeabi_fmul+0xc6>
 80a29ec:	ea80 0001 	eor.w	r0, r0, r1
 80a29f0:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 80a29f4:	4770      	bx	lr
 80a29f6:	f090 0f00 	teq	r0, #0
 80a29fa:	bf17      	itett	ne
 80a29fc:	f090 4f00 	teqne	r0, #2147483648	; 0x80000000
 80a2a00:	4608      	moveq	r0, r1
 80a2a02:	f091 0f00 	teqne	r1, #0
 80a2a06:	f091 4f00 	teqne	r1, #2147483648	; 0x80000000
 80a2a0a:	d014      	beq.n	80a2a36 <__aeabi_fmul+0x15e>
 80a2a0c:	ea92 0f0c 	teq	r2, ip
 80a2a10:	d101      	bne.n	80a2a16 <__aeabi_fmul+0x13e>
 80a2a12:	0242      	lsls	r2, r0, #9
 80a2a14:	d10f      	bne.n	80a2a36 <__aeabi_fmul+0x15e>
 80a2a16:	ea93 0f0c 	teq	r3, ip
 80a2a1a:	d103      	bne.n	80a2a24 <__aeabi_fmul+0x14c>
 80a2a1c:	024b      	lsls	r3, r1, #9
 80a2a1e:	bf18      	it	ne
 80a2a20:	4608      	movne	r0, r1
 80a2a22:	d108      	bne.n	80a2a36 <__aeabi_fmul+0x15e>
 80a2a24:	ea80 0001 	eor.w	r0, r0, r1
 80a2a28:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 80a2a2c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 80a2a30:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 80a2a34:	4770      	bx	lr
 80a2a36:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 80a2a3a:	f440 0040 	orr.w	r0, r0, #12582912	; 0xc00000
 80a2a3e:	4770      	bx	lr

080a2a40 <__aeabi_fdiv>:
 80a2a40:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80a2a44:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 80a2a48:	bf1e      	ittt	ne
 80a2a4a:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 80a2a4e:	ea92 0f0c 	teqne	r2, ip
 80a2a52:	ea93 0f0c 	teqne	r3, ip
 80a2a56:	d069      	beq.n	80a2b2c <__aeabi_fdiv+0xec>
 80a2a58:	eba2 0203 	sub.w	r2, r2, r3
 80a2a5c:	ea80 0c01 	eor.w	ip, r0, r1
 80a2a60:	0249      	lsls	r1, r1, #9
 80a2a62:	ea4f 2040 	mov.w	r0, r0, lsl #9
 80a2a66:	d037      	beq.n	80a2ad8 <__aeabi_fdiv+0x98>
 80a2a68:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 80a2a6c:	ea43 1111 	orr.w	r1, r3, r1, lsr #4
 80a2a70:	ea43 1310 	orr.w	r3, r3, r0, lsr #4
 80a2a74:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 80a2a78:	428b      	cmp	r3, r1
 80a2a7a:	bf38      	it	cc
 80a2a7c:	005b      	lslcc	r3, r3, #1
 80a2a7e:	f142 027d 	adc.w	r2, r2, #125	; 0x7d
 80a2a82:	f44f 0c00 	mov.w	ip, #8388608	; 0x800000
 80a2a86:	428b      	cmp	r3, r1
 80a2a88:	bf24      	itt	cs
 80a2a8a:	1a5b      	subcs	r3, r3, r1
 80a2a8c:	ea40 000c 	orrcs.w	r0, r0, ip
 80a2a90:	ebb3 0f51 	cmp.w	r3, r1, lsr #1
 80a2a94:	bf24      	itt	cs
 80a2a96:	eba3 0351 	subcs.w	r3, r3, r1, lsr #1
 80a2a9a:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80a2a9e:	ebb3 0f91 	cmp.w	r3, r1, lsr #2
 80a2aa2:	bf24      	itt	cs
 80a2aa4:	eba3 0391 	subcs.w	r3, r3, r1, lsr #2
 80a2aa8:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80a2aac:	ebb3 0fd1 	cmp.w	r3, r1, lsr #3
 80a2ab0:	bf24      	itt	cs
 80a2ab2:	eba3 03d1 	subcs.w	r3, r3, r1, lsr #3
 80a2ab6:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 80a2aba:	011b      	lsls	r3, r3, #4
 80a2abc:	bf18      	it	ne
 80a2abe:	ea5f 1c1c 	movsne.w	ip, ip, lsr #4
 80a2ac2:	d1e0      	bne.n	80a2a86 <__aeabi_fdiv+0x46>
 80a2ac4:	2afd      	cmp	r2, #253	; 0xfd
 80a2ac6:	f63f af50 	bhi.w	80a296a <__aeabi_fmul+0x92>
 80a2aca:	428b      	cmp	r3, r1
 80a2acc:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 80a2ad0:	bf08      	it	eq
 80a2ad2:	f020 0001 	biceq.w	r0, r0, #1
 80a2ad6:	4770      	bx	lr
 80a2ad8:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 80a2adc:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 80a2ae0:	327f      	adds	r2, #127	; 0x7f
 80a2ae2:	bfc2      	ittt	gt
 80a2ae4:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 80a2ae8:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 80a2aec:	4770      	bxgt	lr
 80a2aee:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 80a2af2:	f04f 0300 	mov.w	r3, #0
 80a2af6:	3a01      	subs	r2, #1
 80a2af8:	e737      	b.n	80a296a <__aeabi_fmul+0x92>
 80a2afa:	f092 0f00 	teq	r2, #0
 80a2afe:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 80a2b02:	bf02      	ittt	eq
 80a2b04:	0040      	lsleq	r0, r0, #1
 80a2b06:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 80a2b0a:	3a01      	subeq	r2, #1
 80a2b0c:	d0f9      	beq.n	80a2b02 <__aeabi_fdiv+0xc2>
 80a2b0e:	ea40 000c 	orr.w	r0, r0, ip
 80a2b12:	f093 0f00 	teq	r3, #0
 80a2b16:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 80a2b1a:	bf02      	ittt	eq
 80a2b1c:	0049      	lsleq	r1, r1, #1
 80a2b1e:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 80a2b22:	3b01      	subeq	r3, #1
 80a2b24:	d0f9      	beq.n	80a2b1a <__aeabi_fdiv+0xda>
 80a2b26:	ea41 010c 	orr.w	r1, r1, ip
 80a2b2a:	e795      	b.n	80a2a58 <__aeabi_fdiv+0x18>
 80a2b2c:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 80a2b30:	ea92 0f0c 	teq	r2, ip
 80a2b34:	d108      	bne.n	80a2b48 <__aeabi_fdiv+0x108>
 80a2b36:	0242      	lsls	r2, r0, #9
 80a2b38:	f47f af7d 	bne.w	80a2a36 <__aeabi_fmul+0x15e>
 80a2b3c:	ea93 0f0c 	teq	r3, ip
 80a2b40:	f47f af70 	bne.w	80a2a24 <__aeabi_fmul+0x14c>
 80a2b44:	4608      	mov	r0, r1
 80a2b46:	e776      	b.n	80a2a36 <__aeabi_fmul+0x15e>
 80a2b48:	ea93 0f0c 	teq	r3, ip
 80a2b4c:	d104      	bne.n	80a2b58 <__aeabi_fdiv+0x118>
 80a2b4e:	024b      	lsls	r3, r1, #9
 80a2b50:	f43f af4c 	beq.w	80a29ec <__aeabi_fmul+0x114>
 80a2b54:	4608      	mov	r0, r1
 80a2b56:	e76e      	b.n	80a2a36 <__aeabi_fmul+0x15e>
 80a2b58:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 80a2b5c:	bf18      	it	ne
 80a2b5e:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 80a2b62:	d1ca      	bne.n	80a2afa <__aeabi_fdiv+0xba>
 80a2b64:	f030 4200 	bics.w	r2, r0, #2147483648	; 0x80000000
 80a2b68:	f47f af5c 	bne.w	80a2a24 <__aeabi_fmul+0x14c>
 80a2b6c:	f031 4300 	bics.w	r3, r1, #2147483648	; 0x80000000
 80a2b70:	f47f af3c 	bne.w	80a29ec <__aeabi_fmul+0x114>
 80a2b74:	e75f      	b.n	80a2a36 <__aeabi_fmul+0x15e>
 80a2b76:	bf00      	nop

080a2b78 <__gesf2>:
 80a2b78:	f04f 3cff 	mov.w	ip, #4294967295
 80a2b7c:	e006      	b.n	80a2b8c <__cmpsf2+0x4>
 80a2b7e:	bf00      	nop

080a2b80 <__lesf2>:
 80a2b80:	f04f 0c01 	mov.w	ip, #1
 80a2b84:	e002      	b.n	80a2b8c <__cmpsf2+0x4>
 80a2b86:	bf00      	nop

080a2b88 <__cmpsf2>:
 80a2b88:	f04f 0c01 	mov.w	ip, #1
 80a2b8c:	f84d cd04 	str.w	ip, [sp, #-4]!
 80a2b90:	ea4f 0240 	mov.w	r2, r0, lsl #1
 80a2b94:	ea4f 0341 	mov.w	r3, r1, lsl #1
 80a2b98:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 80a2b9c:	bf18      	it	ne
 80a2b9e:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 80a2ba2:	d011      	beq.n	80a2bc8 <__cmpsf2+0x40>
 80a2ba4:	b001      	add	sp, #4
 80a2ba6:	ea52 0c53 	orrs.w	ip, r2, r3, lsr #1
 80a2baa:	bf18      	it	ne
 80a2bac:	ea90 0f01 	teqne	r0, r1
 80a2bb0:	bf58      	it	pl
 80a2bb2:	ebb2 0003 	subspl.w	r0, r2, r3
 80a2bb6:	bf88      	it	hi
 80a2bb8:	17c8      	asrhi	r0, r1, #31
 80a2bba:	bf38      	it	cc
 80a2bbc:	ea6f 70e1 	mvncc.w	r0, r1, asr #31
 80a2bc0:	bf18      	it	ne
 80a2bc2:	f040 0001 	orrne.w	r0, r0, #1
 80a2bc6:	4770      	bx	lr
 80a2bc8:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 80a2bcc:	d102      	bne.n	80a2bd4 <__cmpsf2+0x4c>
 80a2bce:	ea5f 2c40 	movs.w	ip, r0, lsl #9
 80a2bd2:	d105      	bne.n	80a2be0 <__cmpsf2+0x58>
 80a2bd4:	ea7f 6c23 	mvns.w	ip, r3, asr #24
 80a2bd8:	d1e4      	bne.n	80a2ba4 <__cmpsf2+0x1c>
 80a2bda:	ea5f 2c41 	movs.w	ip, r1, lsl #9
 80a2bde:	d0e1      	beq.n	80a2ba4 <__cmpsf2+0x1c>
 80a2be0:	f85d 0b04 	ldr.w	r0, [sp], #4
 80a2be4:	4770      	bx	lr
 80a2be6:	bf00      	nop

080a2be8 <__aeabi_cfrcmple>:
 80a2be8:	4684      	mov	ip, r0
 80a2bea:	4608      	mov	r0, r1
 80a2bec:	4661      	mov	r1, ip
 80a2bee:	e7ff      	b.n	80a2bf0 <__aeabi_cfcmpeq>

080a2bf0 <__aeabi_cfcmpeq>:
 80a2bf0:	b50f      	push	{r0, r1, r2, r3, lr}
 80a2bf2:	f7ff ffc9 	bl	80a2b88 <__cmpsf2>
 80a2bf6:	2800      	cmp	r0, #0
 80a2bf8:	bf48      	it	mi
 80a2bfa:	f110 0f00 	cmnmi.w	r0, #0
 80a2bfe:	bd0f      	pop	{r0, r1, r2, r3, pc}

080a2c00 <__aeabi_fcmpeq>:
 80a2c00:	f84d ed08 	str.w	lr, [sp, #-8]!
 80a2c04:	f7ff fff4 	bl	80a2bf0 <__aeabi_cfcmpeq>
 80a2c08:	bf0c      	ite	eq
 80a2c0a:	2001      	moveq	r0, #1
 80a2c0c:	2000      	movne	r0, #0
 80a2c0e:	f85d fb08 	ldr.w	pc, [sp], #8
 80a2c12:	bf00      	nop

080a2c14 <__aeabi_fcmplt>:
 80a2c14:	f84d ed08 	str.w	lr, [sp, #-8]!
 80a2c18:	f7ff ffea 	bl	80a2bf0 <__aeabi_cfcmpeq>
 80a2c1c:	bf34      	ite	cc
 80a2c1e:	2001      	movcc	r0, #1
 80a2c20:	2000      	movcs	r0, #0
 80a2c22:	f85d fb08 	ldr.w	pc, [sp], #8
 80a2c26:	bf00      	nop

080a2c28 <__aeabi_fcmple>:
 80a2c28:	f84d ed08 	str.w	lr, [sp, #-8]!
 80a2c2c:	f7ff ffe0 	bl	80a2bf0 <__aeabi_cfcmpeq>
 80a2c30:	bf94      	ite	ls
 80a2c32:	2001      	movls	r0, #1
 80a2c34:	2000      	movhi	r0, #0
 80a2c36:	f85d fb08 	ldr.w	pc, [sp], #8
 80a2c3a:	bf00      	nop

080a2c3c <__aeabi_fcmpge>:
 80a2c3c:	f84d ed08 	str.w	lr, [sp, #-8]!
 80a2c40:	f7ff ffd2 	bl	80a2be8 <__aeabi_cfrcmple>
 80a2c44:	bf94      	ite	ls
 80a2c46:	2001      	movls	r0, #1
 80a2c48:	2000      	movhi	r0, #0
 80a2c4a:	f85d fb08 	ldr.w	pc, [sp], #8
 80a2c4e:	bf00      	nop

080a2c50 <__aeabi_fcmpgt>:
 80a2c50:	f84d ed08 	str.w	lr, [sp, #-8]!
 80a2c54:	f7ff ffc8 	bl	80a2be8 <__aeabi_cfrcmple>
 80a2c58:	bf34      	ite	cc
 80a2c5a:	2001      	movcc	r0, #1
 80a2c5c:	2000      	movcs	r0, #0
 80a2c5e:	f85d fb08 	ldr.w	pc, [sp], #8
 80a2c62:	bf00      	nop

080a2c64 <__cxa_atexit>:
 80a2c64:	b510      	push	{r4, lr}
 80a2c66:	4604      	mov	r4, r0
 80a2c68:	4804      	ldr	r0, [pc, #16]	; (80a2c7c <__cxa_atexit+0x18>)
 80a2c6a:	4613      	mov	r3, r2
 80a2c6c:	b120      	cbz	r0, 80a2c78 <__cxa_atexit+0x14>
 80a2c6e:	460a      	mov	r2, r1
 80a2c70:	2002      	movs	r0, #2
 80a2c72:	4621      	mov	r1, r4
 80a2c74:	f3af 8000 	nop.w
 80a2c78:	bd10      	pop	{r4, pc}
 80a2c7a:	bf00      	nop
 80a2c7c:	00000000 	.word	0x00000000

080a2c80 <memcpy>:
 80a2c80:	440a      	add	r2, r1
 80a2c82:	4291      	cmp	r1, r2
 80a2c84:	f100 33ff 	add.w	r3, r0, #4294967295
 80a2c88:	d100      	bne.n	80a2c8c <memcpy+0xc>
 80a2c8a:	4770      	bx	lr
 80a2c8c:	b510      	push	{r4, lr}
 80a2c8e:	f811 4b01 	ldrb.w	r4, [r1], #1
 80a2c92:	4291      	cmp	r1, r2
 80a2c94:	f803 4f01 	strb.w	r4, [r3, #1]!
 80a2c98:	d1f9      	bne.n	80a2c8e <memcpy+0xe>
 80a2c9a:	bd10      	pop	{r4, pc}

080a2c9c <memset>:
 80a2c9c:	4603      	mov	r3, r0
 80a2c9e:	4402      	add	r2, r0
 80a2ca0:	4293      	cmp	r3, r2
 80a2ca2:	d100      	bne.n	80a2ca6 <memset+0xa>
 80a2ca4:	4770      	bx	lr
 80a2ca6:	f803 1b01 	strb.w	r1, [r3], #1
 80a2caa:	e7f9      	b.n	80a2ca0 <memset+0x4>

080a2cac <srand>:
 80a2cac:	b538      	push	{r3, r4, r5, lr}
 80a2cae:	4b0d      	ldr	r3, [pc, #52]	; (80a2ce4 <srand+0x38>)
 80a2cb0:	4604      	mov	r4, r0
 80a2cb2:	681d      	ldr	r5, [r3, #0]
 80a2cb4:	6bab      	ldr	r3, [r5, #56]	; 0x38
 80a2cb6:	b97b      	cbnz	r3, 80a2cd8 <srand+0x2c>
 80a2cb8:	2018      	movs	r0, #24
 80a2cba:	f7fe f947 	bl	80a0f4c <malloc>
 80a2cbe:	4a0a      	ldr	r2, [pc, #40]	; (80a2ce8 <srand+0x3c>)
 80a2cc0:	4b0a      	ldr	r3, [pc, #40]	; (80a2cec <srand+0x40>)
 80a2cc2:	63a8      	str	r0, [r5, #56]	; 0x38
 80a2cc4:	e9c0 2300 	strd	r2, r3, [r0]
 80a2cc8:	4b09      	ldr	r3, [pc, #36]	; (80a2cf0 <srand+0x44>)
 80a2cca:	2201      	movs	r2, #1
 80a2ccc:	6083      	str	r3, [r0, #8]
 80a2cce:	230b      	movs	r3, #11
 80a2cd0:	8183      	strh	r3, [r0, #12]
 80a2cd2:	2300      	movs	r3, #0
 80a2cd4:	e9c0 2304 	strd	r2, r3, [r0, #16]
 80a2cd8:	2200      	movs	r2, #0
 80a2cda:	6bab      	ldr	r3, [r5, #56]	; 0x38
 80a2cdc:	611c      	str	r4, [r3, #16]
 80a2cde:	615a      	str	r2, [r3, #20]
 80a2ce0:	bd38      	pop	{r3, r4, r5, pc}
 80a2ce2:	bf00      	nop
 80a2ce4:	20000008 	.word	0x20000008
 80a2ce8:	abcd330e 	.word	0xabcd330e
 80a2cec:	e66d1234 	.word	0xe66d1234
 80a2cf0:	0005deec 	.word	0x0005deec

080a2cf4 <strcpy>:
 80a2cf4:	4603      	mov	r3, r0
 80a2cf6:	f811 2b01 	ldrb.w	r2, [r1], #1
 80a2cfa:	f803 2b01 	strb.w	r2, [r3], #1
 80a2cfe:	2a00      	cmp	r2, #0
 80a2d00:	d1f9      	bne.n	80a2cf6 <strcpy+0x2>
 80a2d02:	4770      	bx	lr

080a2d04 <strdup>:
 80a2d04:	4b02      	ldr	r3, [pc, #8]	; (80a2d10 <strdup+0xc>)
 80a2d06:	4601      	mov	r1, r0
 80a2d08:	6818      	ldr	r0, [r3, #0]
 80a2d0a:	f000 b803 	b.w	80a2d14 <_strdup_r>
 80a2d0e:	bf00      	nop
 80a2d10:	20000008 	.word	0x20000008

080a2d14 <_strdup_r>:
 80a2d14:	b570      	push	{r4, r5, r6, lr}
 80a2d16:	4604      	mov	r4, r0
 80a2d18:	4608      	mov	r0, r1
 80a2d1a:	460d      	mov	r5, r1
 80a2d1c:	f000 f80d 	bl	80a2d3a <strlen>
 80a2d20:	1c46      	adds	r6, r0, #1
 80a2d22:	4631      	mov	r1, r6
 80a2d24:	4620      	mov	r0, r4
 80a2d26:	f7fe f939 	bl	80a0f9c <_malloc_r>
 80a2d2a:	4604      	mov	r4, r0
 80a2d2c:	b118      	cbz	r0, 80a2d36 <_strdup_r+0x22>
 80a2d2e:	4632      	mov	r2, r6
 80a2d30:	4629      	mov	r1, r5
 80a2d32:	f7ff ffa5 	bl	80a2c80 <memcpy>
 80a2d36:	4620      	mov	r0, r4
 80a2d38:	bd70      	pop	{r4, r5, r6, pc}

080a2d3a <strlen>:
 80a2d3a:	4603      	mov	r3, r0
 80a2d3c:	f813 2b01 	ldrb.w	r2, [r3], #1
 80a2d40:	2a00      	cmp	r2, #0
 80a2d42:	d1fb      	bne.n	80a2d3c <strlen+0x2>
 80a2d44:	1a18      	subs	r0, r3, r0
 80a2d46:	3801      	subs	r0, #1
 80a2d48:	4770      	bx	lr

080a2d4a <link_code_end>:
	...

080a2d4c <dynalib_user>:
 80a2d4c:	001d 080a 005d 080a 0085 080a 0089 080a     ....]...........
 80a2d5c:	0000 0000 207b 6d22 5f79 6d65 6961 226c     ....{ "my_email"
 80a2d6c:	203a 2522 2273 202c 7322 6275 656a 7463     : "%s", "subject
 80a2d7c:	3a22 2220 7325 2c22 2220 6f62 7964 3a22     ": "%s", "body":
 80a2d8c:	2220 7325 2022 007d 616d 6c69 7567 456e      "%s" }.mailgunE
 80a2d9c:	6576 746e 4600 616c 6873 6e69 2067 454c     vent.Flashing LE
 80a2dac:	2044 7453 6972 7370 203a 4400 7369 6174     D Strips: .Dista
 80a2dbc:	636e 2065 6e69 6320 6e65 6974 656d 6574     nce in centimete
 80a2dcc:	7372 203a 2e25 6631 000a 6f53 656d 6e6f     rs: %.1f..Someon
 80a2ddc:	2065 6168 2073 706f 6e65 6465 7920 756f     e has opened you
 80a2dec:	2072 6f64 726f 2021 6c41 7261 206d 6168     r door! Alarm ha
 80a2dfc:	2073 6562 6e65 7320 756f 646e 6465 002e     s been sounded..
 80a2e0c:	6f70 6973 6d75 3234 4030 6d67 6961 2e6c     posium420@gmail.
 80a2e1c:	6f63 006d 6c41 7261 206d 6168 2073 6562     com.Alarm has be
 80a2e2c:	6e65 7420 6972 6767 7265 6465 0021 6f53     en triggered!.So
 80a2e3c:	656d 6f62 7964 7020 7361 6573 2064 6874     mebody passed th
 80a2e4c:	2065 6f64 726f 202c 7562 2074 6c61 7261     e door, but alar
 80a2e5c:	206d 7369 6f20 6666 4200 7475 6f74 206e     m is off.Button 
 80a2e6c:	7270 7365 6573 0064 6c41 7261 206d 7369     pressed.Alarm is
 80a2e7c:	6f20 006e 6c41 7261 206d 7369 6f20 6666      on.Alarm is off
 80a2e8c:	4500 616d 6c69 4320 756f 746e 7265 203a     .Email Counter: 
 80a2e9c:	4500 616d 6c69 7320 6174 6574 203a 2d00     .Email state: .-
 80a2eac:	2d2d 2d2d 2d2d 2d2d 2d2d 2d2d 2d2d 2d2d     ----------------
 80a2ebc:	2d2d 2d2d 2d2d 2d2d 2d2d 2d2d 2d2d 2d2d     ----------------
 80a2ecc:	6100 7070 2500 2d59 6d25 252d 5464 4825     .app.%Y-%m-%dT%H
 80a2edc:	253a 3a4d 5325 7a25 6100 6373 6974 656d     :%M:%S%z.asctime
 80a2eec:	0000 0000                                   ....

080a2ef0 <_ZTVSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE>:
	...
 80a2ef8:	15c9 080a 15cf 080a 160d 080a 15dd 080a     ................
 80a2f08:	15cb 080a                                   ....

080a2f0c <_ZTV9IPAddress>:
	...
 80a2f14:	1b11 080a 1b01 080a 1b03 080a               ............

080a2f20 <_ZTV9USBSerial>:
	...
 80a2f28:	1bcd 080a 1c33 080a 1c0b 080a 12a1 080a     ....3...........
 80a2f38:	1bfd 080a 1bcf 080a 1bdf 080a 1c2d 080a     ............-...
 80a2f48:	1bef 080a 1bc9 080a                         ........

080a2f50 <_ZTV11USARTSerial>:
	...
 80a2f58:	1e17 080a 1e7f 080a 1e5b 080a 12a1 080a     ........[.......
 80a2f68:	1e2b 080a 1e47 080a 1e39 080a 1e55 080a     +...G...9...U...
 80a2f78:	1e19 080a 1e1d 080a                         ........

080a2f80 <_ZTV7TwoWire>:
	...
 80a2f88:	1f31 080a 1f7b 080a 1f53 080a 1f33 080a     1...{...S...3...
 80a2f98:	1f5b 080a 1f63 080a 1f6b 080a 1f73 080a     [...c...k...s...

080a2fa8 <_ZTVN5spark9WiFiClassE>:
	...
 80a2fb0:	2043 080a 2039 080a 202f 080a 1fad 080a     C ..9 ../ ......
 80a2fc0:	13c3 080a 2023 080a 2017 080a 200f 080a     ....# ... ... ..
 80a2fd0:	2005 080a 1ffb 080a 1fb7 080a               . ..........

080a2fdc <_ZTVN5spark12NetworkClassE>:
	...
 80a2fe4:	2061 080a 206b 080a 2075 080a 207f 080a     a ..k ..u ... ..
 80a2ff4:	2089 080a 2095 080a 20a1 080a 20ad 080a     . ... ... ... ..
 80a3004:	20b5 080a 20bf 080a 20c9 080a               . ... ... ..

080a3010 <_ZSt7nothrow>:
	...

080a3011 <link_const_variable_data_end>:
 80a3011:	00          	.byte	0x00
	...

080a3014 <link_constructors_location>:
 80a3014:	080a06bd 	.word	0x080a06bd
 80a3018:	080a08ad 	.word	0x080a08ad
 80a301c:	080a0ff9 	.word	0x080a0ff9
 80a3020:	080a1409 	.word	0x080a1409
 80a3024:	080a1419 	.word	0x080a1419
 80a3028:	080a1461 	.word	0x080a1461
 80a302c:	080a204d 	.word	0x080a204d
 80a3030:	080a2119 	.word	0x080a2119
 80a3034:	080a227d 	.word	0x080a227d

080a3038 <link_constructors_end>:
	...
